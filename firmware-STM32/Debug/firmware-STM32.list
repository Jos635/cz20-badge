
firmware-STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a510  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e4  0800a61c  0800a61c  0001a61c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a900  0800a900  0002214c  2**0
                  CONTENTS
  4 .ARM          00000000  0800a900  0800a900  0002214c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a900  0800a900  0002214c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a900  0800a900  0001a900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a904  0800a904  0001a904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000214c  20000000  0800a908  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b60  2000214c  0800ca54  0002214c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002cac  0800ca54  00022cac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002214c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e734  00000000  00000000  00022175  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000462a  00000000  00000000  000408a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018f8  00000000  00000000  00044ed8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000017b0  00000000  00000000  000467d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018665  00000000  00000000  00047f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014bac  00000000  00000000  000605e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00083395  00000000  00000000  00075191  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f8526  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068bc  00000000  00000000  000f85a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000214c 	.word	0x2000214c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800a604 	.word	0x0800a604

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20002150 	.word	0x20002150
 8000148:	0800a604 	.word	0x0800a604

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <button_init>:
uint32_t button_row = 0; //Row selector
uint32_t button_state = 0;
uint32_t button_state_prev = 0;
uint16_t *i2c_buttonstate;

void button_init() {
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
	i2c_buttonstate = (uint16_t *) getMemory(1);
 8000160:	2001      	movs	r0, #1
 8000162:	f000 f929 	bl	80003b8 <getMemory>
 8000166:	4602      	mov	r2, r0
 8000168:	4b01      	ldr	r3, [pc, #4]	; (8000170 <button_init+0x14>)
 800016a:	601a      	str	r2, [r3, #0]
}
 800016c:	bf00      	nop
 800016e:	bd80      	pop	{r7, pc}
 8000170:	200026dc 	.word	0x200026dc

08000174 <button_task>:

void button_task() {
 8000174:	b580      	push	{r7, lr}
 8000176:	af00      	add	r7, sp, #0
	if((HAL_GetTick() - lastbutton_tick) > BUTTON_TICK) { //BUTTON task
 8000178:	f001 f9fe 	bl	8001578 <HAL_GetTick>
 800017c:	4602      	mov	r2, r0
 800017e:	4b43      	ldr	r3, [pc, #268]	; (800028c <button_task+0x118>)
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	1ad3      	subs	r3, r2, r3
 8000184:	2b32      	cmp	r3, #50	; 0x32
 8000186:	d97e      	bls.n	8000286 <button_task+0x112>
		lastbutton_tick = HAL_GetTick();
 8000188:	f001 f9f6 	bl	8001578 <HAL_GetTick>
 800018c:	4602      	mov	r2, r0
 800018e:	4b3f      	ldr	r3, [pc, #252]	; (800028c <button_task+0x118>)
 8000190:	601a      	str	r2, [r3, #0]

		switch(button_row) {
 8000192:	4b3f      	ldr	r3, [pc, #252]	; (8000290 <button_task+0x11c>)
 8000194:	681b      	ldr	r3, [r3, #0]
 8000196:	2b03      	cmp	r3, #3
 8000198:	d875      	bhi.n	8000286 <button_task+0x112>
 800019a:	a201      	add	r2, pc, #4	; (adr r2, 80001a0 <button_task+0x2c>)
 800019c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001a0:	080001b1 	.word	0x080001b1
 80001a4:	080001db 	.word	0x080001db
 80001a8:	08000209 	.word	0x08000209
 80001ac:	08000239 	.word	0x08000239
		case 0:
			button_state |= ((GPIOA->IDR >> 4) & 0x000F);
 80001b0:	4b38      	ldr	r3, [pc, #224]	; (8000294 <button_task+0x120>)
 80001b2:	689b      	ldr	r3, [r3, #8]
 80001b4:	091b      	lsrs	r3, r3, #4
 80001b6:	f003 020f 	and.w	r2, r3, #15
 80001ba:	4b37      	ldr	r3, [pc, #220]	; (8000298 <button_task+0x124>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	4313      	orrs	r3, r2
 80001c0:	4a35      	ldr	r2, [pc, #212]	; (8000298 <button_task+0x124>)
 80001c2:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 80001c4:	2200      	movs	r2, #0
 80001c6:	2101      	movs	r1, #1
 80001c8:	4832      	ldr	r0, [pc, #200]	; (8000294 <button_task+0x120>)
 80001ca:	f001 fcc9 	bl	8001b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 80001ce:	2201      	movs	r2, #1
 80001d0:	2102      	movs	r1, #2
 80001d2:	4830      	ldr	r0, [pc, #192]	; (8000294 <button_task+0x120>)
 80001d4:	f001 fcc4 	bl	8001b60 <HAL_GPIO_WritePin>
			break;
 80001d8:	e055      	b.n	8000286 <button_task+0x112>
		case 1:
			button_state |= ((GPIOA->IDR >> 4) & 0x000F) << 4;
 80001da:	4b2e      	ldr	r3, [pc, #184]	; (8000294 <button_task+0x120>)
 80001dc:	689b      	ldr	r3, [r3, #8]
 80001de:	091b      	lsrs	r3, r3, #4
 80001e0:	011b      	lsls	r3, r3, #4
 80001e2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80001e6:	4b2c      	ldr	r3, [pc, #176]	; (8000298 <button_task+0x124>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	4313      	orrs	r3, r2
 80001ec:	4a2a      	ldr	r2, [pc, #168]	; (8000298 <button_task+0x124>)
 80001ee:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 80001f0:	2200      	movs	r2, #0
 80001f2:	2102      	movs	r1, #2
 80001f4:	4827      	ldr	r0, [pc, #156]	; (8000294 <button_task+0x120>)
 80001f6:	f001 fcb3 	bl	8001b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 80001fa:	2201      	movs	r2, #1
 80001fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000200:	4824      	ldr	r0, [pc, #144]	; (8000294 <button_task+0x120>)
 8000202:	f001 fcad 	bl	8001b60 <HAL_GPIO_WritePin>
			break;
 8000206:	e03e      	b.n	8000286 <button_task+0x112>
		case 2:
			button_state |= ((GPIOA->IDR >> 4) & 0x000F) << 8;
 8000208:	4b22      	ldr	r3, [pc, #136]	; (8000294 <button_task+0x120>)
 800020a:	689b      	ldr	r3, [r3, #8]
 800020c:	091b      	lsrs	r3, r3, #4
 800020e:	021b      	lsls	r3, r3, #8
 8000210:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8000214:	4b20      	ldr	r3, [pc, #128]	; (8000298 <button_task+0x124>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4313      	orrs	r3, r2
 800021a:	4a1f      	ldr	r2, [pc, #124]	; (8000298 <button_task+0x124>)
 800021c:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 800021e:	2200      	movs	r2, #0
 8000220:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000224:	481b      	ldr	r0, [pc, #108]	; (8000294 <button_task+0x120>)
 8000226:	f001 fc9b 	bl	8001b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 800022a:	2201      	movs	r2, #1
 800022c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000230:	4818      	ldr	r0, [pc, #96]	; (8000294 <button_task+0x120>)
 8000232:	f001 fc95 	bl	8001b60 <HAL_GPIO_WritePin>
			break;
 8000236:	e026      	b.n	8000286 <button_task+0x112>
		case 3:
			button_state |= ((GPIOA->IDR >> 4) & 0x000F) << 12;
 8000238:	4b16      	ldr	r3, [pc, #88]	; (8000294 <button_task+0x120>)
 800023a:	689b      	ldr	r3, [r3, #8]
 800023c:	091b      	lsrs	r3, r3, #4
 800023e:	031b      	lsls	r3, r3, #12
 8000240:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8000244:	4b14      	ldr	r3, [pc, #80]	; (8000298 <button_task+0x124>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4313      	orrs	r3, r2
 800024a:	4a13      	ldr	r2, [pc, #76]	; (8000298 <button_task+0x124>)
 800024c:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 800024e:	2200      	movs	r2, #0
 8000250:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000254:	480f      	ldr	r0, [pc, #60]	; (8000294 <button_task+0x120>)
 8000256:	f001 fc83 	bl	8001b60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 800025a:	2201      	movs	r2, #1
 800025c:	2101      	movs	r1, #1
 800025e:	480d      	ldr	r0, [pc, #52]	; (8000294 <button_task+0x120>)
 8000260:	f001 fc7e 	bl	8001b60 <HAL_GPIO_WritePin>
			if(button_state_prev != button_state) {	//Changes in button matrix
 8000264:	4b0d      	ldr	r3, [pc, #52]	; (800029c <button_task+0x128>)
 8000266:	681a      	ldr	r2, [r3, #0]
 8000268:	4b0b      	ldr	r3, [pc, #44]	; (8000298 <button_task+0x124>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	429a      	cmp	r2, r3
 800026e:	d009      	beq.n	8000284 <button_task+0x110>
				*i2c_buttonstate = button_state;
 8000270:	4b09      	ldr	r3, [pc, #36]	; (8000298 <button_task+0x124>)
 8000272:	681a      	ldr	r2, [r3, #0]
 8000274:	4b0a      	ldr	r3, [pc, #40]	; (80002a0 <button_task+0x12c>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	b292      	uxth	r2, r2
 800027a:	801a      	strh	r2, [r3, #0]
				button_state_prev = button_state;
 800027c:	4b06      	ldr	r3, [pc, #24]	; (8000298 <button_task+0x124>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a06      	ldr	r2, [pc, #24]	; (800029c <button_task+0x128>)
 8000282:	6013      	str	r3, [r2, #0]
			}
			break;
 8000284:	bf00      	nop
		}
	}
}
 8000286:	bf00      	nop
 8000288:	bd80      	pop	{r7, pc}
 800028a:	bf00      	nop
 800028c:	20002168 	.word	0x20002168
 8000290:	2000216c 	.word	0x2000216c
 8000294:	40010800 	.word	0x40010800
 8000298:	20002170 	.word	0x20002170
 800029c:	20002174 	.word	0x20002174
 80002a0:	200026dc 	.word	0x200026dc

080002a4 <HAL_I2C_AddrCallback>:
uint8_t i2cbuf[30];
uint8_t config_map[64] = {1, 2, 3, 4};
uint8_t first = 1;
uint8_t address;

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode) {
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
 80002ac:	460b      	mov	r3, r1
 80002ae:	70fb      	strb	r3, [r7, #3]
 80002b0:	4613      	mov	r3, r2
 80002b2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);
  first = 1;
 80002b4:	4b0f      	ldr	r3, [pc, #60]	; (80002f4 <HAL_I2C_AddrCallback+0x50>)
 80002b6:	2201      	movs	r2, #1
 80002b8:	701a      	strb	r2, [r3, #0]
  if(hi2c->Instance == I2C1) {
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	4a0e      	ldr	r2, [pc, #56]	; (80002f8 <HAL_I2C_AddrCallback+0x54>)
 80002c0:	4293      	cmp	r3, r2
 80002c2:	d113      	bne.n	80002ec <HAL_I2C_AddrCallback+0x48>
	  if(TransferDirection == 1) {	//Write
 80002c4:	78fb      	ldrb	r3, [r7, #3]
 80002c6:	2b01      	cmp	r3, #1
 80002c8:	d106      	bne.n	80002d8 <HAL_I2C_AddrCallback+0x34>
		  HAL_I2C_Slave_Seq_Receive_IT(hi2c, i2cbuf, 1, I2C_FIRST_FRAME);
 80002ca:	2301      	movs	r3, #1
 80002cc:	2201      	movs	r2, #1
 80002ce:	490b      	ldr	r1, [pc, #44]	; (80002fc <HAL_I2C_AddrCallback+0x58>)
 80002d0:	6878      	ldr	r0, [r7, #4]
 80002d2:	f001 fdf7 	bl	8001ec4 <HAL_I2C_Slave_Seq_Receive_IT>
	  } else {	//Read
		  HAL_I2C_Slave_Seq_Transmit_IT(hi2c, &config_map[address], 1, I2C_FIRST_FRAME);
	  }
  }
}
 80002d6:	e009      	b.n	80002ec <HAL_I2C_AddrCallback+0x48>
		  HAL_I2C_Slave_Seq_Transmit_IT(hi2c, &config_map[address], 1, I2C_FIRST_FRAME);
 80002d8:	4b09      	ldr	r3, [pc, #36]	; (8000300 <HAL_I2C_AddrCallback+0x5c>)
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	461a      	mov	r2, r3
 80002de:	4b09      	ldr	r3, [pc, #36]	; (8000304 <HAL_I2C_AddrCallback+0x60>)
 80002e0:	18d1      	adds	r1, r2, r3
 80002e2:	2301      	movs	r3, #1
 80002e4:	2201      	movs	r2, #1
 80002e6:	6878      	ldr	r0, [r7, #4]
 80002e8:	f001 fd7a 	bl	8001de0 <HAL_I2C_Slave_Seq_Transmit_IT>
}
 80002ec:	bf00      	nop
 80002ee:	3708      	adds	r7, #8
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	20000040 	.word	0x20000040
 80002f8:	40005400 	.word	0x40005400
 80002fc:	200026e4 	.word	0x200026e4
 8000300:	200026e0 	.word	0x200026e0
 8000304:	20000000 	.word	0x20000000

08000308 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
	address++;
 8000310:	4b09      	ldr	r3, [pc, #36]	; (8000338 <HAL_I2C_SlaveTxCpltCallback+0x30>)
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	3301      	adds	r3, #1
 8000316:	b2da      	uxtb	r2, r3
 8000318:	4b07      	ldr	r3, [pc, #28]	; (8000338 <HAL_I2C_SlaveTxCpltCallback+0x30>)
 800031a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Slave_Seq_Transmit_IT(hi2c, &config_map[address], 1, I2C_FIRST_FRAME);
 800031c:	4b06      	ldr	r3, [pc, #24]	; (8000338 <HAL_I2C_SlaveTxCpltCallback+0x30>)
 800031e:	781b      	ldrb	r3, [r3, #0]
 8000320:	461a      	mov	r2, r3
 8000322:	4b06      	ldr	r3, [pc, #24]	; (800033c <HAL_I2C_SlaveTxCpltCallback+0x34>)
 8000324:	18d1      	adds	r1, r2, r3
 8000326:	2301      	movs	r3, #1
 8000328:	2201      	movs	r2, #1
 800032a:	6878      	ldr	r0, [r7, #4]
 800032c:	f001 fd58 	bl	8001de0 <HAL_I2C_Slave_Seq_Transmit_IT>
}
 8000330:	bf00      	nop
 8000332:	3708      	adds	r7, #8
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}
 8000338:	200026e0 	.word	0x200026e0
 800033c:	20000000 	.word	0x20000000

08000340 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
	if(first) {
 8000348:	4b11      	ldr	r3, [pc, #68]	; (8000390 <HAL_I2C_SlaveRxCpltCallback+0x50>)
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	2b00      	cmp	r3, #0
 800034e:	d007      	beq.n	8000360 <HAL_I2C_SlaveRxCpltCallback+0x20>
		first = 0;
 8000350:	4b0f      	ldr	r3, [pc, #60]	; (8000390 <HAL_I2C_SlaveRxCpltCallback+0x50>)
 8000352:	2200      	movs	r2, #0
 8000354:	701a      	strb	r2, [r3, #0]
		address = i2cbuf[0];
 8000356:	4b0f      	ldr	r3, [pc, #60]	; (8000394 <HAL_I2C_SlaveRxCpltCallback+0x54>)
 8000358:	781a      	ldrb	r2, [r3, #0]
 800035a:	4b0f      	ldr	r3, [pc, #60]	; (8000398 <HAL_I2C_SlaveRxCpltCallback+0x58>)
 800035c:	701a      	strb	r2, [r3, #0]
 800035e:	e00c      	b.n	800037a <HAL_I2C_SlaveRxCpltCallback+0x3a>
	} else {
		config_map[address] = i2cbuf[0];
 8000360:	4b0d      	ldr	r3, [pc, #52]	; (8000398 <HAL_I2C_SlaveRxCpltCallback+0x58>)
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	461a      	mov	r2, r3
 8000366:	4b0b      	ldr	r3, [pc, #44]	; (8000394 <HAL_I2C_SlaveRxCpltCallback+0x54>)
 8000368:	7819      	ldrb	r1, [r3, #0]
 800036a:	4b0c      	ldr	r3, [pc, #48]	; (800039c <HAL_I2C_SlaveRxCpltCallback+0x5c>)
 800036c:	5499      	strb	r1, [r3, r2]
		address++;
 800036e:	4b0a      	ldr	r3, [pc, #40]	; (8000398 <HAL_I2C_SlaveRxCpltCallback+0x58>)
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	3301      	adds	r3, #1
 8000374:	b2da      	uxtb	r2, r3
 8000376:	4b08      	ldr	r3, [pc, #32]	; (8000398 <HAL_I2C_SlaveRxCpltCallback+0x58>)
 8000378:	701a      	strb	r2, [r3, #0]
	}
	HAL_I2C_Slave_Seq_Receive_IT(hi2c, i2cbuf, 1, I2C_FIRST_FRAME);
 800037a:	2301      	movs	r3, #1
 800037c:	2201      	movs	r2, #1
 800037e:	4905      	ldr	r1, [pc, #20]	; (8000394 <HAL_I2C_SlaveRxCpltCallback+0x54>)
 8000380:	6878      	ldr	r0, [r7, #4]
 8000382:	f001 fd9f 	bl	8001ec4 <HAL_I2C_Slave_Seq_Receive_IT>
}
 8000386:	bf00      	nop
 8000388:	3708      	adds	r7, #8
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	20000040 	.word	0x20000040
 8000394:	200026e4 	.word	0x200026e4
 8000398:	200026e0 	.word	0x200026e0
 800039c:	20000000 	.word	0x20000000

080003a0 <HAL_I2C_ListenCpltCallback>:

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c) {
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(hi2c);
 80003a8:	6878      	ldr	r0, [r7, #4]
 80003aa:	f001 fdfd 	bl	8001fa8 <HAL_I2C_EnableListen_IT>
}
 80003ae:	bf00      	nop
 80003b0:	3708      	adds	r7, #8
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
	...

080003b8 <getMemory>:

uint8_t* getMemory(uint32_t pos) {
 80003b8:	b480      	push	{r7}
 80003ba:	b083      	sub	sp, #12
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
	return &config_map[pos];
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	4a03      	ldr	r2, [pc, #12]	; (80003d0 <getMemory+0x18>)
 80003c4:	4413      	add	r3, r2
}
 80003c6:	4618      	mov	r0, r3
 80003c8:	370c      	adds	r7, #12
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bc80      	pop	{r7}
 80003ce:	4770      	bx	lr
 80003d0:	20000000 	.word	0x20000000

080003d4 <init_led>:
		, 5, 6, 6, 5, 4, 3, 2, 1, 6, 6, 5, 6, 6, 5, 4, 6, 6, 5, 6, 6, 5, 4, 3, 6, 6, 5, 6, 6, 5, 4, 6, 6, 5,
		 6, 6, 5, 4, 3, 2, 6, 6, 5, 6, 6, 5, 4, 6, 6, 5, 6, 6, 5, 4, 3, 6, 6, 5, 6, 6, 5, 4, 6, 6, 5, 6};

uint8_t outputmap[8][7];

void init_led() {
 80003d4:	b480      	push	{r7}
 80003d6:	b083      	sub	sp, #12
 80003d8:	af00      	add	r7, sp, #0
	for(int i = 0; i < 8; i++) {
 80003da:	2300      	movs	r3, #0
 80003dc:	607b      	str	r3, [r7, #4]
 80003de:	e01d      	b.n	800041c <init_led+0x48>
		for(int j = 0; j < 7; j++) {
 80003e0:	2300      	movs	r3, #0
 80003e2:	603b      	str	r3, [r7, #0]
 80003e4:	e014      	b.n	8000410 <init_led+0x3c>
			outputmap[i][j] = i + (i<<3);
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	b2db      	uxtb	r3, r3
 80003ea:	00db      	lsls	r3, r3, #3
 80003ec:	b2da      	uxtb	r2, r3
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	b2db      	uxtb	r3, r3
 80003f2:	4413      	add	r3, r2
 80003f4:	b2d8      	uxtb	r0, r3
 80003f6:	490d      	ldr	r1, [pc, #52]	; (800042c <init_led+0x58>)
 80003f8:	687a      	ldr	r2, [r7, #4]
 80003fa:	4613      	mov	r3, r2
 80003fc:	00db      	lsls	r3, r3, #3
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	18ca      	adds	r2, r1, r3
 8000402:	683b      	ldr	r3, [r7, #0]
 8000404:	4413      	add	r3, r2
 8000406:	4602      	mov	r2, r0
 8000408:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 7; j++) {
 800040a:	683b      	ldr	r3, [r7, #0]
 800040c:	3301      	adds	r3, #1
 800040e:	603b      	str	r3, [r7, #0]
 8000410:	683b      	ldr	r3, [r7, #0]
 8000412:	2b06      	cmp	r3, #6
 8000414:	dde7      	ble.n	80003e6 <init_led+0x12>
	for(int i = 0; i < 8; i++) {
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	3301      	adds	r3, #1
 800041a:	607b      	str	r3, [r7, #4]
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	2b07      	cmp	r3, #7
 8000420:	ddde      	ble.n	80003e0 <init_led+0xc>
		}
	}
}
 8000422:	bf00      	nop
 8000424:	370c      	adds	r7, #12
 8000426:	46bd      	mov	sp, r7
 8000428:	bc80      	pop	{r7}
 800042a:	4770      	bx	lr
 800042c:	20002704 	.word	0x20002704

08000430 <getOutput_led>:

void handle_led() {

}

uint8_t getOutput_led(uint16_t lineselect) {
 8000430:	b480      	push	{r7}
 8000432:	b085      	sub	sp, #20
 8000434:	af00      	add	r7, sp, #0
 8000436:	4603      	mov	r3, r0
 8000438:	80fb      	strh	r3, [r7, #6]
	static uint8_t pos;
	uint8_t id = 31-__builtin_clz(lineselect >> 8);
 800043a:	88fb      	ldrh	r3, [r7, #6]
 800043c:	0a1b      	lsrs	r3, r3, #8
 800043e:	b29b      	uxth	r3, r3
 8000440:	fab3 f383 	clz	r3, r3
 8000444:	b2db      	uxtb	r3, r3
 8000446:	f1c3 031f 	rsb	r3, r3, #31
 800044a:	73fb      	strb	r3, [r7, #15]
	uint8_t return_val = outputmap[id][bitplane[pos]];
 800044c:	7bfa      	ldrb	r2, [r7, #15]
 800044e:	4b12      	ldr	r3, [pc, #72]	; (8000498 <getOutput_led+0x68>)
 8000450:	781b      	ldrb	r3, [r3, #0]
 8000452:	4619      	mov	r1, r3
 8000454:	4b11      	ldr	r3, [pc, #68]	; (800049c <getOutput_led+0x6c>)
 8000456:	5c5b      	ldrb	r3, [r3, r1]
 8000458:	4618      	mov	r0, r3
 800045a:	4911      	ldr	r1, [pc, #68]	; (80004a0 <getOutput_led+0x70>)
 800045c:	4613      	mov	r3, r2
 800045e:	00db      	lsls	r3, r3, #3
 8000460:	1a9b      	subs	r3, r3, r2
 8000462:	440b      	add	r3, r1
 8000464:	4403      	add	r3, r0
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	73bb      	strb	r3, [r7, #14]
	if(lineselect == 0x8000) pos++;
 800046a:	88fb      	ldrh	r3, [r7, #6]
 800046c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000470:	d105      	bne.n	800047e <getOutput_led+0x4e>
 8000472:	4b09      	ldr	r3, [pc, #36]	; (8000498 <getOutput_led+0x68>)
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	3301      	adds	r3, #1
 8000478:	b2da      	uxtb	r2, r3
 800047a:	4b07      	ldr	r3, [pc, #28]	; (8000498 <getOutput_led+0x68>)
 800047c:	701a      	strb	r2, [r3, #0]
	if(pos == 128) pos = 0;
 800047e:	4b06      	ldr	r3, [pc, #24]	; (8000498 <getOutput_led+0x68>)
 8000480:	781b      	ldrb	r3, [r3, #0]
 8000482:	2b80      	cmp	r3, #128	; 0x80
 8000484:	d102      	bne.n	800048c <getOutput_led+0x5c>
 8000486:	4b04      	ldr	r3, [pc, #16]	; (8000498 <getOutput_led+0x68>)
 8000488:	2200      	movs	r2, #0
 800048a:	701a      	strb	r2, [r3, #0]
	return return_val;
 800048c:	7bbb      	ldrb	r3, [r7, #14]
}
 800048e:	4618      	mov	r0, r3
 8000490:	3714      	adds	r7, #20
 8000492:	46bd      	mov	sp, r7
 8000494:	bc80      	pop	{r7}
 8000496:	4770      	bx	lr
 8000498:	20002178 	.word	0x20002178
 800049c:	20000044 	.word	0x20000044
 80004a0:	20002704 	.word	0x20002704

080004a4 <tud_cdc_n_write_char>:
  uint8_t ch;
  return tud_cdc_n_read(itf, &ch, 1) ? (int32_t) ch : -1;
}

static inline uint32_t tud_cdc_n_write_char(uint8_t itf, char ch)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	4603      	mov	r3, r0
 80004ac:	460a      	mov	r2, r1
 80004ae:	71fb      	strb	r3, [r7, #7]
 80004b0:	4613      	mov	r3, r2
 80004b2:	71bb      	strb	r3, [r7, #6]
  return tud_cdc_n_write(itf, &ch, 1);
 80004b4:	1db9      	adds	r1, r7, #6
 80004b6:	79fb      	ldrb	r3, [r7, #7]
 80004b8:	2201      	movs	r2, #1
 80004ba:	4618      	mov	r0, r3
 80004bc:	f005 f8bc 	bl	8005638 <tud_cdc_n_write>
 80004c0:	4603      	mov	r3, r0
}
 80004c2:	4618      	mov	r0, r3
 80004c4:	3708      	adds	r7, #8
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}

080004ca <tud_cdc_n_write_str>:

static inline uint32_t tud_cdc_n_write_str (uint8_t itf, char const* str)
{
 80004ca:	b580      	push	{r7, lr}
 80004cc:	b082      	sub	sp, #8
 80004ce:	af00      	add	r7, sp, #0
 80004d0:	4603      	mov	r3, r0
 80004d2:	6039      	str	r1, [r7, #0]
 80004d4:	71fb      	strb	r3, [r7, #7]
  return tud_cdc_n_write(itf, str, strlen(str));
 80004d6:	6838      	ldr	r0, [r7, #0]
 80004d8:	f7ff fe38 	bl	800014c <strlen>
 80004dc:	4602      	mov	r2, r0
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	6839      	ldr	r1, [r7, #0]
 80004e2:	4618      	mov	r0, r3
 80004e4:	f005 f8a8 	bl	8005638 <tud_cdc_n_write>
 80004e8:	4603      	mov	r3, r0
}
 80004ea:	4618      	mov	r0, r3
 80004ec:	3708      	adds	r7, #8
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}

080004f2 <tud_cdc_connected>:

static inline bool tud_cdc_connected (void)
{
 80004f2:	b580      	push	{r7, lr}
 80004f4:	af00      	add	r7, sp, #0
  return tud_cdc_n_connected(0);
 80004f6:	2000      	movs	r0, #0
 80004f8:	f005 f83e 	bl	8005578 <tud_cdc_n_connected>
 80004fc:	4603      	mov	r3, r0
}
 80004fe:	4618      	mov	r0, r3
 8000500:	bd80      	pop	{r7, pc}

08000502 <tud_cdc_available>:
{
  tud_cdc_n_set_wanted_char(0, wanted);
}

static inline uint32_t tud_cdc_available (void)
{
 8000502:	b580      	push	{r7, lr}
 8000504:	af00      	add	r7, sp, #0
  return tud_cdc_n_available(0);
 8000506:	2000      	movs	r0, #0
 8000508:	f005 f85c 	bl	80055c4 <tud_cdc_n_available>
 800050c:	4603      	mov	r3, r0
}
 800050e:	4618      	mov	r0, r3
 8000510:	bd80      	pop	{r7, pc}

08000512 <tud_cdc_read>:
{
  return tud_cdc_n_read_char(0);
}

static inline uint32_t tud_cdc_read (void* buffer, uint32_t bufsize)
{
 8000512:	b580      	push	{r7, lr}
 8000514:	b082      	sub	sp, #8
 8000516:	af00      	add	r7, sp, #0
 8000518:	6078      	str	r0, [r7, #4]
 800051a:	6039      	str	r1, [r7, #0]
  return tud_cdc_n_read(0, buffer, bufsize);
 800051c:	683a      	ldr	r2, [r7, #0]
 800051e:	6879      	ldr	r1, [r7, #4]
 8000520:	2000      	movs	r0, #0
 8000522:	f005 f867 	bl	80055f4 <tud_cdc_n_read>
 8000526:	4603      	mov	r3, r0
}
 8000528:	4618      	mov	r0, r3
 800052a:	3708      	adds	r7, #8
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}

08000530 <tud_cdc_write_char>:
{
  return tud_cdc_n_peek(0, pos, u8);
}

static inline uint32_t tud_cdc_write_char (char ch)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	71fb      	strb	r3, [r7, #7]
  return tud_cdc_n_write_char(0, ch);
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	4619      	mov	r1, r3
 800053e:	2000      	movs	r0, #0
 8000540:	f7ff ffb0 	bl	80004a4 <tud_cdc_n_write_char>
 8000544:	4603      	mov	r3, r0
}
 8000546:	4618      	mov	r0, r3
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}

0800054e <tud_cdc_write_str>:
{
  return tud_cdc_n_write(0, buffer, bufsize);
}

static inline uint32_t tud_cdc_write_str (char const* str)
{
 800054e:	b580      	push	{r7, lr}
 8000550:	b082      	sub	sp, #8
 8000552:	af00      	add	r7, sp, #0
 8000554:	6078      	str	r0, [r7, #4]
  return tud_cdc_n_write_str(0, str);
 8000556:	6879      	ldr	r1, [r7, #4]
 8000558:	2000      	movs	r0, #0
 800055a:	f7ff ffb6 	bl	80004ca <tud_cdc_n_write_str>
 800055e:	4603      	mov	r3, r0
}
 8000560:	4618      	mov	r0, r3
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}

08000568 <tud_cdc_write_flush>:

static inline bool tud_cdc_write_flush (void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  return tud_cdc_n_write_flush(0);
 800056c:	2000      	movs	r0, #0
 800056e:	f005 f881 	bl	8005674 <tud_cdc_n_write_flush>
 8000572:	4603      	mov	r3, r0
}
 8000574:	4618      	mov	r0, r3
 8000576:	bd80      	pop	{r7, pc}

08000578 <tud_midi_write>:
{
  tud_midi_n_read_flush(0, 0);
}

static inline uint32_t tud_midi_write (uint8_t jack_id, uint8_t const* buffer, uint32_t bufsize)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
 8000584:	73fb      	strb	r3, [r7, #15]
  return tud_midi_n_write(0, jack_id, buffer, bufsize);
 8000586:	7bf9      	ldrb	r1, [r7, #15]
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	68ba      	ldr	r2, [r7, #8]
 800058c:	2000      	movs	r0, #0
 800058e:	f006 f83f 	bl	8006610 <tud_midi_n_write>
 8000592:	4603      	mov	r3, r0
}
 8000594:	4618      	mov	r0, r3
 8000596:	3710      	adds	r7, #16
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}

0800059c <tudi_midi_write24>:

static inline uint32_t tudi_midi_write24 (uint8_t jack_id, uint8_t b1, uint8_t b2, uint8_t b3)
{
 800059c:	b590      	push	{r4, r7, lr}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4604      	mov	r4, r0
 80005a4:	4608      	mov	r0, r1
 80005a6:	4611      	mov	r1, r2
 80005a8:	461a      	mov	r2, r3
 80005aa:	4623      	mov	r3, r4
 80005ac:	71fb      	strb	r3, [r7, #7]
 80005ae:	4603      	mov	r3, r0
 80005b0:	71bb      	strb	r3, [r7, #6]
 80005b2:	460b      	mov	r3, r1
 80005b4:	717b      	strb	r3, [r7, #5]
 80005b6:	4613      	mov	r3, r2
 80005b8:	713b      	strb	r3, [r7, #4]
  uint8_t msg[3] = { b1, b2, b3 };
 80005ba:	79bb      	ldrb	r3, [r7, #6]
 80005bc:	733b      	strb	r3, [r7, #12]
 80005be:	797b      	ldrb	r3, [r7, #5]
 80005c0:	737b      	strb	r3, [r7, #13]
 80005c2:	793b      	ldrb	r3, [r7, #4]
 80005c4:	73bb      	strb	r3, [r7, #14]
  return tud_midi_write(jack_id, msg, 3);
 80005c6:	f107 010c 	add.w	r1, r7, #12
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	2203      	movs	r2, #3
 80005ce:	4618      	mov	r0, r3
 80005d0:	f7ff ffd2 	bl	8000578 <tud_midi_write>
 80005d4:	4603      	mov	r3, r0
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	3714      	adds	r7, #20
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd90      	pop	{r4, r7, pc}
	...

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e4:	f000 ff70 	bl	80014c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e8:	f000 f82e 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ec:	f000 f9c4 	bl	8000978 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005f0:	f000 f882 	bl	80006f8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80005f4:	f000 f94a 	bl	800088c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80005f8:	f000 f972 	bl	80008e0 <MX_USART2_UART_Init>
  MX_USB_PCD_Init();
 80005fc:	f000 f99a 	bl	8000934 <MX_USB_PCD_Init>
  MX_TIM1_Init();
 8000600:	f000 f8a8 	bl	8000754 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2C_EnableListen_IT(&hi2c1);
 8000604:	480e      	ldr	r0, [pc, #56]	; (8000640 <main+0x60>)
 8000606:	f001 fccf 	bl	8001fa8 <HAL_I2C_EnableListen_IT>
  tusb_init();
 800060a:	f009 ff79 	bl	800a500 <tusb_init>
  init_led();
 800060e:	f7ff fee1 	bl	80003d4 <init_led>
  button_init();
 8000612:	f7ff fda3 	bl	800015c <button_init>
  HAL_TIM_Base_Start_IT(&htim1);
 8000616:	480b      	ldr	r0, [pc, #44]	; (8000644 <main+0x64>)
 8000618:	f003 fe85 	bl	8004326 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 800061c:	2100      	movs	r1, #0
 800061e:	4809      	ldr	r0, [pc, #36]	; (8000644 <main+0x64>)
 8000620:	f003 fed8 	bl	80043d4 <HAL_TIM_PWM_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  tud_task(); // tinyusb device task
 8000624:	f007 fcf2 	bl	800800c <tud_task>
	  led_blinking_task();
 8000628:	f000 fb96 	bl	8000d58 <led_blinking_task>
		#if CFG_TUD_CDC
				cdc_task();
 800062c:	f000 fa6a 	bl	8000b04 <cdc_task>
		#endif

		#if CFG_TUD_HID
				hid_task();
 8000630:	f000 fabe 	bl	8000bb0 <hid_task>
		#endif

		#if CFG_TUD_MIDI
				midi_task();
 8000634:	f000 fb44 	bl	8000cc0 <midi_task>
		#endif

		button_task();
 8000638:	f7ff fd9c 	bl	8000174 <button_task>
	  tud_task(); // tinyusb device task
 800063c:	e7f2      	b.n	8000624 <main+0x44>
 800063e:	bf00      	nop
 8000640:	2000273c 	.word	0x2000273c
 8000644:	200027d0 	.word	0x200027d0

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b094      	sub	sp, #80	; 0x50
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000652:	2228      	movs	r2, #40	; 0x28
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f009 ffcc 	bl	800a5f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	f107 0314 	add.w	r3, r7, #20
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000678:	2302      	movs	r3, #2
 800067a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067c:	2301      	movs	r3, #1
 800067e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000680:	2310      	movs	r3, #16
 8000682:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000684:	2302      	movs	r3, #2
 8000686:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000688:	2300      	movs	r3, #0
 800068a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800068c:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8000690:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000692:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000696:	4618      	mov	r0, r3
 8000698:	f003 f948 	bl	800392c <HAL_RCC_OscConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80006a2:	f000 fb81 	bl	8000da8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a6:	230f      	movs	r3, #15
 80006a8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006aa:	2302      	movs	r3, #2
 80006ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006b6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006bc:	f107 0314 	add.w	r3, r7, #20
 80006c0:	2101      	movs	r1, #1
 80006c2:	4618      	mov	r0, r3
 80006c4:	f003 fbb2 	bl	8003e2c <HAL_RCC_ClockConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80006ce:	f000 fb6b 	bl	8000da8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80006d2:	2310      	movs	r3, #16
 80006d4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80006d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006da:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	4618      	mov	r0, r3
 80006e0:	f003 fd40 	bl	8004164 <HAL_RCCEx_PeriphCLKConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006ea:	f000 fb5d 	bl	8000da8 <Error_Handler>
  }
}
 80006ee:	bf00      	nop
 80006f0:	3750      	adds	r7, #80	; 0x50
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
	...

080006f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <MX_I2C1_Init+0x50>)
 80006fe:	4a13      	ldr	r2, [pc, #76]	; (800074c <MX_I2C1_Init+0x54>)
 8000700:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000702:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_I2C1_Init+0x50>)
 8000704:	4a12      	ldr	r2, [pc, #72]	; (8000750 <MX_I2C1_Init+0x58>)
 8000706:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000708:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <MX_I2C1_Init+0x50>)
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 50;
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <MX_I2C1_Init+0x50>)
 8000710:	2232      	movs	r2, #50	; 0x32
 8000712:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_I2C1_Init+0x50>)
 8000716:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800071a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800071c:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <MX_I2C1_Init+0x50>)
 800071e:	2200      	movs	r2, #0
 8000720:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_I2C1_Init+0x50>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000728:	4b07      	ldr	r3, [pc, #28]	; (8000748 <MX_I2C1_Init+0x50>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800072e:	4b06      	ldr	r3, [pc, #24]	; (8000748 <MX_I2C1_Init+0x50>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000734:	4804      	ldr	r0, [pc, #16]	; (8000748 <MX_I2C1_Init+0x50>)
 8000736:	f001 fa2b 	bl	8001b90 <HAL_I2C_Init>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000740:	f000 fb32 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	2000273c 	.word	0x2000273c
 800074c:	40005400 	.word	0x40005400
 8000750:	000186a0 	.word	0x000186a0

08000754 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b096      	sub	sp, #88	; 0x58
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800075a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000768:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000772:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	611a      	str	r2, [r3, #16]
 8000782:	615a      	str	r2, [r3, #20]
 8000784:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	2220      	movs	r2, #32
 800078a:	2100      	movs	r1, #0
 800078c:	4618      	mov	r0, r3
 800078e:	f009 ff31 	bl	800a5f4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000792:	4b3c      	ldr	r3, [pc, #240]	; (8000884 <MX_TIM1_Init+0x130>)
 8000794:	4a3c      	ldr	r2, [pc, #240]	; (8000888 <MX_TIM1_Init+0x134>)
 8000796:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72;
 8000798:	4b3a      	ldr	r3, [pc, #232]	; (8000884 <MX_TIM1_Init+0x130>)
 800079a:	2248      	movs	r2, #72	; 0x48
 800079c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800079e:	4b39      	ldr	r3, [pc, #228]	; (8000884 <MX_TIM1_Init+0x130>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 80007a4:	4b37      	ldr	r3, [pc, #220]	; (8000884 <MX_TIM1_Init+0x130>)
 80007a6:	2264      	movs	r2, #100	; 0x64
 80007a8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007aa:	4b36      	ldr	r3, [pc, #216]	; (8000884 <MX_TIM1_Init+0x130>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007b0:	4b34      	ldr	r3, [pc, #208]	; (8000884 <MX_TIM1_Init+0x130>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b6:	4b33      	ldr	r3, [pc, #204]	; (8000884 <MX_TIM1_Init+0x130>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007bc:	4831      	ldr	r0, [pc, #196]	; (8000884 <MX_TIM1_Init+0x130>)
 80007be:	f003 fd87 	bl	80042d0 <HAL_TIM_Base_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80007c8:	f000 faee 	bl	8000da8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007d6:	4619      	mov	r1, r3
 80007d8:	482a      	ldr	r0, [pc, #168]	; (8000884 <MX_TIM1_Init+0x130>)
 80007da:	f004 f841 	bl	8004860 <HAL_TIM_ConfigClockSource>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80007e4:	f000 fae0 	bl	8000da8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007e8:	4826      	ldr	r0, [pc, #152]	; (8000884 <MX_TIM1_Init+0x130>)
 80007ea:	f003 fdbf 	bl	800436c <HAL_TIM_PWM_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80007f4:	f000 fad8 	bl	8000da8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007f8:	2300      	movs	r3, #0
 80007fa:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007fc:	2300      	movs	r3, #0
 80007fe:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000800:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000804:	4619      	mov	r1, r3
 8000806:	481f      	ldr	r0, [pc, #124]	; (8000884 <MX_TIM1_Init+0x130>)
 8000808:	f004 fbb2 	bl	8004f70 <HAL_TIMEx_MasterConfigSynchronization>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000812:	f000 fac9 	bl	8000da8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000816:	2360      	movs	r3, #96	; 0x60
 8000818:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 95;
 800081a:	235f      	movs	r3, #95	; 0x5f
 800081c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800081e:	2300      	movs	r3, #0
 8000820:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000822:	2300      	movs	r3, #0
 8000824:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000826:	2300      	movs	r3, #0
 8000828:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800082a:	2300      	movs	r3, #0
 800082c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800082e:	2300      	movs	r3, #0
 8000830:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000832:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000836:	2200      	movs	r2, #0
 8000838:	4619      	mov	r1, r3
 800083a:	4812      	ldr	r0, [pc, #72]	; (8000884 <MX_TIM1_Init+0x130>)
 800083c:	f003 ff4a 	bl	80046d4 <HAL_TIM_PWM_ConfigChannel>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000846:	f000 faaf 	bl	8000da8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800084e:	2300      	movs	r3, #0
 8000850:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000852:	2300      	movs	r3, #0
 8000854:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800085a:	2300      	movs	r3, #0
 800085c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800085e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000862:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000864:	2300      	movs	r3, #0
 8000866:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	4619      	mov	r1, r3
 800086c:	4805      	ldr	r0, [pc, #20]	; (8000884 <MX_TIM1_Init+0x130>)
 800086e:	f004 fbc3 	bl	8004ff8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000878:	f000 fa96 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800087c:	bf00      	nop
 800087e:	3758      	adds	r7, #88	; 0x58
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	200027d0 	.word	0x200027d0
 8000888:	40012c00 	.word	0x40012c00

0800088c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000890:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <MX_USART1_UART_Init+0x4c>)
 8000892:	4a12      	ldr	r2, [pc, #72]	; (80008dc <MX_USART1_UART_Init+0x50>)
 8000894:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000896:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <MX_USART1_UART_Init+0x4c>)
 8000898:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800089c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <MX_USART1_UART_Init+0x4c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008a4:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <MX_USART1_UART_Init+0x4c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008aa:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <MX_USART1_UART_Init+0x4c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008b0:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <MX_USART1_UART_Init+0x4c>)
 80008b2:	220c      	movs	r2, #12
 80008b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b6:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <MX_USART1_UART_Init+0x4c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <MX_USART1_UART_Init+0x4c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008c2:	4805      	ldr	r0, [pc, #20]	; (80008d8 <MX_USART1_UART_Init+0x4c>)
 80008c4:	f004 fbfb 	bl	80050be <HAL_UART_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008ce:	f000 fa6b 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20002790 	.word	0x20002790
 80008dc:	40013800 	.word	0x40013800

080008e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008e4:	4b11      	ldr	r3, [pc, #68]	; (800092c <MX_USART2_UART_Init+0x4c>)
 80008e6:	4a12      	ldr	r2, [pc, #72]	; (8000930 <MX_USART2_UART_Init+0x50>)
 80008e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ea:	4b10      	ldr	r3, [pc, #64]	; (800092c <MX_USART2_UART_Init+0x4c>)
 80008ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008f2:	4b0e      	ldr	r3, [pc, #56]	; (800092c <MX_USART2_UART_Init+0x4c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <MX_USART2_UART_Init+0x4c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008fe:	4b0b      	ldr	r3, [pc, #44]	; (800092c <MX_USART2_UART_Init+0x4c>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000904:	4b09      	ldr	r3, [pc, #36]	; (800092c <MX_USART2_UART_Init+0x4c>)
 8000906:	220c      	movs	r2, #12
 8000908:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090a:	4b08      	ldr	r3, [pc, #32]	; (800092c <MX_USART2_UART_Init+0x4c>)
 800090c:	2200      	movs	r2, #0
 800090e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <MX_USART2_UART_Init+0x4c>)
 8000912:	2200      	movs	r2, #0
 8000914:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000916:	4805      	ldr	r0, [pc, #20]	; (800092c <MX_USART2_UART_Init+0x4c>)
 8000918:	f004 fbd1 	bl	80050be <HAL_UART_Init>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000922:	f000 fa41 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20002810 	.word	0x20002810
 8000930:	40004400 	.word	0x40004400

08000934 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000938:	4b0d      	ldr	r3, [pc, #52]	; (8000970 <MX_USB_PCD_Init+0x3c>)
 800093a:	4a0e      	ldr	r2, [pc, #56]	; (8000974 <MX_USB_PCD_Init+0x40>)
 800093c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800093e:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <MX_USB_PCD_Init+0x3c>)
 8000940:	2208      	movs	r2, #8
 8000942:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000944:	4b0a      	ldr	r3, [pc, #40]	; (8000970 <MX_USB_PCD_Init+0x3c>)
 8000946:	2202      	movs	r2, #2
 8000948:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800094a:	4b09      	ldr	r3, [pc, #36]	; (8000970 <MX_USB_PCD_Init+0x3c>)
 800094c:	2200      	movs	r2, #0
 800094e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000950:	4b07      	ldr	r3, [pc, #28]	; (8000970 <MX_USB_PCD_Init+0x3c>)
 8000952:	2200      	movs	r2, #0
 8000954:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000956:	4b06      	ldr	r3, [pc, #24]	; (8000970 <MX_USB_PCD_Init+0x3c>)
 8000958:	2200      	movs	r2, #0
 800095a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800095c:	4804      	ldr	r0, [pc, #16]	; (8000970 <MX_USB_PCD_Init+0x3c>)
 800095e:	f002 ff04 	bl	800376a <HAL_PCD_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000968:	f000 fa1e 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20002850 	.word	0x20002850
 8000974:	40005c00 	.word	0x40005c00

08000978 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b088      	sub	sp, #32
 800097c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097e:	f107 0310 	add.w	r3, r7, #16
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
 800098a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800098c:	4b3f      	ldr	r3, [pc, #252]	; (8000a8c <MX_GPIO_Init+0x114>)
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	4a3e      	ldr	r2, [pc, #248]	; (8000a8c <MX_GPIO_Init+0x114>)
 8000992:	f043 0310 	orr.w	r3, r3, #16
 8000996:	6193      	str	r3, [r2, #24]
 8000998:	4b3c      	ldr	r3, [pc, #240]	; (8000a8c <MX_GPIO_Init+0x114>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	f003 0310 	and.w	r3, r3, #16
 80009a0:	60fb      	str	r3, [r7, #12]
 80009a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009a4:	4b39      	ldr	r3, [pc, #228]	; (8000a8c <MX_GPIO_Init+0x114>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	4a38      	ldr	r2, [pc, #224]	; (8000a8c <MX_GPIO_Init+0x114>)
 80009aa:	f043 0320 	orr.w	r3, r3, #32
 80009ae:	6193      	str	r3, [r2, #24]
 80009b0:	4b36      	ldr	r3, [pc, #216]	; (8000a8c <MX_GPIO_Init+0x114>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	f003 0320 	and.w	r3, r3, #32
 80009b8:	60bb      	str	r3, [r7, #8]
 80009ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009bc:	4b33      	ldr	r3, [pc, #204]	; (8000a8c <MX_GPIO_Init+0x114>)
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	4a32      	ldr	r2, [pc, #200]	; (8000a8c <MX_GPIO_Init+0x114>)
 80009c2:	f043 0304 	orr.w	r3, r3, #4
 80009c6:	6193      	str	r3, [r2, #24]
 80009c8:	4b30      	ldr	r3, [pc, #192]	; (8000a8c <MX_GPIO_Init+0x114>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	f003 0304 	and.w	r3, r3, #4
 80009d0:	607b      	str	r3, [r7, #4]
 80009d2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d4:	4b2d      	ldr	r3, [pc, #180]	; (8000a8c <MX_GPIO_Init+0x114>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	4a2c      	ldr	r2, [pc, #176]	; (8000a8c <MX_GPIO_Init+0x114>)
 80009da:	f043 0308 	orr.w	r3, r3, #8
 80009de:	6193      	str	r3, [r2, #24]
 80009e0:	4b2a      	ldr	r3, [pc, #168]	; (8000a8c <MX_GPIO_Init+0x114>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	f003 0308 	and.w	r3, r3, #8
 80009e8:	603b      	str	r3, [r7, #0]
 80009ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80009ec:	2200      	movs	r2, #0
 80009ee:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80009f2:	4827      	ldr	r0, [pc, #156]	; (8000a90 <MX_GPIO_Init+0x118>)
 80009f4:	f001 f8b4 	bl	8001b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_15, GPIO_PIN_RESET);
 80009f8:	2200      	movs	r2, #0
 80009fa:	f248 1103 	movw	r1, #33027	; 0x8103
 80009fe:	4825      	ldr	r0, [pc, #148]	; (8000a94 <MX_GPIO_Init+0x11c>)
 8000a00:	f001 f8ae 	bl	8001b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8000a04:	2201      	movs	r2, #1
 8000a06:	f64f 713f 	movw	r1, #65343	; 0xff3f
 8000a0a:	4823      	ldr	r0, [pc, #140]	; (8000a98 <MX_GPIO_Init+0x120>)
 8000a0c:	f001 f8a8 	bl	8001b60 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_SET);

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000a10:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000a14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000a16:	2311      	movs	r3, #17
 8000a18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a22:	f107 0310 	add.w	r3, r7, #16
 8000a26:	4619      	mov	r1, r3
 8000a28:	4819      	ldr	r0, [pc, #100]	; (8000a90 <MX_GPIO_Init+0x118>)
 8000a2a:	f000 ff3f 	bl	80018ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_15;
 8000a2e:	f248 1303 	movw	r3, #33027	; 0x8103
 8000a32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a34:	2301      	movs	r3, #1
 8000a36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a40:	f107 0310 	add.w	r3, r7, #16
 8000a44:	4619      	mov	r1, r3
 8000a46:	4813      	ldr	r0, [pc, #76]	; (8000a94 <MX_GPIO_Init+0x11c>)
 8000a48:	f000 ff30 	bl	80018ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a4c:	23f0      	movs	r3, #240	; 0xf0
 8000a4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a50:	2300      	movs	r3, #0
 8000a52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a58:	f107 0310 	add.w	r3, r7, #16
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	480d      	ldr	r0, [pc, #52]	; (8000a94 <MX_GPIO_Init+0x11c>)
 8000a60:	f000 ff24 	bl	80018ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB12 PB13 PB14 
                           PB15 PB3 PB4 PB5 
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8000a64:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8000a68:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000a6a:	2311      	movs	r3, #17
 8000a6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	2302      	movs	r3, #2
 8000a74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a76:	f107 0310 	add.w	r3, r7, #16
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4806      	ldr	r0, [pc, #24]	; (8000a98 <MX_GPIO_Init+0x120>)
 8000a7e:	f000 ff15 	bl	80018ac <HAL_GPIO_Init>

}
 8000a82:	bf00      	nop
 8000a84:	3720      	adds	r7, #32
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40021000 	.word	0x40021000
 8000a90:	40011000 	.word	0x40011000
 8000a94:	40010800 	.word	0x40010800
 8000a98:	40010c00 	.word	0x40010c00

08000a9c <tud_mount_cb>:

/* USER CODE BEGIN 4 */
// Invoked when device is mounted
void tud_mount_cb(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  blink_interval_ms = BLINK_MOUNTED;
 8000aa0:	4b03      	ldr	r3, [pc, #12]	; (8000ab0 <tud_mount_cb+0x14>)
 8000aa2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000aa6:	601a      	str	r2, [r3, #0]
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bc80      	pop	{r7}
 8000aae:	4770      	bx	lr
 8000ab0:	200000c4 	.word	0x200000c4

08000ab4 <tud_umount_cb>:

// Invoked when device is unmounted
void tud_umount_cb(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  blink_interval_ms = BLINK_NOT_MOUNTED;
 8000ab8:	4b03      	ldr	r3, [pc, #12]	; (8000ac8 <tud_umount_cb+0x14>)
 8000aba:	22fa      	movs	r2, #250	; 0xfa
 8000abc:	601a      	str	r2, [r3, #0]
}
 8000abe:	bf00      	nop
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bc80      	pop	{r7}
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	200000c4 	.word	0x200000c4

08000acc <tud_suspend_cb>:

// Invoked when usb bus is suspended
// remote_wakeup_en : if host allow us  to perform remote wakeup
// Within 7ms, device must draw an average of current less than 2.5 mA from bus
void tud_suspend_cb(bool remote_wakeup_en)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	71fb      	strb	r3, [r7, #7]
  (void) remote_wakeup_en;
  blink_interval_ms = BLINK_SUSPENDED;
 8000ad6:	4b04      	ldr	r3, [pc, #16]	; (8000ae8 <tud_suspend_cb+0x1c>)
 8000ad8:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000adc:	601a      	str	r2, [r3, #0]
}
 8000ade:	bf00      	nop
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr
 8000ae8:	200000c4 	.word	0x200000c4

08000aec <tud_resume_cb>:

// Invoked when usb bus is resumed
void tud_resume_cb(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  blink_interval_ms = BLINK_MOUNTED;
 8000af0:	4b03      	ldr	r3, [pc, #12]	; (8000b00 <tud_resume_cb+0x14>)
 8000af2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000af6:	601a      	str	r2, [r3, #0]
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc80      	pop	{r7}
 8000afe:	4770      	bx	lr
 8000b00:	200000c4 	.word	0x200000c4

08000b04 <cdc_task>:
// USB CDC
//--------------------------------------------------------------------+
#if CFG_TUD_CDC

void cdc_task(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b092      	sub	sp, #72	; 0x48
 8000b08:	af00      	add	r7, sp, #0
  if ( tud_cdc_connected() )
 8000b0a:	f7ff fcf2 	bl	80004f2 <tud_cdc_connected>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d026      	beq.n	8000b62 <cdc_task+0x5e>
  {
    // connected and there are data available
    if ( tud_cdc_available() )
 8000b14:	f7ff fcf5 	bl	8000502 <tud_cdc_available>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d021      	beq.n	8000b62 <cdc_task+0x5e>
    {
      uint8_t buf[64];

      // read and echo back
      uint32_t count = tud_cdc_read(buf, sizeof(buf));
 8000b1e:	463b      	mov	r3, r7
 8000b20:	2140      	movs	r1, #64	; 0x40
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff fcf5 	bl	8000512 <tud_cdc_read>
 8000b28:	6438      	str	r0, [r7, #64]	; 0x40

      for(uint32_t i=0; i<count; i++)
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	647b      	str	r3, [r7, #68]	; 0x44
 8000b2e:	e012      	b.n	8000b56 <cdc_task+0x52>
      {
        tud_cdc_write_char(buf[i]);
 8000b30:	463a      	mov	r2, r7
 8000b32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b34:	4413      	add	r3, r2
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff fcf9 	bl	8000530 <tud_cdc_write_char>

        if ( buf[i] == '\r' ) tud_cdc_write_char('\n');
 8000b3e:	463a      	mov	r2, r7
 8000b40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b42:	4413      	add	r3, r2
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	2b0d      	cmp	r3, #13
 8000b48:	d102      	bne.n	8000b50 <cdc_task+0x4c>
 8000b4a:	200a      	movs	r0, #10
 8000b4c:	f7ff fcf0 	bl	8000530 <tud_cdc_write_char>
      for(uint32_t i=0; i<count; i++)
 8000b50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b52:	3301      	adds	r3, #1
 8000b54:	647b      	str	r3, [r7, #68]	; 0x44
 8000b56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000b58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b5a:	429a      	cmp	r2, r3
 8000b5c:	d3e8      	bcc.n	8000b30 <cdc_task+0x2c>
      }

      tud_cdc_write_flush();
 8000b5e:	f7ff fd03 	bl	8000568 <tud_cdc_write_flush>
    }
  }
}
 8000b62:	bf00      	nop
 8000b64:	3748      	adds	r7, #72	; 0x48
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
	...

08000b6c <tud_cdc_line_state_cb>:

// Invoked when cdc when line state changed e.g connected/disconnected
void tud_cdc_line_state_cb(uint8_t itf, bool dtr, bool rts)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	71fb      	strb	r3, [r7, #7]
 8000b76:	460b      	mov	r3, r1
 8000b78:	71bb      	strb	r3, [r7, #6]
 8000b7a:	4613      	mov	r3, r2
 8000b7c:	717b      	strb	r3, [r7, #5]
  (void) itf;

  // connected
  if ( dtr && rts )
 8000b7e:	79bb      	ldrb	r3, [r7, #6]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d005      	beq.n	8000b90 <tud_cdc_line_state_cb+0x24>
 8000b84:	797b      	ldrb	r3, [r7, #5]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d002      	beq.n	8000b90 <tud_cdc_line_state_cb+0x24>
  {
    // print initial message when connected
    tud_cdc_write_str("\r\nTinyUSB CDC MSC device example\r\n");
 8000b8a:	4803      	ldr	r0, [pc, #12]	; (8000b98 <tud_cdc_line_state_cb+0x2c>)
 8000b8c:	f7ff fcdf 	bl	800054e <tud_cdc_write_str>
  }
}
 8000b90:	bf00      	nop
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	0800a61c 	.word	0x0800a61c

08000b9c <tud_cdc_rx_cb>:

// Invoked when CDC interface received data from host
void tud_cdc_rx_cb(uint8_t itf)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]
  (void) itf;
}
 8000ba6:	bf00      	nop
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc80      	pop	{r7}
 8000bae:	4770      	bx	lr

08000bb0 <hid_task>:
// USB HID
//--------------------------------------------------------------------+
#if CFG_TUD_HID

void hid_task(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af02      	add	r7, sp, #8
  // Poll every 10ms
  const uint32_t interval_ms = 2000;
 8000bb6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000bba:	60fb      	str	r3, [r7, #12]
  static uint32_t start_ms = 0;

  if ( board_millis() - start_ms < interval_ms) return; // not enough time
 8000bbc:	f000 f8c4 	bl	8000d48 <board_millis>
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	4b2c      	ldr	r3, [pc, #176]	; (8000c74 <hid_task+0xc4>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	1ad3      	subs	r3, r2, r3
 8000bc8:	68fa      	ldr	r2, [r7, #12]
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	d84d      	bhi.n	8000c6a <hid_task+0xba>
  start_ms += interval_ms;
 8000bce:	4b29      	ldr	r3, [pc, #164]	; (8000c74 <hid_task+0xc4>)
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	4a27      	ldr	r2, [pc, #156]	; (8000c74 <hid_task+0xc4>)
 8000bd8:	6013      	str	r3, [r2, #0]

  uint32_t const btn = 0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60bb      	str	r3, [r7, #8]

  // Remote wakeup
  if ( tud_suspended() && btn )
 8000bde:	f007 f963 	bl	8007ea8 <tud_suspended>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d004      	beq.n	8000bf2 <hid_task+0x42>
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <hid_task+0x42>
  {
    // Wake up host if we are in suspend mode
    // and REMOTE_WAKEUP feature is enabled by host
    tud_remote_wakeup();
 8000bee:	f007 f96d 	bl	8007ecc <tud_remote_wakeup>
  }

  /*------------- Mouse -------------*/
  if ( tud_hid_ready() )
 8000bf2:	f005 f8e1 	bl	8005db8 <tud_hid_ready>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d011      	beq.n	8000c20 <hid_task+0x70>
  {
    if ( btn )
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d00e      	beq.n	8000c20 <hid_task+0x70>
    {
      int8_t const delta = 5;
 8000c02:	2305      	movs	r3, #5
 8000c04:	71fb      	strb	r3, [r7, #7]

      // no button, right + down, no scroll pan
      tud_hid_mouse_report(REPORT_ID_MOUSE, 0x00, delta, delta, 0, 0);
 8000c06:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8000c0a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000c0e:	2300      	movs	r3, #0
 8000c10:	9301      	str	r3, [sp, #4]
 8000c12:	2300      	movs	r3, #0
 8000c14:	9300      	str	r3, [sp, #0]
 8000c16:	460b      	mov	r3, r1
 8000c18:	2100      	movs	r1, #0
 8000c1a:	2002      	movs	r0, #2
 8000c1c:	f005 f973 	bl	8005f06 <tud_hid_mouse_report>
      //board_delay(10);
    }
  }

  /*------------- Keyboard -------------*/
  if ( tud_hid_ready() )
 8000c20:	f005 f8ca 	bl	8005db8 <tud_hid_ready>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d020      	beq.n	8000c6c <hid_task+0xbc>
  {
    // use to avoid send multiple consecutive zero report for keyboard
    static bool has_key = false;

    if ( !btn )
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d10f      	bne.n	8000c50 <hid_task+0xa0>
    {
      uint8_t keycode[6] = { 0 };
 8000c30:	463b      	mov	r3, r7
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	809a      	strh	r2, [r3, #4]
      keycode[0] = HID_KEY_A;
 8000c38:	2304      	movs	r3, #4
 8000c3a:	703b      	strb	r3, [r7, #0]

      tud_hid_keyboard_report(REPORT_ID_KEYBOARD, 0, keycode);
 8000c3c:	463b      	mov	r3, r7
 8000c3e:	461a      	mov	r2, r3
 8000c40:	2100      	movs	r1, #0
 8000c42:	2001      	movs	r0, #1
 8000c44:	f005 f936 	bl	8005eb4 <tud_hid_keyboard_report>

      has_key = true;
 8000c48:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <hid_task+0xc8>)
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	701a      	strb	r2, [r3, #0]
 8000c4e:	e00d      	b.n	8000c6c <hid_task+0xbc>
    }else
    {
      // send empty key report if previously has key pressed
      if (has_key) tud_hid_keyboard_report(REPORT_ID_KEYBOARD, 0, NULL);
 8000c50:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <hid_task+0xc8>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d004      	beq.n	8000c62 <hid_task+0xb2>
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	2001      	movs	r0, #1
 8000c5e:	f005 f929 	bl	8005eb4 <tud_hid_keyboard_report>
      has_key = false;
 8000c62:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <hid_task+0xc8>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	701a      	strb	r2, [r3, #0]
 8000c68:	e000      	b.n	8000c6c <hid_task+0xbc>
  if ( board_millis() - start_ms < interval_ms) return; // not enough time
 8000c6a:	bf00      	nop
    }
  }
}
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20002180 	.word	0x20002180
 8000c78:	20002184 	.word	0x20002184

08000c7c <tud_hid_get_report_cb>:

// Invoked when received GET_REPORT control request
// Application must fill buffer report's content and return its length.
// Return zero will cause the stack to STALL request
uint16_t tud_hid_get_report_cb(uint8_t report_id, hid_report_type_t report_type, uint8_t* buffer, uint16_t reqlen)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	603a      	str	r2, [r7, #0]
 8000c84:	461a      	mov	r2, r3
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	71bb      	strb	r3, [r7, #6]
 8000c8e:	4613      	mov	r3, r2
 8000c90:	80bb      	strh	r3, [r7, #4]
  (void) report_id;
  (void) report_type;
  (void) buffer;
  (void) reqlen;

  return 0;
 8000c92:	2300      	movs	r3, #0
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bc80      	pop	{r7}
 8000c9c:	4770      	bx	lr

08000c9e <tud_hid_set_report_cb>:

// Invoked when received SET_REPORT control request or
// received data on OUT endpoint ( Report ID = 0, Type = 0 )
void tud_hid_set_report_cb(uint8_t report_id, hid_report_type_t report_type, uint8_t const* buffer, uint16_t bufsize)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	b083      	sub	sp, #12
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	603a      	str	r2, [r7, #0]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	4603      	mov	r3, r0
 8000caa:	71fb      	strb	r3, [r7, #7]
 8000cac:	460b      	mov	r3, r1
 8000cae:	71bb      	strb	r3, [r7, #6]
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	80bb      	strh	r3, [r7, #4]
  // TODO set LED based on CAPLOCK, NUMLOCK etc...
  (void) report_id;
  (void) report_type;
  (void) buffer;
  (void) bufsize;
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bc80      	pop	{r7}
 8000cbc:	4770      	bx	lr
	...

08000cc0 <midi_task>:
                74,69,66,62,57,62,66,69,74,78,81,86,90,93,97,102,97,93,90,85,81,78,73,68,64,61,
                56,61,64,68,74,78,81,86,90,93,98,102
        };

void midi_task(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
    static uint32_t start_ms = 0;

    // send note every 286 ms
    if (board_millis() - start_ms < 286) { return; } // not enough time
 8000cc6:	f000 f83f 	bl	8000d48 <board_millis>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	4b1b      	ldr	r3, [pc, #108]	; (8000d3c <midi_task+0x7c>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	f5b3 7f8f 	cmp.w	r3, #286	; 0x11e
 8000cd6:	d32d      	bcc.n	8000d34 <midi_task+0x74>
    start_ms += 286;
 8000cd8:	4b18      	ldr	r3, [pc, #96]	; (8000d3c <midi_task+0x7c>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8000ce0:	4a16      	ldr	r2, [pc, #88]	; (8000d3c <midi_task+0x7c>)
 8000ce2:	6013      	str	r3, [r2, #0]

    // Previous positions in the note sequence.
    int previous = note_pos - 1;
 8000ce4:	4b16      	ldr	r3, [pc, #88]	; (8000d40 <midi_task+0x80>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	607b      	str	r3, [r7, #4]

    // If we currently are at position 0, set the
    // previous position to the last note in the sequence.
    if (previous < 0) previous = sizeof(note_sequence) - 1;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	da01      	bge.n	8000cf6 <midi_task+0x36>
 8000cf2:	233f      	movs	r3, #63	; 0x3f
 8000cf4:	607b      	str	r3, [r7, #4]

    // Send Note On for current position at full velocity (127) on channel 1.
    tudi_midi_write24(0, 0x90, note_sequence[note_pos], 127);
 8000cf6:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <midi_task+0x80>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a12      	ldr	r2, [pc, #72]	; (8000d44 <midi_task+0x84>)
 8000cfc:	5cd2      	ldrb	r2, [r2, r3]
 8000cfe:	237f      	movs	r3, #127	; 0x7f
 8000d00:	2190      	movs	r1, #144	; 0x90
 8000d02:	2000      	movs	r0, #0
 8000d04:	f7ff fc4a 	bl	800059c <tudi_midi_write24>

    // Send Note Off for previous note.
    tudi_midi_write24(0, 0x80, note_sequence[previous], 0);
 8000d08:	4a0e      	ldr	r2, [pc, #56]	; (8000d44 <midi_task+0x84>)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	781a      	ldrb	r2, [r3, #0]
 8000d10:	2300      	movs	r3, #0
 8000d12:	2180      	movs	r1, #128	; 0x80
 8000d14:	2000      	movs	r0, #0
 8000d16:	f7ff fc41 	bl	800059c <tudi_midi_write24>

    // Increment position
    note_pos++;
 8000d1a:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <midi_task+0x80>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	4a07      	ldr	r2, [pc, #28]	; (8000d40 <midi_task+0x80>)
 8000d22:	6013      	str	r3, [r2, #0]

    // If we are at the end of the sequence, start over.
    if (note_pos >= sizeof(note_sequence)) note_pos = 0;
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <midi_task+0x80>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2b3f      	cmp	r3, #63	; 0x3f
 8000d2a:	d904      	bls.n	8000d36 <midi_task+0x76>
 8000d2c:	4b04      	ldr	r3, [pc, #16]	; (8000d40 <midi_task+0x80>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	e000      	b.n	8000d36 <midi_task+0x76>
    if (board_millis() - start_ms < 286) { return; } // not enough time
 8000d34:	bf00      	nop
}
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20002188 	.word	0x20002188
 8000d40:	2000217c 	.word	0x2000217c
 8000d44:	200000c8 	.word	0x200000c8

08000d48 <board_millis>:
#endif

uint32_t board_millis(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000d4c:	f000 fc14 	bl	8001578 <HAL_GetTick>
 8000d50:	4603      	mov	r3, r0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	bd80      	pop	{r7, pc}
	...

08000d58 <led_blinking_task>:

//--------------------------------------------------------------------+
// BLINKING TASK
//--------------------------------------------------------------------+
void led_blinking_task(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  static uint32_t start_ms = 0;
  static bool led_state = false;

  // Blink every interval ms
  if ( board_millis() - start_ms < blink_interval_ms) return; // not enough time
 8000d5c:	f7ff fff4 	bl	8000d48 <board_millis>
 8000d60:	4602      	mov	r2, r0
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <led_blinking_task+0x44>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	1ad2      	subs	r2, r2, r3
 8000d68:	4b0d      	ldr	r3, [pc, #52]	; (8000da0 <led_blinking_task+0x48>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d312      	bcc.n	8000d96 <led_blinking_task+0x3e>
  start_ms += blink_interval_ms;
 8000d70:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <led_blinking_task+0x44>)
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	4b0a      	ldr	r3, [pc, #40]	; (8000da0 <led_blinking_task+0x48>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4413      	add	r3, r2
 8000d7a:	4a08      	ldr	r2, [pc, #32]	; (8000d9c <led_blinking_task+0x44>)
 8000d7c:	6013      	str	r3, [r2, #0]

  //board_led_write(led_state);
  led_state = 1 - led_state; // toggle
 8000d7e:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <led_blinking_task+0x4c>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	f1c3 0301 	rsb	r3, r3, #1
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	bf14      	ite	ne
 8000d8a:	2301      	movne	r3, #1
 8000d8c:	2300      	moveq	r3, #0
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <led_blinking_task+0x4c>)
 8000d92:	701a      	strb	r2, [r3, #0]
 8000d94:	e000      	b.n	8000d98 <led_blinking_task+0x40>
  if ( board_millis() - start_ms < blink_interval_ms) return; // not enough time
 8000d96:	bf00      	nop
}
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	2000218c 	.word	0x2000218c
 8000da0:	200000c4 	.word	0x200000c4
 8000da4:	20002190 	.word	0x20002190

08000da8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr

08000db4 <tud_msc_inquiry_cb>:
};

// Invoked when received SCSI_CMD_INQUIRY
// Application fill vendor id, product id and revision with string up to 8, 16, 4 characters respectively
void tud_msc_inquiry_cb(uint8_t lun, uint8_t vendor_id[8], uint8_t product_id[16], uint8_t product_rev[4])
{
 8000db4:	b590      	push	{r4, r7, lr}
 8000db6:	b08d      	sub	sp, #52	; 0x34
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60b9      	str	r1, [r7, #8]
 8000dbc:	607a      	str	r2, [r7, #4]
 8000dbe:	603b      	str	r3, [r7, #0]
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	73fb      	strb	r3, [r7, #15]
  (void) lun;

  const char vid[] = "TinyUSB";
 8000dc4:	4a1b      	ldr	r2, [pc, #108]	; (8000e34 <tud_msc_inquiry_cb+0x80>)
 8000dc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000dce:	e883 0003 	stmia.w	r3, {r0, r1}
  const char pid[] = "Mass Storage";
 8000dd2:	4b19      	ldr	r3, [pc, #100]	; (8000e38 <tud_msc_inquiry_cb+0x84>)
 8000dd4:	f107 0418 	add.w	r4, r7, #24
 8000dd8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000dda:	c407      	stmia	r4!, {r0, r1, r2}
 8000ddc:	7023      	strb	r3, [r4, #0]
  const char rev[] = "1.0";
 8000dde:	4b17      	ldr	r3, [pc, #92]	; (8000e3c <tud_msc_inquiry_cb+0x88>)
 8000de0:	617b      	str	r3, [r7, #20]

  memcpy(vendor_id  , vid, strlen(vid));
 8000de2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff f9b0 	bl	800014c <strlen>
 8000dec:	4602      	mov	r2, r0
 8000dee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000df2:	4619      	mov	r1, r3
 8000df4:	68b8      	ldr	r0, [r7, #8]
 8000df6:	f009 fbd9 	bl	800a5ac <memcpy>
  memcpy(product_id , pid, strlen(pid));
 8000dfa:	f107 0318 	add.w	r3, r7, #24
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff f9a4 	bl	800014c <strlen>
 8000e04:	4602      	mov	r2, r0
 8000e06:	f107 0318 	add.w	r3, r7, #24
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f009 fbcd 	bl	800a5ac <memcpy>
  memcpy(product_rev, rev, strlen(rev));
 8000e12:	f107 0314 	add.w	r3, r7, #20
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff f998 	bl	800014c <strlen>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	f107 0314 	add.w	r3, r7, #20
 8000e22:	4619      	mov	r1, r3
 8000e24:	6838      	ldr	r0, [r7, #0]
 8000e26:	f009 fbc1 	bl	800a5ac <memcpy>
}
 8000e2a:	bf00      	nop
 8000e2c:	3734      	adds	r7, #52	; 0x34
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd90      	pop	{r4, r7, pc}
 8000e32:	bf00      	nop
 8000e34:	0800a640 	.word	0x0800a640
 8000e38:	0800a648 	.word	0x0800a648
 8000e3c:	00302e31 	.word	0x00302e31

08000e40 <tud_msc_test_unit_ready_cb>:

// Invoked when received Test Unit Ready command.
// return true allowing host to read/write this LUN e.g SD card inserted
bool tud_msc_test_unit_ready_cb(uint8_t lun)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	71fb      	strb	r3, [r7, #7]
  (void) lun;

  return true; // RAM disk is always ready
 8000e4a:	2301      	movs	r3, #1
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bc80      	pop	{r7}
 8000e54:	4770      	bx	lr

08000e56 <tud_msc_capacity_cb>:

// Invoked when received SCSI_CMD_READ_CAPACITY_10 and SCSI_CMD_READ_FORMAT_CAPACITY to determine the disk size
// Application update block count and block size
void tud_msc_capacity_cb(uint8_t lun, uint32_t* block_count, uint16_t* block_size)
{
 8000e56:	b480      	push	{r7}
 8000e58:	b085      	sub	sp, #20
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	60b9      	str	r1, [r7, #8]
 8000e60:	607a      	str	r2, [r7, #4]
 8000e62:	73fb      	strb	r3, [r7, #15]
  (void) lun;

  *block_count = DISK_BLOCK_NUM;
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	2210      	movs	r2, #16
 8000e68:	601a      	str	r2, [r3, #0]
  *block_size  = DISK_BLOCK_SIZE;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e70:	801a      	strh	r2, [r3, #0]
}
 8000e72:	bf00      	nop
 8000e74:	3714      	adds	r7, #20
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bc80      	pop	{r7}
 8000e7a:	4770      	bx	lr

08000e7c <tud_msc_start_stop_cb>:

// Invoked when received Start Stop Unit command
// - Start = 0 : stopped power mode, if load_eject = 1 : unload disk storage
// - Start = 1 : active mode, if load_eject = 1 : load disk storage
bool tud_msc_start_stop_cb(uint8_t lun, uint8_t power_condition, bool start, bool load_eject)
{
 8000e7c:	b490      	push	{r4, r7}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4604      	mov	r4, r0
 8000e84:	4608      	mov	r0, r1
 8000e86:	4611      	mov	r1, r2
 8000e88:	461a      	mov	r2, r3
 8000e8a:	4623      	mov	r3, r4
 8000e8c:	71fb      	strb	r3, [r7, #7]
 8000e8e:	4603      	mov	r3, r0
 8000e90:	71bb      	strb	r3, [r7, #6]
 8000e92:	460b      	mov	r3, r1
 8000e94:	717b      	strb	r3, [r7, #5]
 8000e96:	4613      	mov	r3, r2
 8000e98:	713b      	strb	r3, [r7, #4]
    {
      // unload disk storage
    }
  }

  return true;
 8000e9a:	2301      	movs	r3, #1
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bc90      	pop	{r4, r7}
 8000ea4:	4770      	bx	lr
	...

08000ea8 <tud_msc_read10_cb>:

// Callback invoked when received READ10 command.
// Copy disk's data to buffer (up to bufsize) and return number of copied bytes.
int32_t tud_msc_read10_cb(uint8_t lun, uint32_t lba, uint32_t offset, void* buffer, uint32_t bufsize)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60b9      	str	r1, [r7, #8]
 8000eb0:	607a      	str	r2, [r7, #4]
 8000eb2:	603b      	str	r3, [r7, #0]
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	73fb      	strb	r3, [r7, #15]
  (void) lun;

  uint8_t const* addr = msc_disk[lba] + offset;
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	025b      	lsls	r3, r3, #9
 8000ebc:	4a07      	ldr	r2, [pc, #28]	; (8000edc <tud_msc_read10_cb+0x34>)
 8000ebe:	441a      	add	r2, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	617b      	str	r3, [r7, #20]
  memcpy(buffer, addr, bufsize);
 8000ec6:	6a3a      	ldr	r2, [r7, #32]
 8000ec8:	6979      	ldr	r1, [r7, #20]
 8000eca:	6838      	ldr	r0, [r7, #0]
 8000ecc:	f009 fb6e 	bl	800a5ac <memcpy>

  return bufsize;
 8000ed0:	6a3b      	ldr	r3, [r7, #32]
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3718      	adds	r7, #24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000108 	.word	0x20000108

08000ee0 <tud_msc_write10_cb>:

// Callback invoked when received WRITE10 command.
// Process data in buffer to disk's storage and return number of written bytes
int32_t tud_msc_write10_cb(uint8_t lun, uint32_t lba, uint32_t offset, uint8_t* buffer, uint32_t bufsize)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60b9      	str	r1, [r7, #8]
 8000ee8:	607a      	str	r2, [r7, #4]
 8000eea:	603b      	str	r3, [r7, #0]
 8000eec:	4603      	mov	r3, r0
 8000eee:	73fb      	strb	r3, [r7, #15]
  (void) lun;

#ifndef CFG_EXAMPLE_MSC_READONLY
  uint8_t* addr = msc_disk[lba] + offset;
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	025b      	lsls	r3, r3, #9
 8000ef4:	4a07      	ldr	r2, [pc, #28]	; (8000f14 <tud_msc_write10_cb+0x34>)
 8000ef6:	441a      	add	r2, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4413      	add	r3, r2
 8000efc:	617b      	str	r3, [r7, #20]
  memcpy(addr, buffer, bufsize);
 8000efe:	6a3a      	ldr	r2, [r7, #32]
 8000f00:	6839      	ldr	r1, [r7, #0]
 8000f02:	6978      	ldr	r0, [r7, #20]
 8000f04:	f009 fb52 	bl	800a5ac <memcpy>
#else
  (void) lba; (void) offset; (void) buffer;
#endif

  return bufsize;
 8000f08:	6a3b      	ldr	r3, [r7, #32]
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3718      	adds	r7, #24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20000108 	.word	0x20000108

08000f18 <tud_msc_scsi_cb>:

// Callback invoked when received an SCSI command not in built-in list below
// - READ_CAPACITY10, READ_FORMAT_CAPACITY, INQUIRY, MODE_SENSE6, REQUEST_SENSE
// - READ10 and WRITE10 has their own callbacks
int32_t tud_msc_scsi_cb (uint8_t lun, uint8_t const scsi_cmd[16], void* buffer, uint16_t bufsize)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b088      	sub	sp, #32
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60b9      	str	r1, [r7, #8]
 8000f20:	607a      	str	r2, [r7, #4]
 8000f22:	461a      	mov	r2, r3
 8000f24:	4603      	mov	r3, r0
 8000f26:	73fb      	strb	r3, [r7, #15]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	81bb      	strh	r3, [r7, #12]
  // read10 & write10 has their own callback and MUST not be handled here

  void const* response = NULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	61bb      	str	r3, [r7, #24]
  uint16_t resplen = 0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	83fb      	strh	r3, [r7, #30]

  // most scsi handled is input
  bool in_xfer = true;
 8000f34:	2301      	movs	r3, #1
 8000f36:	75fb      	strb	r3, [r7, #23]

  switch (scsi_cmd[0])
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b1e      	cmp	r3, #30
 8000f3e:	d102      	bne.n	8000f46 <tud_msc_scsi_cb+0x2e>
  {
    case SCSI_CMD_PREVENT_ALLOW_MEDIUM_REMOVAL:
      // Host is about to read/write etc ... better not to disconnect disk
      resplen = 0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	83fb      	strh	r3, [r7, #30]
    break;
 8000f44:	e009      	b.n	8000f5a <tud_msc_scsi_cb+0x42>

    default:
      // Set Sense = Invalid Command Operation
      tud_msc_set_sense(lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00);
 8000f46:	7bf8      	ldrb	r0, [r7, #15]
 8000f48:	2300      	movs	r3, #0
 8000f4a:	2220      	movs	r2, #32
 8000f4c:	2105      	movs	r1, #5
 8000f4e:	f005 fe95 	bl	8006c7c <tud_msc_set_sense>

      // negative means error -> tinyusb could stall and/or response with failed status
      resplen = -1;
 8000f52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f56:	83fb      	strh	r3, [r7, #30]
    break;
 8000f58:	bf00      	nop
  }

  // return resplen must not larger than bufsize
  if ( resplen > bufsize ) resplen = bufsize;
 8000f5a:	8bfa      	ldrh	r2, [r7, #30]
 8000f5c:	89bb      	ldrh	r3, [r7, #12]
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	d901      	bls.n	8000f66 <tud_msc_scsi_cb+0x4e>
 8000f62:	89bb      	ldrh	r3, [r7, #12]
 8000f64:	83fb      	strh	r3, [r7, #30]

  if ( response && (resplen > 0) )
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d00b      	beq.n	8000f84 <tud_msc_scsi_cb+0x6c>
 8000f6c:	8bfb      	ldrh	r3, [r7, #30]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d008      	beq.n	8000f84 <tud_msc_scsi_cb+0x6c>
  {
    if(in_xfer)
 8000f72:	7dfb      	ldrb	r3, [r7, #23]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d005      	beq.n	8000f84 <tud_msc_scsi_cb+0x6c>
    {
      memcpy(buffer, response, resplen);
 8000f78:	8bfb      	ldrh	r3, [r7, #30]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	69b9      	ldr	r1, [r7, #24]
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f009 fb14 	bl	800a5ac <memcpy>
    {
      // SCSI output
    }
  }

  return resplen;
 8000f84:	8bfb      	ldrh	r3, [r7, #30]
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3720      	adds	r7, #32
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f96:	4b15      	ldr	r3, [pc, #84]	; (8000fec <HAL_MspInit+0x5c>)
 8000f98:	699b      	ldr	r3, [r3, #24]
 8000f9a:	4a14      	ldr	r2, [pc, #80]	; (8000fec <HAL_MspInit+0x5c>)
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	6193      	str	r3, [r2, #24]
 8000fa2:	4b12      	ldr	r3, [pc, #72]	; (8000fec <HAL_MspInit+0x5c>)
 8000fa4:	699b      	ldr	r3, [r3, #24]
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	60bb      	str	r3, [r7, #8]
 8000fac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fae:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <HAL_MspInit+0x5c>)
 8000fb0:	69db      	ldr	r3, [r3, #28]
 8000fb2:	4a0e      	ldr	r2, [pc, #56]	; (8000fec <HAL_MspInit+0x5c>)
 8000fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb8:	61d3      	str	r3, [r2, #28]
 8000fba:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <HAL_MspInit+0x5c>)
 8000fbc:	69db      	ldr	r3, [r3, #28]
 8000fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fc6:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <HAL_MspInit+0x60>)
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	4a04      	ldr	r2, [pc, #16]	; (8000ff0 <HAL_MspInit+0x60>)
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	3714      	adds	r7, #20
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	40010000 	.word	0x40010000

08000ff4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b088      	sub	sp, #32
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 0310 	add.w	r3, r7, #16
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a1d      	ldr	r2, [pc, #116]	; (8001084 <HAL_I2C_MspInit+0x90>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d133      	bne.n	800107c <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001014:	4b1c      	ldr	r3, [pc, #112]	; (8001088 <HAL_I2C_MspInit+0x94>)
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	4a1b      	ldr	r2, [pc, #108]	; (8001088 <HAL_I2C_MspInit+0x94>)
 800101a:	f043 0308 	orr.w	r3, r3, #8
 800101e:	6193      	str	r3, [r2, #24]
 8001020:	4b19      	ldr	r3, [pc, #100]	; (8001088 <HAL_I2C_MspInit+0x94>)
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	f003 0308 	and.w	r3, r3, #8
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800102c:	23c0      	movs	r3, #192	; 0xc0
 800102e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001030:	2312      	movs	r3, #18
 8001032:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001034:	2303      	movs	r3, #3
 8001036:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001038:	f107 0310 	add.w	r3, r7, #16
 800103c:	4619      	mov	r1, r3
 800103e:	4813      	ldr	r0, [pc, #76]	; (800108c <HAL_I2C_MspInit+0x98>)
 8001040:	f000 fc34 	bl	80018ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001044:	4b10      	ldr	r3, [pc, #64]	; (8001088 <HAL_I2C_MspInit+0x94>)
 8001046:	69db      	ldr	r3, [r3, #28]
 8001048:	4a0f      	ldr	r2, [pc, #60]	; (8001088 <HAL_I2C_MspInit+0x94>)
 800104a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800104e:	61d3      	str	r3, [r2, #28]
 8001050:	4b0d      	ldr	r3, [pc, #52]	; (8001088 <HAL_I2C_MspInit+0x94>)
 8001052:	69db      	ldr	r3, [r3, #28]
 8001054:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800105c:	2200      	movs	r2, #0
 800105e:	2100      	movs	r1, #0
 8001060:	201f      	movs	r0, #31
 8001062:	f000 fb6a 	bl	800173a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001066:	201f      	movs	r0, #31
 8001068:	f000 fb83 	bl	8001772 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800106c:	2200      	movs	r2, #0
 800106e:	2100      	movs	r1, #0
 8001070:	2020      	movs	r0, #32
 8001072:	f000 fb62 	bl	800173a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001076:	2020      	movs	r0, #32
 8001078:	f000 fb7b 	bl	8001772 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800107c:	bf00      	nop
 800107e:	3720      	adds	r7, #32
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40005400 	.word	0x40005400
 8001088:	40021000 	.word	0x40021000
 800108c:	40010c00 	.word	0x40010c00

08001090 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a11      	ldr	r2, [pc, #68]	; (80010e4 <HAL_TIM_Base_MspInit+0x54>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d11b      	bne.n	80010da <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010a2:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <HAL_TIM_Base_MspInit+0x58>)
 80010a4:	699b      	ldr	r3, [r3, #24]
 80010a6:	4a10      	ldr	r2, [pc, #64]	; (80010e8 <HAL_TIM_Base_MspInit+0x58>)
 80010a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010ac:	6193      	str	r3, [r2, #24]
 80010ae:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <HAL_TIM_Base_MspInit+0x58>)
 80010b0:	699b      	ldr	r3, [r3, #24]
 80010b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2100      	movs	r1, #0
 80010be:	2019      	movs	r0, #25
 80010c0:	f000 fb3b 	bl	800173a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80010c4:	2019      	movs	r0, #25
 80010c6:	f000 fb54 	bl	8001772 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2100      	movs	r1, #0
 80010ce:	201b      	movs	r0, #27
 80010d0:	f000 fb33 	bl	800173a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80010d4:	201b      	movs	r0, #27
 80010d6:	f000 fb4c 	bl	8001772 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80010da:	bf00      	nop
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40012c00 	.word	0x40012c00
 80010e8:	40021000 	.word	0x40021000

080010ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08a      	sub	sp, #40	; 0x28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f4:	f107 0318 	add.w	r3, r7, #24
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a37      	ldr	r2, [pc, #220]	; (80011e4 <HAL_UART_MspInit+0xf8>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d132      	bne.n	8001172 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800110c:	4b36      	ldr	r3, [pc, #216]	; (80011e8 <HAL_UART_MspInit+0xfc>)
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	4a35      	ldr	r2, [pc, #212]	; (80011e8 <HAL_UART_MspInit+0xfc>)
 8001112:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001116:	6193      	str	r3, [r2, #24]
 8001118:	4b33      	ldr	r3, [pc, #204]	; (80011e8 <HAL_UART_MspInit+0xfc>)
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001120:	617b      	str	r3, [r7, #20]
 8001122:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001124:	4b30      	ldr	r3, [pc, #192]	; (80011e8 <HAL_UART_MspInit+0xfc>)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	4a2f      	ldr	r2, [pc, #188]	; (80011e8 <HAL_UART_MspInit+0xfc>)
 800112a:	f043 0304 	orr.w	r3, r3, #4
 800112e:	6193      	str	r3, [r2, #24]
 8001130:	4b2d      	ldr	r3, [pc, #180]	; (80011e8 <HAL_UART_MspInit+0xfc>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	f003 0304 	and.w	r3, r3, #4
 8001138:	613b      	str	r3, [r7, #16]
 800113a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800113c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001140:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001142:	2302      	movs	r3, #2
 8001144:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001146:	2303      	movs	r3, #3
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114a:	f107 0318 	add.w	r3, r7, #24
 800114e:	4619      	mov	r1, r3
 8001150:	4826      	ldr	r0, [pc, #152]	; (80011ec <HAL_UART_MspInit+0x100>)
 8001152:	f000 fbab 	bl	80018ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001156:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800115a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800115c:	2300      	movs	r3, #0
 800115e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001164:	f107 0318 	add.w	r3, r7, #24
 8001168:	4619      	mov	r1, r3
 800116a:	4820      	ldr	r0, [pc, #128]	; (80011ec <HAL_UART_MspInit+0x100>)
 800116c:	f000 fb9e 	bl	80018ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001170:	e034      	b.n	80011dc <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a1e      	ldr	r2, [pc, #120]	; (80011f0 <HAL_UART_MspInit+0x104>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d12f      	bne.n	80011dc <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800117c:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <HAL_UART_MspInit+0xfc>)
 800117e:	69db      	ldr	r3, [r3, #28]
 8001180:	4a19      	ldr	r2, [pc, #100]	; (80011e8 <HAL_UART_MspInit+0xfc>)
 8001182:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001186:	61d3      	str	r3, [r2, #28]
 8001188:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <HAL_UART_MspInit+0xfc>)
 800118a:	69db      	ldr	r3, [r3, #28]
 800118c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001194:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <HAL_UART_MspInit+0xfc>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	4a13      	ldr	r2, [pc, #76]	; (80011e8 <HAL_UART_MspInit+0xfc>)
 800119a:	f043 0304 	orr.w	r3, r3, #4
 800119e:	6193      	str	r3, [r2, #24]
 80011a0:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <HAL_UART_MspInit+0xfc>)
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	f003 0304 	and.w	r3, r3, #4
 80011a8:	60bb      	str	r3, [r7, #8]
 80011aa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011ac:	2304      	movs	r3, #4
 80011ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b0:	2302      	movs	r3, #2
 80011b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011b4:	2303      	movs	r3, #3
 80011b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b8:	f107 0318 	add.w	r3, r7, #24
 80011bc:	4619      	mov	r1, r3
 80011be:	480b      	ldr	r0, [pc, #44]	; (80011ec <HAL_UART_MspInit+0x100>)
 80011c0:	f000 fb74 	bl	80018ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011c4:	2308      	movs	r3, #8
 80011c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c8:	2300      	movs	r3, #0
 80011ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d0:	f107 0318 	add.w	r3, r7, #24
 80011d4:	4619      	mov	r1, r3
 80011d6:	4805      	ldr	r0, [pc, #20]	; (80011ec <HAL_UART_MspInit+0x100>)
 80011d8:	f000 fb68 	bl	80018ac <HAL_GPIO_Init>
}
 80011dc:	bf00      	nop
 80011de:	3728      	adds	r7, #40	; 0x28
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40013800 	.word	0x40013800
 80011e8:	40021000 	.word	0x40021000
 80011ec:	40010800 	.word	0x40010800
 80011f0:	40004400 	.word	0x40004400

080011f4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a09      	ldr	r2, [pc, #36]	; (8001228 <HAL_PCD_MspInit+0x34>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d10b      	bne.n	800121e <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001206:	4b09      	ldr	r3, [pc, #36]	; (800122c <HAL_PCD_MspInit+0x38>)
 8001208:	69db      	ldr	r3, [r3, #28]
 800120a:	4a08      	ldr	r2, [pc, #32]	; (800122c <HAL_PCD_MspInit+0x38>)
 800120c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001210:	61d3      	str	r3, [r2, #28]
 8001212:	4b06      	ldr	r3, [pc, #24]	; (800122c <HAL_PCD_MspInit+0x38>)
 8001214:	69db      	ldr	r3, [r3, #28]
 8001216:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800121e:	bf00      	nop
 8001220:	3714      	adds	r7, #20
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr
 8001228:	40005c00 	.word	0x40005c00
 800122c:	40021000 	.word	0x40021000

08001230 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr

0800123c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001240:	e7fe      	b.n	8001240 <HardFault_Handler+0x4>

08001242 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001246:	e7fe      	b.n	8001246 <MemManage_Handler+0x4>

08001248 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800124c:	e7fe      	b.n	800124c <BusFault_Handler+0x4>

0800124e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001252:	e7fe      	b.n	8001252 <UsageFault_Handler+0x4>

08001254 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr

08001260 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr

0800126c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	bc80      	pop	{r7}
 8001276:	4770      	bx	lr

08001278 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800127c:	f000 f96a 	bl	8001554 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}

08001284 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
  static uint16_t line_select = 0x0100;
  HAL_GPIO_WritePin(GPIOB, 0xFF00, 1);
 8001288:	2201      	movs	r2, #1
 800128a:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 800128e:	4814      	ldr	r0, [pc, #80]	; (80012e0 <TIM1_UP_IRQHandler+0x5c>)
 8001290:	f000 fc66 	bl	8001b60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, line_select, 0);
 8001294:	4b13      	ldr	r3, [pc, #76]	; (80012e4 <TIM1_UP_IRQHandler+0x60>)
 8001296:	881b      	ldrh	r3, [r3, #0]
 8001298:	2200      	movs	r2, #0
 800129a:	4619      	mov	r1, r3
 800129c:	4810      	ldr	r0, [pc, #64]	; (80012e0 <TIM1_UP_IRQHandler+0x5c>)
 800129e:	f000 fc5f 	bl	8001b60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, getOutput_led(line_select), 0);
 80012a2:	4b10      	ldr	r3, [pc, #64]	; (80012e4 <TIM1_UP_IRQHandler+0x60>)
 80012a4:	881b      	ldrh	r3, [r3, #0]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff f8c2 	bl	8000430 <getOutput_led>
 80012ac:	4603      	mov	r3, r0
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	2200      	movs	r2, #0
 80012b2:	4619      	mov	r1, r3
 80012b4:	480a      	ldr	r0, [pc, #40]	; (80012e0 <TIM1_UP_IRQHandler+0x5c>)
 80012b6:	f000 fc53 	bl	8001b60 <HAL_GPIO_WritePin>
  line_select = line_select == 0x8000 ? 0x0100 : line_select << 1;
 80012ba:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <TIM1_UP_IRQHandler+0x60>)
 80012bc:	881b      	ldrh	r3, [r3, #0]
 80012be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80012c2:	d004      	beq.n	80012ce <TIM1_UP_IRQHandler+0x4a>
 80012c4:	4b07      	ldr	r3, [pc, #28]	; (80012e4 <TIM1_UP_IRQHandler+0x60>)
 80012c6:	881b      	ldrh	r3, [r3, #0]
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	e001      	b.n	80012d2 <TIM1_UP_IRQHandler+0x4e>
 80012ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012d2:	4a04      	ldr	r2, [pc, #16]	; (80012e4 <TIM1_UP_IRQHandler+0x60>)
 80012d4:	8013      	strh	r3, [r2, #0]
  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012d6:	4804      	ldr	r0, [pc, #16]	; (80012e8 <TIM1_UP_IRQHandler+0x64>)
 80012d8:	f003 f8f4 	bl	80044c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40010c00 	.word	0x40010c00
 80012e4:	20002108 	.word	0x20002108
 80012e8:	200027d0 	.word	0x200027d0

080012ec <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5, 1); //Clear all outputs
 80012f0:	2201      	movs	r2, #1
 80012f2:	213f      	movs	r1, #63	; 0x3f
 80012f4:	4803      	ldr	r0, [pc, #12]	; (8001304 <TIM1_CC_IRQHandler+0x18>)
 80012f6:	f000 fc33 	bl	8001b60 <HAL_GPIO_WritePin>
  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012fa:	4803      	ldr	r0, [pc, #12]	; (8001308 <TIM1_CC_IRQHandler+0x1c>)
 80012fc:	f003 f8e2 	bl	80044c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40010c00 	.word	0x40010c00
 8001308:	200027d0 	.word	0x200027d0

0800130c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001310:	4802      	ldr	r0, [pc, #8]	; (800131c <I2C1_EV_IRQHandler+0x10>)
 8001312:	f000 fe7e 	bl	8002012 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	2000273c 	.word	0x2000273c

08001320 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001324:	4802      	ldr	r0, [pc, #8]	; (8001330 <I2C1_ER_IRQHandler+0x10>)
 8001326:	f000 ffda 	bl	80022de <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	2000273c 	.word	0x2000273c

08001334 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001338:	4b15      	ldr	r3, [pc, #84]	; (8001390 <SystemInit+0x5c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a14      	ldr	r2, [pc, #80]	; (8001390 <SystemInit+0x5c>)
 800133e:	f043 0301 	orr.w	r3, r3, #1
 8001342:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001344:	4b12      	ldr	r3, [pc, #72]	; (8001390 <SystemInit+0x5c>)
 8001346:	685a      	ldr	r2, [r3, #4]
 8001348:	4911      	ldr	r1, [pc, #68]	; (8001390 <SystemInit+0x5c>)
 800134a:	4b12      	ldr	r3, [pc, #72]	; (8001394 <SystemInit+0x60>)
 800134c:	4013      	ands	r3, r2
 800134e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001350:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <SystemInit+0x5c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a0e      	ldr	r2, [pc, #56]	; (8001390 <SystemInit+0x5c>)
 8001356:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800135a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800135e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001360:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <SystemInit+0x5c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a0a      	ldr	r2, [pc, #40]	; (8001390 <SystemInit+0x5c>)
 8001366:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800136a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800136c:	4b08      	ldr	r3, [pc, #32]	; (8001390 <SystemInit+0x5c>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	4a07      	ldr	r2, [pc, #28]	; (8001390 <SystemInit+0x5c>)
 8001372:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001376:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001378:	4b05      	ldr	r3, [pc, #20]	; (8001390 <SystemInit+0x5c>)
 800137a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800137e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <SystemInit+0x64>)
 8001382:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001386:	609a      	str	r2, [r3, #8]
#endif 
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr
 8001390:	40021000 	.word	0x40021000
 8001394:	f8ff0000 	.word	0xf8ff0000
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <tud_descriptor_device_cb>:
};

// Invoked when received GET DEVICE DESCRIPTOR
// Application return pointer to descriptor
uint8_t const * tud_descriptor_device_cb(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return (uint8_t const *) &desc_device;
 80013a0:	4b02      	ldr	r3, [pc, #8]	; (80013ac <tud_descriptor_device_cb+0x10>)
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bc80      	pop	{r7}
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	0800a6f4 	.word	0x0800a6f4

080013b0 <tud_hid_descriptor_report_cb>:

// Invoked when received GET HID REPORT DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_hid_descriptor_report_cb(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  return desc_hid_report;
 80013b4:	4b02      	ldr	r3, [pc, #8]	; (80013c0 <tud_hid_descriptor_report_cb+0x10>)
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bc80      	pop	{r7}
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	0800a708 	.word	0x0800a708

080013c4 <tud_descriptor_configuration_cb>:

// Invoked when received GET CONFIGURATION DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_descriptor_configuration_cb(uint8_t index)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	71fb      	strb	r3, [r7, #7]
  (void) index; // for multiple configurations
  return desc_configuration;
 80013ce:	4b03      	ldr	r3, [pc, #12]	; (80013dc <tud_descriptor_configuration_cb+0x18>)
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc80      	pop	{r7}
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	0800a798 	.word	0x0800a798

080013e0 <tud_descriptor_string_cb>:
static uint16_t _desc_str[32];

// Invoked when received GET STRING DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
uint16_t const* tud_descriptor_string_cb(uint8_t index)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	71fb      	strb	r3, [r7, #7]
  uint8_t chr_count;

  if ( index == 0)
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d108      	bne.n	8001402 <tud_descriptor_string_cb+0x22>
  {
    memcpy(&_desc_str[1], string_desc_arr[0], 2);
 80013f0:	4b20      	ldr	r3, [pc, #128]	; (8001474 <tud_descriptor_string_cb+0x94>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	881b      	ldrh	r3, [r3, #0]
 80013f6:	b29a      	uxth	r2, r3
 80013f8:	4b1f      	ldr	r3, [pc, #124]	; (8001478 <tud_descriptor_string_cb+0x98>)
 80013fa:	805a      	strh	r2, [r3, #2]
    chr_count = 1;
 80013fc:	2301      	movs	r3, #1
 80013fe:	73fb      	strb	r3, [r7, #15]
 8001400:	e027      	b.n	8001452 <tud_descriptor_string_cb+0x72>
  }else
  {
    // Convert ASCII string into UTF-16

    if ( !(index < sizeof(string_desc_arr)/sizeof(string_desc_arr[0])) ) return NULL;
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	2b07      	cmp	r3, #7
 8001406:	d901      	bls.n	800140c <tud_descriptor_string_cb+0x2c>
 8001408:	2300      	movs	r3, #0
 800140a:	e02f      	b.n	800146c <tud_descriptor_string_cb+0x8c>

    const char* str = string_desc_arr[index];
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	4a19      	ldr	r2, [pc, #100]	; (8001474 <tud_descriptor_string_cb+0x94>)
 8001410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001414:	60bb      	str	r3, [r7, #8]

    // Cap at max char
    chr_count = strlen(str);
 8001416:	68b8      	ldr	r0, [r7, #8]
 8001418:	f7fe fe98 	bl	800014c <strlen>
 800141c:	4603      	mov	r3, r0
 800141e:	73fb      	strb	r3, [r7, #15]
    if ( chr_count > 31 ) chr_count = 31;
 8001420:	7bfb      	ldrb	r3, [r7, #15]
 8001422:	2b1f      	cmp	r3, #31
 8001424:	d901      	bls.n	800142a <tud_descriptor_string_cb+0x4a>
 8001426:	231f      	movs	r3, #31
 8001428:	73fb      	strb	r3, [r7, #15]

    for(uint8_t i=0; i<chr_count; i++)
 800142a:	2300      	movs	r3, #0
 800142c:	73bb      	strb	r3, [r7, #14]
 800142e:	e00c      	b.n	800144a <tud_descriptor_string_cb+0x6a>
    {
      _desc_str[1+i] = str[i];
 8001430:	7bbb      	ldrb	r3, [r7, #14]
 8001432:	68ba      	ldr	r2, [r7, #8]
 8001434:	4413      	add	r3, r2
 8001436:	781a      	ldrb	r2, [r3, #0]
 8001438:	7bbb      	ldrb	r3, [r7, #14]
 800143a:	3301      	adds	r3, #1
 800143c:	b291      	uxth	r1, r2
 800143e:	4a0e      	ldr	r2, [pc, #56]	; (8001478 <tud_descriptor_string_cb+0x98>)
 8001440:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint8_t i=0; i<chr_count; i++)
 8001444:	7bbb      	ldrb	r3, [r7, #14]
 8001446:	3301      	adds	r3, #1
 8001448:	73bb      	strb	r3, [r7, #14]
 800144a:	7bba      	ldrb	r2, [r7, #14]
 800144c:	7bfb      	ldrb	r3, [r7, #15]
 800144e:	429a      	cmp	r2, r3
 8001450:	d3ee      	bcc.n	8001430 <tud_descriptor_string_cb+0x50>
    }
  }

  // first byte is length (including header), second byte is string type
  _desc_str[0] = (TUSB_DESC_STRING << 8 ) | (2*chr_count + 2);
 8001452:	7bfb      	ldrb	r3, [r7, #15]
 8001454:	3301      	adds	r3, #1
 8001456:	b29b      	uxth	r3, r3
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	b29b      	uxth	r3, r3
 800145c:	b21b      	sxth	r3, r3
 800145e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001462:	b21b      	sxth	r3, r3
 8001464:	b29a      	uxth	r2, r3
 8001466:	4b04      	ldr	r3, [pc, #16]	; (8001478 <tud_descriptor_string_cb+0x98>)
 8001468:	801a      	strh	r2, [r3, #0]

  return _desc_str;
 800146a:	4b03      	ldr	r3, [pc, #12]	; (8001478 <tud_descriptor_string_cb+0x98>)
}
 800146c:	4618      	mov	r0, r3
 800146e:	3710      	adds	r7, #16
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20002110 	.word	0x20002110
 8001478:	20002194 	.word	0x20002194

0800147c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800147c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800147e:	e003      	b.n	8001488 <LoopCopyDataInit>

08001480 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001480:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001482:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001484:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001486:	3104      	adds	r1, #4

08001488 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001488:	480a      	ldr	r0, [pc, #40]	; (80014b4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800148a:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800148c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800148e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001490:	d3f6      	bcc.n	8001480 <CopyDataInit>
  ldr r2, =_sbss
 8001492:	4a0a      	ldr	r2, [pc, #40]	; (80014bc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001494:	e002      	b.n	800149c <LoopFillZerobss>

08001496 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001496:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001498:	f842 3b04 	str.w	r3, [r2], #4

0800149c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800149c:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800149e:	429a      	cmp	r2, r3
  bcc FillZerobss
 80014a0:	d3f9      	bcc.n	8001496 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014a2:	f7ff ff47 	bl	8001334 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014a6:	f009 f85d 	bl	800a564 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014aa:	f7ff f899 	bl	80005e0 <main>
  bx lr
 80014ae:	4770      	bx	lr
  ldr r3, =_sidata
 80014b0:	0800a908 	.word	0x0800a908
  ldr r0, =_sdata
 80014b4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80014b8:	2000214c 	.word	0x2000214c
  ldr r2, =_sbss
 80014bc:	2000214c 	.word	0x2000214c
  ldr r3, = _ebss
 80014c0:	20002cac 	.word	0x20002cac

080014c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014c4:	e7fe      	b.n	80014c4 <ADC1_2_IRQHandler>
	...

080014c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014cc:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <HAL_Init+0x28>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a07      	ldr	r2, [pc, #28]	; (80014f0 <HAL_Init+0x28>)
 80014d2:	f043 0310 	orr.w	r3, r3, #16
 80014d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d8:	2003      	movs	r0, #3
 80014da:	f000 f923 	bl	8001724 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014de:	2000      	movs	r0, #0
 80014e0:	f000 f808 	bl	80014f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014e4:	f7ff fd54 	bl	8000f90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40022000 	.word	0x40022000

080014f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014fc:	4b12      	ldr	r3, [pc, #72]	; (8001548 <HAL_InitTick+0x54>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	4b12      	ldr	r3, [pc, #72]	; (800154c <HAL_InitTick+0x58>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	4619      	mov	r1, r3
 8001506:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800150a:	fbb3 f3f1 	udiv	r3, r3, r1
 800150e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001512:	4618      	mov	r0, r3
 8001514:	f000 f93b 	bl	800178e <HAL_SYSTICK_Config>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e00e      	b.n	8001540 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2b0f      	cmp	r3, #15
 8001526:	d80a      	bhi.n	800153e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001528:	2200      	movs	r2, #0
 800152a:	6879      	ldr	r1, [r7, #4]
 800152c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001530:	f000 f903 	bl	800173a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001534:	4a06      	ldr	r2, [pc, #24]	; (8001550 <HAL_InitTick+0x5c>)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800153a:	2300      	movs	r3, #0
 800153c:	e000      	b.n	8001540 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
}
 8001540:	4618      	mov	r0, r3
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	2000210c 	.word	0x2000210c
 800154c:	20002134 	.word	0x20002134
 8001550:	20002130 	.word	0x20002130

08001554 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001558:	4b05      	ldr	r3, [pc, #20]	; (8001570 <HAL_IncTick+0x1c>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	461a      	mov	r2, r3
 800155e:	4b05      	ldr	r3, [pc, #20]	; (8001574 <HAL_IncTick+0x20>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4413      	add	r3, r2
 8001564:	4a03      	ldr	r2, [pc, #12]	; (8001574 <HAL_IncTick+0x20>)
 8001566:	6013      	str	r3, [r2, #0]
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr
 8001570:	20002134 	.word	0x20002134
 8001574:	20002abc 	.word	0x20002abc

08001578 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  return uwTick;
 800157c:	4b02      	ldr	r3, [pc, #8]	; (8001588 <HAL_GetTick+0x10>)
 800157e:	681b      	ldr	r3, [r3, #0]
}
 8001580:	4618      	mov	r0, r3
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr
 8001588:	20002abc 	.word	0x20002abc

0800158c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800159c:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <__NVIC_SetPriorityGrouping+0x44>)
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015a2:	68ba      	ldr	r2, [r7, #8]
 80015a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015a8:	4013      	ands	r3, r2
 80015aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015be:	4a04      	ldr	r2, [pc, #16]	; (80015d0 <__NVIC_SetPriorityGrouping+0x44>)
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	60d3      	str	r3, [r2, #12]
}
 80015c4:	bf00      	nop
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bc80      	pop	{r7}
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	e000ed00 	.word	0xe000ed00

080015d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d8:	4b04      	ldr	r3, [pc, #16]	; (80015ec <__NVIC_GetPriorityGrouping+0x18>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	0a1b      	lsrs	r3, r3, #8
 80015de:	f003 0307 	and.w	r3, r3, #7
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bc80      	pop	{r7}
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	db0b      	blt.n	800161a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	f003 021f 	and.w	r2, r3, #31
 8001608:	4906      	ldr	r1, [pc, #24]	; (8001624 <__NVIC_EnableIRQ+0x34>)
 800160a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160e:	095b      	lsrs	r3, r3, #5
 8001610:	2001      	movs	r0, #1
 8001612:	fa00 f202 	lsl.w	r2, r0, r2
 8001616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr
 8001624:	e000e100 	.word	0xe000e100

08001628 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	6039      	str	r1, [r7, #0]
 8001632:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001638:	2b00      	cmp	r3, #0
 800163a:	db0a      	blt.n	8001652 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	b2da      	uxtb	r2, r3
 8001640:	490c      	ldr	r1, [pc, #48]	; (8001674 <__NVIC_SetPriority+0x4c>)
 8001642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001646:	0112      	lsls	r2, r2, #4
 8001648:	b2d2      	uxtb	r2, r2
 800164a:	440b      	add	r3, r1
 800164c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001650:	e00a      	b.n	8001668 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	b2da      	uxtb	r2, r3
 8001656:	4908      	ldr	r1, [pc, #32]	; (8001678 <__NVIC_SetPriority+0x50>)
 8001658:	79fb      	ldrb	r3, [r7, #7]
 800165a:	f003 030f 	and.w	r3, r3, #15
 800165e:	3b04      	subs	r3, #4
 8001660:	0112      	lsls	r2, r2, #4
 8001662:	b2d2      	uxtb	r2, r2
 8001664:	440b      	add	r3, r1
 8001666:	761a      	strb	r2, [r3, #24]
}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	bc80      	pop	{r7}
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	e000e100 	.word	0xe000e100
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800167c:	b480      	push	{r7}
 800167e:	b089      	sub	sp, #36	; 0x24
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	f1c3 0307 	rsb	r3, r3, #7
 8001696:	2b04      	cmp	r3, #4
 8001698:	bf28      	it	cs
 800169a:	2304      	movcs	r3, #4
 800169c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	3304      	adds	r3, #4
 80016a2:	2b06      	cmp	r3, #6
 80016a4:	d902      	bls.n	80016ac <NVIC_EncodePriority+0x30>
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	3b03      	subs	r3, #3
 80016aa:	e000      	b.n	80016ae <NVIC_EncodePriority+0x32>
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	43da      	mvns	r2, r3
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	401a      	ands	r2, r3
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	fa01 f303 	lsl.w	r3, r1, r3
 80016ce:	43d9      	mvns	r1, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d4:	4313      	orrs	r3, r2
         );
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3724      	adds	r7, #36	; 0x24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr

080016e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016f0:	d301      	bcc.n	80016f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016f2:	2301      	movs	r3, #1
 80016f4:	e00f      	b.n	8001716 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016f6:	4a0a      	ldr	r2, [pc, #40]	; (8001720 <SysTick_Config+0x40>)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3b01      	subs	r3, #1
 80016fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016fe:	210f      	movs	r1, #15
 8001700:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001704:	f7ff ff90 	bl	8001628 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001708:	4b05      	ldr	r3, [pc, #20]	; (8001720 <SysTick_Config+0x40>)
 800170a:	2200      	movs	r2, #0
 800170c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800170e:	4b04      	ldr	r3, [pc, #16]	; (8001720 <SysTick_Config+0x40>)
 8001710:	2207      	movs	r2, #7
 8001712:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	e000e010 	.word	0xe000e010

08001724 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f7ff ff2d 	bl	800158c <__NVIC_SetPriorityGrouping>
}
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800173a:	b580      	push	{r7, lr}
 800173c:	b086      	sub	sp, #24
 800173e:	af00      	add	r7, sp, #0
 8001740:	4603      	mov	r3, r0
 8001742:	60b9      	str	r1, [r7, #8]
 8001744:	607a      	str	r2, [r7, #4]
 8001746:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800174c:	f7ff ff42 	bl	80015d4 <__NVIC_GetPriorityGrouping>
 8001750:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	68b9      	ldr	r1, [r7, #8]
 8001756:	6978      	ldr	r0, [r7, #20]
 8001758:	f7ff ff90 	bl	800167c <NVIC_EncodePriority>
 800175c:	4602      	mov	r2, r0
 800175e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001762:	4611      	mov	r1, r2
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff ff5f 	bl	8001628 <__NVIC_SetPriority>
}
 800176a:	bf00      	nop
 800176c:	3718      	adds	r7, #24
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	4603      	mov	r3, r0
 800177a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800177c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff ff35 	bl	80015f0 <__NVIC_EnableIRQ>
}
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff ffa2 	bl	80016e0 <SysTick_Config>
 800179c:	4603      	mov	r3, r0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
	...

080017a8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017b0:	2300      	movs	r3, #0
 80017b2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d005      	beq.n	80017ca <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2204      	movs	r2, #4
 80017c2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	73fb      	strb	r3, [r7, #15]
 80017c8:	e051      	b.n	800186e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f022 020e 	bic.w	r2, r2, #14
 80017d8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f022 0201 	bic.w	r2, r2, #1
 80017e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a22      	ldr	r2, [pc, #136]	; (8001878 <HAL_DMA_Abort_IT+0xd0>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d029      	beq.n	8001848 <HAL_DMA_Abort_IT+0xa0>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a20      	ldr	r2, [pc, #128]	; (800187c <HAL_DMA_Abort_IT+0xd4>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d022      	beq.n	8001844 <HAL_DMA_Abort_IT+0x9c>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a1f      	ldr	r2, [pc, #124]	; (8001880 <HAL_DMA_Abort_IT+0xd8>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d01a      	beq.n	800183e <HAL_DMA_Abort_IT+0x96>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a1d      	ldr	r2, [pc, #116]	; (8001884 <HAL_DMA_Abort_IT+0xdc>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d012      	beq.n	8001838 <HAL_DMA_Abort_IT+0x90>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a1c      	ldr	r2, [pc, #112]	; (8001888 <HAL_DMA_Abort_IT+0xe0>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d00a      	beq.n	8001832 <HAL_DMA_Abort_IT+0x8a>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a1a      	ldr	r2, [pc, #104]	; (800188c <HAL_DMA_Abort_IT+0xe4>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d102      	bne.n	800182c <HAL_DMA_Abort_IT+0x84>
 8001826:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800182a:	e00e      	b.n	800184a <HAL_DMA_Abort_IT+0xa2>
 800182c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001830:	e00b      	b.n	800184a <HAL_DMA_Abort_IT+0xa2>
 8001832:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001836:	e008      	b.n	800184a <HAL_DMA_Abort_IT+0xa2>
 8001838:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800183c:	e005      	b.n	800184a <HAL_DMA_Abort_IT+0xa2>
 800183e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001842:	e002      	b.n	800184a <HAL_DMA_Abort_IT+0xa2>
 8001844:	2310      	movs	r3, #16
 8001846:	e000      	b.n	800184a <HAL_DMA_Abort_IT+0xa2>
 8001848:	2301      	movs	r3, #1
 800184a:	4a11      	ldr	r2, [pc, #68]	; (8001890 <HAL_DMA_Abort_IT+0xe8>)
 800184c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2201      	movs	r2, #1
 8001852:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001862:	2b00      	cmp	r3, #0
 8001864:	d003      	beq.n	800186e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	4798      	blx	r3
    } 
  }
  return status;
 800186e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3710      	adds	r7, #16
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40020008 	.word	0x40020008
 800187c:	4002001c 	.word	0x4002001c
 8001880:	40020030 	.word	0x40020030
 8001884:	40020044 	.word	0x40020044
 8001888:	40020058 	.word	0x40020058
 800188c:	4002006c 	.word	0x4002006c
 8001890:	40020000 	.word	0x40020000

08001894 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr

080018ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b08b      	sub	sp, #44	; 0x2c
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018b6:	2300      	movs	r3, #0
 80018b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018ba:	2300      	movs	r3, #0
 80018bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018be:	e127      	b.n	8001b10 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018c0:	2201      	movs	r2, #1
 80018c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	69fa      	ldr	r2, [r7, #28]
 80018d0:	4013      	ands	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	429a      	cmp	r2, r3
 80018da:	f040 8116 	bne.w	8001b0a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	2b12      	cmp	r3, #18
 80018e4:	d034      	beq.n	8001950 <HAL_GPIO_Init+0xa4>
 80018e6:	2b12      	cmp	r3, #18
 80018e8:	d80d      	bhi.n	8001906 <HAL_GPIO_Init+0x5a>
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d02b      	beq.n	8001946 <HAL_GPIO_Init+0x9a>
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d804      	bhi.n	80018fc <HAL_GPIO_Init+0x50>
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d031      	beq.n	800195a <HAL_GPIO_Init+0xae>
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d01c      	beq.n	8001934 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018fa:	e048      	b.n	800198e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80018fc:	2b03      	cmp	r3, #3
 80018fe:	d043      	beq.n	8001988 <HAL_GPIO_Init+0xdc>
 8001900:	2b11      	cmp	r3, #17
 8001902:	d01b      	beq.n	800193c <HAL_GPIO_Init+0x90>
          break;
 8001904:	e043      	b.n	800198e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001906:	4a89      	ldr	r2, [pc, #548]	; (8001b2c <HAL_GPIO_Init+0x280>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d026      	beq.n	800195a <HAL_GPIO_Init+0xae>
 800190c:	4a87      	ldr	r2, [pc, #540]	; (8001b2c <HAL_GPIO_Init+0x280>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d806      	bhi.n	8001920 <HAL_GPIO_Init+0x74>
 8001912:	4a87      	ldr	r2, [pc, #540]	; (8001b30 <HAL_GPIO_Init+0x284>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d020      	beq.n	800195a <HAL_GPIO_Init+0xae>
 8001918:	4a86      	ldr	r2, [pc, #536]	; (8001b34 <HAL_GPIO_Init+0x288>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d01d      	beq.n	800195a <HAL_GPIO_Init+0xae>
          break;
 800191e:	e036      	b.n	800198e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001920:	4a85      	ldr	r2, [pc, #532]	; (8001b38 <HAL_GPIO_Init+0x28c>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d019      	beq.n	800195a <HAL_GPIO_Init+0xae>
 8001926:	4a85      	ldr	r2, [pc, #532]	; (8001b3c <HAL_GPIO_Init+0x290>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d016      	beq.n	800195a <HAL_GPIO_Init+0xae>
 800192c:	4a84      	ldr	r2, [pc, #528]	; (8001b40 <HAL_GPIO_Init+0x294>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d013      	beq.n	800195a <HAL_GPIO_Init+0xae>
          break;
 8001932:	e02c      	b.n	800198e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	623b      	str	r3, [r7, #32]
          break;
 800193a:	e028      	b.n	800198e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	3304      	adds	r3, #4
 8001942:	623b      	str	r3, [r7, #32]
          break;
 8001944:	e023      	b.n	800198e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	3308      	adds	r3, #8
 800194c:	623b      	str	r3, [r7, #32]
          break;
 800194e:	e01e      	b.n	800198e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	330c      	adds	r3, #12
 8001956:	623b      	str	r3, [r7, #32]
          break;
 8001958:	e019      	b.n	800198e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d102      	bne.n	8001968 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001962:	2304      	movs	r3, #4
 8001964:	623b      	str	r3, [r7, #32]
          break;
 8001966:	e012      	b.n	800198e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d105      	bne.n	800197c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001970:	2308      	movs	r3, #8
 8001972:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	69fa      	ldr	r2, [r7, #28]
 8001978:	611a      	str	r2, [r3, #16]
          break;
 800197a:	e008      	b.n	800198e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800197c:	2308      	movs	r3, #8
 800197e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	69fa      	ldr	r2, [r7, #28]
 8001984:	615a      	str	r2, [r3, #20]
          break;
 8001986:	e002      	b.n	800198e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001988:	2300      	movs	r3, #0
 800198a:	623b      	str	r3, [r7, #32]
          break;
 800198c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	2bff      	cmp	r3, #255	; 0xff
 8001992:	d801      	bhi.n	8001998 <HAL_GPIO_Init+0xec>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	e001      	b.n	800199c <HAL_GPIO_Init+0xf0>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3304      	adds	r3, #4
 800199c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	2bff      	cmp	r3, #255	; 0xff
 80019a2:	d802      	bhi.n	80019aa <HAL_GPIO_Init+0xfe>
 80019a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	e002      	b.n	80019b0 <HAL_GPIO_Init+0x104>
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ac:	3b08      	subs	r3, #8
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	210f      	movs	r1, #15
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	fa01 f303 	lsl.w	r3, r1, r3
 80019be:	43db      	mvns	r3, r3
 80019c0:	401a      	ands	r2, r3
 80019c2:	6a39      	ldr	r1, [r7, #32]
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ca:	431a      	orrs	r2, r3
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	f000 8096 	beq.w	8001b0a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019de:	4b59      	ldr	r3, [pc, #356]	; (8001b44 <HAL_GPIO_Init+0x298>)
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	4a58      	ldr	r2, [pc, #352]	; (8001b44 <HAL_GPIO_Init+0x298>)
 80019e4:	f043 0301 	orr.w	r3, r3, #1
 80019e8:	6193      	str	r3, [r2, #24]
 80019ea:	4b56      	ldr	r3, [pc, #344]	; (8001b44 <HAL_GPIO_Init+0x298>)
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	60bb      	str	r3, [r7, #8]
 80019f4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019f6:	4a54      	ldr	r2, [pc, #336]	; (8001b48 <HAL_GPIO_Init+0x29c>)
 80019f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fa:	089b      	lsrs	r3, r3, #2
 80019fc:	3302      	adds	r3, #2
 80019fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a02:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a06:	f003 0303 	and.w	r3, r3, #3
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	220f      	movs	r2, #15
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43db      	mvns	r3, r3
 8001a14:	68fa      	ldr	r2, [r7, #12]
 8001a16:	4013      	ands	r3, r2
 8001a18:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a4b      	ldr	r2, [pc, #300]	; (8001b4c <HAL_GPIO_Init+0x2a0>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d013      	beq.n	8001a4a <HAL_GPIO_Init+0x19e>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a4a      	ldr	r2, [pc, #296]	; (8001b50 <HAL_GPIO_Init+0x2a4>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d00d      	beq.n	8001a46 <HAL_GPIO_Init+0x19a>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a49      	ldr	r2, [pc, #292]	; (8001b54 <HAL_GPIO_Init+0x2a8>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d007      	beq.n	8001a42 <HAL_GPIO_Init+0x196>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a48      	ldr	r2, [pc, #288]	; (8001b58 <HAL_GPIO_Init+0x2ac>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d101      	bne.n	8001a3e <HAL_GPIO_Init+0x192>
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e006      	b.n	8001a4c <HAL_GPIO_Init+0x1a0>
 8001a3e:	2304      	movs	r3, #4
 8001a40:	e004      	b.n	8001a4c <HAL_GPIO_Init+0x1a0>
 8001a42:	2302      	movs	r3, #2
 8001a44:	e002      	b.n	8001a4c <HAL_GPIO_Init+0x1a0>
 8001a46:	2301      	movs	r3, #1
 8001a48:	e000      	b.n	8001a4c <HAL_GPIO_Init+0x1a0>
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a4e:	f002 0203 	and.w	r2, r2, #3
 8001a52:	0092      	lsls	r2, r2, #2
 8001a54:	4093      	lsls	r3, r2
 8001a56:	68fa      	ldr	r2, [r7, #12]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a5c:	493a      	ldr	r1, [pc, #232]	; (8001b48 <HAL_GPIO_Init+0x29c>)
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a60:	089b      	lsrs	r3, r3, #2
 8001a62:	3302      	adds	r3, #2
 8001a64:	68fa      	ldr	r2, [r7, #12]
 8001a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d006      	beq.n	8001a84 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a76:	4b39      	ldr	r3, [pc, #228]	; (8001b5c <HAL_GPIO_Init+0x2b0>)
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	4938      	ldr	r1, [pc, #224]	; (8001b5c <HAL_GPIO_Init+0x2b0>)
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	600b      	str	r3, [r1, #0]
 8001a82:	e006      	b.n	8001a92 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a84:	4b35      	ldr	r3, [pc, #212]	; (8001b5c <HAL_GPIO_Init+0x2b0>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	4933      	ldr	r1, [pc, #204]	; (8001b5c <HAL_GPIO_Init+0x2b0>)
 8001a8e:	4013      	ands	r3, r2
 8001a90:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d006      	beq.n	8001aac <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a9e:	4b2f      	ldr	r3, [pc, #188]	; (8001b5c <HAL_GPIO_Init+0x2b0>)
 8001aa0:	685a      	ldr	r2, [r3, #4]
 8001aa2:	492e      	ldr	r1, [pc, #184]	; (8001b5c <HAL_GPIO_Init+0x2b0>)
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	604b      	str	r3, [r1, #4]
 8001aaa:	e006      	b.n	8001aba <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001aac:	4b2b      	ldr	r3, [pc, #172]	; (8001b5c <HAL_GPIO_Init+0x2b0>)
 8001aae:	685a      	ldr	r2, [r3, #4]
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	4929      	ldr	r1, [pc, #164]	; (8001b5c <HAL_GPIO_Init+0x2b0>)
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d006      	beq.n	8001ad4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ac6:	4b25      	ldr	r3, [pc, #148]	; (8001b5c <HAL_GPIO_Init+0x2b0>)
 8001ac8:	689a      	ldr	r2, [r3, #8]
 8001aca:	4924      	ldr	r1, [pc, #144]	; (8001b5c <HAL_GPIO_Init+0x2b0>)
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	608b      	str	r3, [r1, #8]
 8001ad2:	e006      	b.n	8001ae2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ad4:	4b21      	ldr	r3, [pc, #132]	; (8001b5c <HAL_GPIO_Init+0x2b0>)
 8001ad6:	689a      	ldr	r2, [r3, #8]
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	43db      	mvns	r3, r3
 8001adc:	491f      	ldr	r1, [pc, #124]	; (8001b5c <HAL_GPIO_Init+0x2b0>)
 8001ade:	4013      	ands	r3, r2
 8001ae0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d006      	beq.n	8001afc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001aee:	4b1b      	ldr	r3, [pc, #108]	; (8001b5c <HAL_GPIO_Init+0x2b0>)
 8001af0:	68da      	ldr	r2, [r3, #12]
 8001af2:	491a      	ldr	r1, [pc, #104]	; (8001b5c <HAL_GPIO_Init+0x2b0>)
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	60cb      	str	r3, [r1, #12]
 8001afa:	e006      	b.n	8001b0a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001afc:	4b17      	ldr	r3, [pc, #92]	; (8001b5c <HAL_GPIO_Init+0x2b0>)
 8001afe:	68da      	ldr	r2, [r3, #12]
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	43db      	mvns	r3, r3
 8001b04:	4915      	ldr	r1, [pc, #84]	; (8001b5c <HAL_GPIO_Init+0x2b0>)
 8001b06:	4013      	ands	r3, r2
 8001b08:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b16:	fa22 f303 	lsr.w	r3, r2, r3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f47f aed0 	bne.w	80018c0 <HAL_GPIO_Init+0x14>
  }
}
 8001b20:	bf00      	nop
 8001b22:	372c      	adds	r7, #44	; 0x2c
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	10210000 	.word	0x10210000
 8001b30:	10110000 	.word	0x10110000
 8001b34:	10120000 	.word	0x10120000
 8001b38:	10310000 	.word	0x10310000
 8001b3c:	10320000 	.word	0x10320000
 8001b40:	10220000 	.word	0x10220000
 8001b44:	40021000 	.word	0x40021000
 8001b48:	40010000 	.word	0x40010000
 8001b4c:	40010800 	.word	0x40010800
 8001b50:	40010c00 	.word	0x40010c00
 8001b54:	40011000 	.word	0x40011000
 8001b58:	40011400 	.word	0x40011400
 8001b5c:	40010400 	.word	0x40010400

08001b60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	460b      	mov	r3, r1
 8001b6a:	807b      	strh	r3, [r7, #2]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b70:	787b      	ldrb	r3, [r7, #1]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d003      	beq.n	8001b7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b76:	887a      	ldrh	r2, [r7, #2]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b7c:	e003      	b.n	8001b86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b7e:	887b      	ldrh	r3, [r7, #2]
 8001b80:	041a      	lsls	r2, r3, #16
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	611a      	str	r2, [r3, #16]
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr

08001b90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e10f      	b.n	8001dc2 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d106      	bne.n	8001bbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7ff fa1c 	bl	8000ff4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2224      	movs	r2, #36	; 0x24
 8001bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 0201 	bic.w	r2, r2, #1
 8001bd2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001bd4:	f002 fa80 	bl	80040d8 <HAL_RCC_GetPCLK1Freq>
 8001bd8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	4a7b      	ldr	r2, [pc, #492]	; (8001dcc <HAL_I2C_Init+0x23c>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d807      	bhi.n	8001bf4 <HAL_I2C_Init+0x64>
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	4a7a      	ldr	r2, [pc, #488]	; (8001dd0 <HAL_I2C_Init+0x240>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	bf94      	ite	ls
 8001bec:	2301      	movls	r3, #1
 8001bee:	2300      	movhi	r3, #0
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	e006      	b.n	8001c02 <HAL_I2C_Init+0x72>
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	4a77      	ldr	r2, [pc, #476]	; (8001dd4 <HAL_I2C_Init+0x244>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	bf94      	ite	ls
 8001bfc:	2301      	movls	r3, #1
 8001bfe:	2300      	movhi	r3, #0
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e0db      	b.n	8001dc2 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	4a72      	ldr	r2, [pc, #456]	; (8001dd8 <HAL_I2C_Init+0x248>)
 8001c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c12:	0c9b      	lsrs	r3, r3, #18
 8001c14:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68ba      	ldr	r2, [r7, #8]
 8001c26:	430a      	orrs	r2, r1
 8001c28:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	6a1b      	ldr	r3, [r3, #32]
 8001c30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	4a64      	ldr	r2, [pc, #400]	; (8001dcc <HAL_I2C_Init+0x23c>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d802      	bhi.n	8001c44 <HAL_I2C_Init+0xb4>
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	3301      	adds	r3, #1
 8001c42:	e009      	b.n	8001c58 <HAL_I2C_Init+0xc8>
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c4a:	fb02 f303 	mul.w	r3, r2, r3
 8001c4e:	4a63      	ldr	r2, [pc, #396]	; (8001ddc <HAL_I2C_Init+0x24c>)
 8001c50:	fba2 2303 	umull	r2, r3, r2, r3
 8001c54:	099b      	lsrs	r3, r3, #6
 8001c56:	3301      	adds	r3, #1
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	6812      	ldr	r2, [r2, #0]
 8001c5c:	430b      	orrs	r3, r1
 8001c5e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	69db      	ldr	r3, [r3, #28]
 8001c66:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c6a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	4956      	ldr	r1, [pc, #344]	; (8001dcc <HAL_I2C_Init+0x23c>)
 8001c74:	428b      	cmp	r3, r1
 8001c76:	d80d      	bhi.n	8001c94 <HAL_I2C_Init+0x104>
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	1e59      	subs	r1, r3, #1
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c86:	3301      	adds	r3, #1
 8001c88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c8c:	2b04      	cmp	r3, #4
 8001c8e:	bf38      	it	cc
 8001c90:	2304      	movcc	r3, #4
 8001c92:	e04f      	b.n	8001d34 <HAL_I2C_Init+0x1a4>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d111      	bne.n	8001cc0 <HAL_I2C_Init+0x130>
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	1e58      	subs	r0, r3, #1
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6859      	ldr	r1, [r3, #4]
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	440b      	add	r3, r1
 8001caa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cae:	3301      	adds	r3, #1
 8001cb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	bf0c      	ite	eq
 8001cb8:	2301      	moveq	r3, #1
 8001cba:	2300      	movne	r3, #0
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	e012      	b.n	8001ce6 <HAL_I2C_Init+0x156>
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	1e58      	subs	r0, r3, #1
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6859      	ldr	r1, [r3, #4]
 8001cc8:	460b      	mov	r3, r1
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	440b      	add	r3, r1
 8001cce:	0099      	lsls	r1, r3, #2
 8001cd0:	440b      	add	r3, r1
 8001cd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	bf0c      	ite	eq
 8001ce0:	2301      	moveq	r3, #1
 8001ce2:	2300      	movne	r3, #0
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <HAL_I2C_Init+0x15e>
 8001cea:	2301      	movs	r3, #1
 8001cec:	e022      	b.n	8001d34 <HAL_I2C_Init+0x1a4>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d10e      	bne.n	8001d14 <HAL_I2C_Init+0x184>
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	1e58      	subs	r0, r3, #1
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6859      	ldr	r1, [r3, #4]
 8001cfe:	460b      	mov	r3, r1
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	440b      	add	r3, r1
 8001d04:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d08:	3301      	adds	r3, #1
 8001d0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d12:	e00f      	b.n	8001d34 <HAL_I2C_Init+0x1a4>
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	1e58      	subs	r0, r3, #1
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6859      	ldr	r1, [r3, #4]
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	440b      	add	r3, r1
 8001d22:	0099      	lsls	r1, r3, #2
 8001d24:	440b      	add	r3, r1
 8001d26:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d34:	6879      	ldr	r1, [r7, #4]
 8001d36:	6809      	ldr	r1, [r1, #0]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69da      	ldr	r2, [r3, #28]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a1b      	ldr	r3, [r3, #32]
 8001d4e:	431a      	orrs	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	430a      	orrs	r2, r1
 8001d56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	6911      	ldr	r1, [r2, #16]
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	68d2      	ldr	r2, [r2, #12]
 8001d6e:	4311      	orrs	r1, r2
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	6812      	ldr	r2, [r2, #0]
 8001d74:	430b      	orrs	r3, r1
 8001d76:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	695a      	ldr	r2, [r3, #20]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	430a      	orrs	r2, r1
 8001d92:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 0201 	orr.w	r2, r2, #1
 8001da2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2220      	movs	r2, #32
 8001dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	000186a0 	.word	0x000186a0
 8001dd0:	001e847f 	.word	0x001e847f
 8001dd4:	003d08ff 	.word	0x003d08ff
 8001dd8:	431bde83 	.word	0x431bde83
 8001ddc:	10624dd3 	.word	0x10624dd3

08001de0 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b087      	sub	sp, #28
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	603b      	str	r3, [r7, #0]
 8001dec:	4613      	mov	r3, r2
 8001dee:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001dfc:	2b28      	cmp	r3, #40	; 0x28
 8001dfe:	d15b      	bne.n	8001eb8 <HAL_I2C_Slave_Seq_Transmit_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d002      	beq.n	8001e0c <HAL_I2C_Slave_Seq_Transmit_IT+0x2c>
 8001e06:	88fb      	ldrh	r3, [r7, #6]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d101      	bne.n	8001e10 <HAL_I2C_Slave_Seq_Transmit_IT+0x30>
    {
      return  HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e054      	b.n	8001eba <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d101      	bne.n	8001e1e <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	e04d      	b.n	8001eba <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0301 	and.w	r3, r3, #1
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d007      	beq.n	8001e44 <HAL_I2C_Slave_Seq_Transmit_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f042 0201 	orr.w	r2, r2, #1
 8001e42:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e52:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2229      	movs	r2, #41	; 0x29
 8001e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2220      	movs	r2, #32
 8001e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2200      	movs	r2, #0
 8001e68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	68ba      	ldr	r2, [r7, #8]
 8001e6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	88fa      	ldrh	r2, [r7, #6]
 8001e74:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e86:	2300      	movs	r3, #0
 8001e88:	617b      	str	r3, [r7, #20]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	695b      	ldr	r3, [r3, #20]
 8001e90:	617b      	str	r3, [r7, #20]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	617b      	str	r3, [r7, #20]
 8001e9a:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	685a      	ldr	r2, [r3, #4]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001eb2:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	e000      	b.n	8001eba <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8001eb8:	2302      	movs	r3, #2
  }
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	371c      	adds	r7, #28
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr

08001ec4 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b087      	sub	sp, #28
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	603b      	str	r3, [r7, #0]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001ee0:	2b28      	cmp	r3, #40	; 0x28
 8001ee2:	d15b      	bne.n	8001f9c <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d002      	beq.n	8001ef0 <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 8001eea:	88fb      	ldrh	r3, [r7, #6]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d101      	bne.n	8001ef4 <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e054      	b.n	8001f9e <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d101      	bne.n	8001f02 <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 8001efe:	2302      	movs	r3, #2
 8001f00:	e04d      	b.n	8001f9e <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2201      	movs	r2, #1
 8001f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d007      	beq.n	8001f28 <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f042 0201 	orr.w	r2, r2, #1
 8001f26:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f36:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	222a      	movs	r2, #42	; 0x2a
 8001f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2220      	movs	r2, #32
 8001f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	68ba      	ldr	r2, [r7, #8]
 8001f52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	88fa      	ldrh	r2, [r7, #6]
 8001f58:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	617b      	str	r3, [r7, #20]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	695b      	ldr	r3, [r3, #20]
 8001f74:	617b      	str	r3, [r7, #20]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	617b      	str	r3, [r7, #20]
 8001f7e:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	685a      	ldr	r2, [r3, #4]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001f96:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	e000      	b.n	8001f9e <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8001f9c:	2302      	movs	r3, #2
  }
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	371c      	adds	r7, #28
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bc80      	pop	{r7}
 8001fa6:	4770      	bx	lr

08001fa8 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2b20      	cmp	r3, #32
 8001fba:	d124      	bne.n	8002006 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2228      	movs	r2, #40	; 0x28
 8001fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d007      	beq.n	8001fe2 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f042 0201 	orr.w	r2, r2, #1
 8001fe0:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ff0:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	685a      	ldr	r2, [r3, #4]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002000:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8002002:	2300      	movs	r3, #0
 8002004:	e000      	b.n	8002008 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8002006:	2302      	movs	r3, #2
  }
}
 8002008:	4618      	mov	r0, r3
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	bc80      	pop	{r7}
 8002010:	4770      	bx	lr

08002012 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b088      	sub	sp, #32
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800201a:	2300      	movs	r3, #0
 800201c:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202a:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002032:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800203a:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800203c:	7bfb      	ldrb	r3, [r7, #15]
 800203e:	2b10      	cmp	r3, #16
 8002040:	d003      	beq.n	800204a <HAL_I2C_EV_IRQHandler+0x38>
 8002042:	7bfb      	ldrb	r3, [r7, #15]
 8002044:	2b40      	cmp	r3, #64	; 0x40
 8002046:	f040 80b6 	bne.w	80021b6 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	695b      	ldr	r3, [r3, #20]
 8002058:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	2b00      	cmp	r3, #0
 8002062:	d10d      	bne.n	8002080 <HAL_I2C_EV_IRQHandler+0x6e>
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800206a:	d003      	beq.n	8002074 <HAL_I2C_EV_IRQHandler+0x62>
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002072:	d101      	bne.n	8002078 <HAL_I2C_EV_IRQHandler+0x66>
 8002074:	2301      	movs	r3, #1
 8002076:	e000      	b.n	800207a <HAL_I2C_EV_IRQHandler+0x68>
 8002078:	2300      	movs	r3, #0
 800207a:	2b01      	cmp	r3, #1
 800207c:	f000 8127 	beq.w	80022ce <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00c      	beq.n	80020a4 <HAL_I2C_EV_IRQHandler+0x92>
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	0a5b      	lsrs	r3, r3, #9
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b00      	cmp	r3, #0
 8002094:	d006      	beq.n	80020a4 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f001 fb4d 	bl	8003736 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 fcdb 	bl	8002a58 <I2C_Master_SB>
 80020a2:	e087      	b.n	80021b4 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	08db      	lsrs	r3, r3, #3
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d009      	beq.n	80020c4 <HAL_I2C_EV_IRQHandler+0xb2>
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	0a5b      	lsrs	r3, r3, #9
 80020b4:	f003 0301 	and.w	r3, r3, #1
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d003      	beq.n	80020c4 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f000 fd50 	bl	8002b62 <I2C_Master_ADD10>
 80020c2:	e077      	b.n	80021b4 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	085b      	lsrs	r3, r3, #1
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d009      	beq.n	80020e4 <HAL_I2C_EV_IRQHandler+0xd2>
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	0a5b      	lsrs	r3, r3, #9
 80020d4:	f003 0301 	and.w	r3, r3, #1
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d003      	beq.n	80020e4 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 fd69 	bl	8002bb4 <I2C_Master_ADDR>
 80020e2:	e067      	b.n	80021b4 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	089b      	lsrs	r3, r3, #2
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d030      	beq.n	8002152 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020fe:	f000 80e8 	beq.w	80022d2 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	09db      	lsrs	r3, r3, #7
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	2b00      	cmp	r3, #0
 800210c:	d00f      	beq.n	800212e <HAL_I2C_EV_IRQHandler+0x11c>
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	0a9b      	lsrs	r3, r3, #10
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	2b00      	cmp	r3, #0
 8002118:	d009      	beq.n	800212e <HAL_I2C_EV_IRQHandler+0x11c>
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	089b      	lsrs	r3, r3, #2
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b00      	cmp	r3, #0
 8002124:	d103      	bne.n	800212e <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 f9bc 	bl	80024a4 <I2C_MasterTransmit_TXE>
 800212c:	e042      	b.n	80021b4 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	089b      	lsrs	r3, r3, #2
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 80cb 	beq.w	80022d2 <HAL_I2C_EV_IRQHandler+0x2c0>
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	0a5b      	lsrs	r3, r3, #9
 8002140:	f003 0301 	and.w	r3, r3, #1
 8002144:	2b00      	cmp	r3, #0
 8002146:	f000 80c4 	beq.w	80022d2 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 faa2 	bl	8002694 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002150:	e0bf      	b.n	80022d2 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800215c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002160:	f000 80b7 	beq.w	80022d2 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	099b      	lsrs	r3, r3, #6
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	2b00      	cmp	r3, #0
 800216e:	d00f      	beq.n	8002190 <HAL_I2C_EV_IRQHandler+0x17e>
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	0a9b      	lsrs	r3, r3, #10
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	2b00      	cmp	r3, #0
 800217a:	d009      	beq.n	8002190 <HAL_I2C_EV_IRQHandler+0x17e>
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	089b      	lsrs	r3, r3, #2
 8002180:	f003 0301 	and.w	r3, r3, #1
 8002184:	2b00      	cmp	r3, #0
 8002186:	d103      	bne.n	8002190 <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f000 faf9 	bl	8002780 <I2C_MasterReceive_RXNE>
 800218e:	e011      	b.n	80021b4 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	089b      	lsrs	r3, r3, #2
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	2b00      	cmp	r3, #0
 800219a:	f000 809a 	beq.w	80022d2 <HAL_I2C_EV_IRQHandler+0x2c0>
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	0a5b      	lsrs	r3, r3, #9
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f000 8093 	beq.w	80022d2 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f000 fb69 	bl	8002884 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021b2:	e08e      	b.n	80022d2 <HAL_I2C_EV_IRQHandler+0x2c0>
 80021b4:	e08d      	b.n	80022d2 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d004      	beq.n	80021c8 <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	695b      	ldr	r3, [r3, #20]
 80021c4:	61fb      	str	r3, [r7, #28]
 80021c6:	e007      	b.n	80021d8 <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	085b      	lsrs	r3, r3, #1
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d012      	beq.n	800220a <HAL_I2C_EV_IRQHandler+0x1f8>
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	0a5b      	lsrs	r3, r3, #9
 80021e8:	f003 0301 	and.w	r3, r3, #1
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d00c      	beq.n	800220a <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d003      	beq.n	8002200 <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002200:	69b9      	ldr	r1, [r7, #24]
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 ff2d 	bl	8003062 <I2C_Slave_ADDR>
 8002208:	e066      	b.n	80022d8 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	091b      	lsrs	r3, r3, #4
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b00      	cmp	r3, #0
 8002214:	d009      	beq.n	800222a <HAL_I2C_EV_IRQHandler+0x218>
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	0a5b      	lsrs	r3, r3, #9
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	2b00      	cmp	r3, #0
 8002220:	d003      	beq.n	800222a <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 ff62 	bl	80030ec <I2C_Slave_STOPF>
 8002228:	e056      	b.n	80022d8 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800222a:	7bbb      	ldrb	r3, [r7, #14]
 800222c:	2b21      	cmp	r3, #33	; 0x21
 800222e:	d002      	beq.n	8002236 <HAL_I2C_EV_IRQHandler+0x224>
 8002230:	7bbb      	ldrb	r3, [r7, #14]
 8002232:	2b29      	cmp	r3, #41	; 0x29
 8002234:	d125      	bne.n	8002282 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	09db      	lsrs	r3, r3, #7
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00f      	beq.n	8002262 <HAL_I2C_EV_IRQHandler+0x250>
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	0a9b      	lsrs	r3, r3, #10
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	2b00      	cmp	r3, #0
 800224c:	d009      	beq.n	8002262 <HAL_I2C_EV_IRQHandler+0x250>
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	089b      	lsrs	r3, r3, #2
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b00      	cmp	r3, #0
 8002258:	d103      	bne.n	8002262 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f000 fe45 	bl	8002eea <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002260:	e039      	b.n	80022d6 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	089b      	lsrs	r3, r3, #2
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	2b00      	cmp	r3, #0
 800226c:	d033      	beq.n	80022d6 <HAL_I2C_EV_IRQHandler+0x2c4>
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	0a5b      	lsrs	r3, r3, #9
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b00      	cmp	r3, #0
 8002278:	d02d      	beq.n	80022d6 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 fe72 	bl	8002f64 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002280:	e029      	b.n	80022d6 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	099b      	lsrs	r3, r3, #6
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00f      	beq.n	80022ae <HAL_I2C_EV_IRQHandler+0x29c>
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	0a9b      	lsrs	r3, r3, #10
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b00      	cmp	r3, #0
 8002298:	d009      	beq.n	80022ae <HAL_I2C_EV_IRQHandler+0x29c>
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	089b      	lsrs	r3, r3, #2
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d103      	bne.n	80022ae <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 fe7c 	bl	8002fa4 <I2C_SlaveReceive_RXNE>
 80022ac:	e014      	b.n	80022d8 <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	089b      	lsrs	r3, r3, #2
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00e      	beq.n	80022d8 <HAL_I2C_EV_IRQHandler+0x2c6>
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	0a5b      	lsrs	r3, r3, #9
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d008      	beq.n	80022d8 <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f000 feaa 	bl	8003020 <I2C_SlaveReceive_BTF>
 80022cc:	e004      	b.n	80022d8 <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 80022ce:	bf00      	nop
 80022d0:	e002      	b.n	80022d8 <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80022d2:	bf00      	nop
 80022d4:	e000      	b.n	80022d8 <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80022d6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80022d8:	3720      	adds	r7, #32
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b08a      	sub	sp, #40	; 0x28
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	695b      	ldr	r3, [r3, #20]
 80022ec:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80022f6:	2300      	movs	r3, #0
 80022f8:	627b      	str	r3, [r7, #36]	; 0x24

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80022fa:	6a3b      	ldr	r3, [r7, #32]
 80022fc:	0a1b      	lsrs	r3, r3, #8
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b00      	cmp	r3, #0
 8002304:	d016      	beq.n	8002334 <HAL_I2C_ER_IRQHandler+0x56>
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	0a1b      	lsrs	r3, r3, #8
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b00      	cmp	r3, #0
 8002310:	d010      	beq.n	8002334 <HAL_I2C_ER_IRQHandler+0x56>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002322:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002332:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002334:	6a3b      	ldr	r3, [r7, #32]
 8002336:	0a5b      	lsrs	r3, r3, #9
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	2b00      	cmp	r3, #0
 800233e:	d00e      	beq.n	800235e <HAL_I2C_ER_IRQHandler+0x80>
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	0a1b      	lsrs	r3, r3, #8
 8002344:	f003 0301 	and.w	r3, r3, #1
 8002348:	2b00      	cmp	r3, #0
 800234a:	d008      	beq.n	800235e <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	f043 0302 	orr.w	r3, r3, #2
 8002352:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800235c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800235e:	6a3b      	ldr	r3, [r7, #32]
 8002360:	0a9b      	lsrs	r3, r3, #10
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b00      	cmp	r3, #0
 8002368:	d041      	beq.n	80023ee <HAL_I2C_ER_IRQHandler+0x110>
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	0a1b      	lsrs	r3, r3, #8
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	2b00      	cmp	r3, #0
 8002374:	d03b      	beq.n	80023ee <HAL_I2C_ER_IRQHandler+0x110>
  {
    tmp1 = hi2c->Mode;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800237c:	76fb      	strb	r3, [r7, #27]
    tmp2 = hi2c->XferCount;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002382:	b29b      	uxth	r3, r3
 8002384:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800238c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002394:	7efb      	ldrb	r3, [r7, #27]
 8002396:	2b20      	cmp	r3, #32
 8002398:	d112      	bne.n	80023c0 <HAL_I2C_ER_IRQHandler+0xe2>
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d10f      	bne.n	80023c0 <HAL_I2C_ER_IRQHandler+0xe2>
 80023a0:	7cfb      	ldrb	r3, [r7, #19]
 80023a2:	2b21      	cmp	r3, #33	; 0x21
 80023a4:	d008      	beq.n	80023b8 <HAL_I2C_ER_IRQHandler+0xda>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80023a6:	7cfb      	ldrb	r3, [r7, #19]
 80023a8:	2b29      	cmp	r3, #41	; 0x29
 80023aa:	d005      	beq.n	80023b8 <HAL_I2C_ER_IRQHandler+0xda>
 80023ac:	7cfb      	ldrb	r3, [r7, #19]
 80023ae:	2b28      	cmp	r3, #40	; 0x28
 80023b0:	d106      	bne.n	80023c0 <HAL_I2C_ER_IRQHandler+0xe2>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2b21      	cmp	r3, #33	; 0x21
 80023b6:	d103      	bne.n	80023c0 <HAL_I2C_ER_IRQHandler+0xe2>
    {
      I2C_Slave_AF(hi2c);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f000 ffc7 	bl	800334c <I2C_Slave_AF>
 80023be:	e016      	b.n	80023ee <HAL_I2C_ER_IRQHandler+0x110>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80023c8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80023ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023cc:	f043 0304 	orr.w	r3, r3, #4
 80023d0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b10      	cmp	r3, #16
 80023dc:	d107      	bne.n	80023ee <HAL_I2C_ER_IRQHandler+0x110>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023ec:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80023ee:	6a3b      	ldr	r3, [r7, #32]
 80023f0:	0adb      	lsrs	r3, r3, #11
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00e      	beq.n	8002418 <HAL_I2C_ER_IRQHandler+0x13a>
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	0a1b      	lsrs	r3, r3, #8
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	d008      	beq.n	8002418 <HAL_I2C_ER_IRQHandler+0x13a>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002408:	f043 0308 	orr.w	r3, r3, #8
 800240c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002416:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241a:	2b00      	cmp	r3, #0
 800241c:	d008      	beq.n	8002430 <HAL_I2C_ER_IRQHandler+0x152>
  {
    hi2c->ErrorCode |= error;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002424:	431a      	orrs	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 fffe 	bl	800342c <I2C_ITError>
  }
}
 8002430:	bf00      	nop
 8002432:	3728      	adds	r7, #40	; 0x28
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr

0800244a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800244a:	b480      	push	{r7}
 800244c:	b083      	sub	sp, #12
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002452:	bf00      	nop
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr

0800245c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	bc80      	pop	{r7}
 800246c:	4770      	bx	lr

0800246e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr

08002480 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	bc80      	pop	{r7}
 8002490:	4770      	bx	lr

08002492 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002492:	b480      	push	{r7}
 8002494:	b083      	sub	sp, #12
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	bc80      	pop	{r7}
 80024a2:	4770      	bx	lr

080024a4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024b2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024ba:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d150      	bne.n	800256c <I2C_MasterTransmit_TXE+0xc8>
 80024ca:	7bfb      	ldrb	r3, [r7, #15]
 80024cc:	2b21      	cmp	r3, #33	; 0x21
 80024ce:	d14d      	bne.n	800256c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	2b08      	cmp	r3, #8
 80024d4:	d01d      	beq.n	8002512 <I2C_MasterTransmit_TXE+0x6e>
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	2b20      	cmp	r3, #32
 80024da:	d01a      	beq.n	8002512 <I2C_MasterTransmit_TXE+0x6e>
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80024e2:	d016      	beq.n	8002512 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	685a      	ldr	r2, [r3, #4]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80024f2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2211      	movs	r2, #17
 80024f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2220      	movs	r2, #32
 8002506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7ff ff94 	bl	8002438 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002510:	e0bc      	b.n	800268c <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002520:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002530:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2220      	movs	r2, #32
 800253c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b40      	cmp	r3, #64	; 0x40
 800254a:	d107      	bne.n	800255c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f7ff ff81 	bl	800245c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800255a:	e097      	b.n	800268c <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f7ff ff67 	bl	8002438 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800256a:	e08f      	b.n	800268c <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800256c:	7bfb      	ldrb	r3, [r7, #15]
 800256e:	2b21      	cmp	r3, #33	; 0x21
 8002570:	d007      	beq.n	8002582 <I2C_MasterTransmit_TXE+0xde>
 8002572:	7bbb      	ldrb	r3, [r7, #14]
 8002574:	2b40      	cmp	r3, #64	; 0x40
 8002576:	f040 8089 	bne.w	800268c <I2C_MasterTransmit_TXE+0x1e8>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800257a:	7bfb      	ldrb	r3, [r7, #15]
 800257c:	2b22      	cmp	r3, #34	; 0x22
 800257e:	f040 8085 	bne.w	800268c <I2C_MasterTransmit_TXE+0x1e8>
  {
    if (hi2c->XferCount == 0U)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002586:	b29b      	uxth	r3, r3
 8002588:	2b00      	cmp	r3, #0
 800258a:	d108      	bne.n	800259e <I2C_MasterTransmit_TXE+0xfa>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800259a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800259c:	e076      	b.n	800268c <I2C_MasterTransmit_TXE+0x1e8>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b40      	cmp	r3, #64	; 0x40
 80025a8:	d15d      	bne.n	8002666 <I2C_MasterTransmit_TXE+0x1c2>
        if (hi2c->EventCount == 0U)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d11d      	bne.n	80025ee <I2C_MasterTransmit_TXE+0x14a>
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d10b      	bne.n	80025d2 <I2C_MasterTransmit_TXE+0x12e>
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025be:	b2da      	uxtb	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2U;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025ca:	1c9a      	adds	r2, r3, #2
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	651a      	str	r2, [r3, #80]	; 0x50
}
 80025d0:	e05c      	b.n	800268c <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	121b      	asrs	r3, r3, #8
 80025da:	b2da      	uxtb	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	611a      	str	r2, [r3, #16]
            hi2c->EventCount++;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025e6:	1c5a      	adds	r2, r3, #1
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	651a      	str	r2, [r3, #80]	; 0x50
}
 80025ec:	e04e      	b.n	800268c <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 1U)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d10b      	bne.n	800260e <I2C_MasterTransmit_TXE+0x16a>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025fa:	b2da      	uxtb	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	611a      	str	r2, [r3, #16]
          hi2c->EventCount++;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002606:	1c5a      	adds	r2, r3, #1
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800260c:	e03e      	b.n	800268c <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 2U)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002612:	2b02      	cmp	r3, #2
 8002614:	d13a      	bne.n	800268c <I2C_MasterTransmit_TXE+0x1e8>
          if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b22      	cmp	r3, #34	; 0x22
 8002620:	d108      	bne.n	8002634 <I2C_MasterTransmit_TXE+0x190>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002630:	601a      	str	r2, [r3, #0]
}
 8002632:	e02b      	b.n	800268c <I2C_MasterTransmit_TXE+0x1e8>
          else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800263a:	b2db      	uxtb	r3, r3
 800263c:	2b21      	cmp	r3, #33	; 0x21
 800263e:	d125      	bne.n	800268c <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002644:	781a      	ldrb	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	611a      	str	r2, [r3, #16]
            hi2c->pBuffPtr++;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002650:	1c5a      	adds	r2, r3, #1
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	625a      	str	r2, [r3, #36]	; 0x24
            hi2c->XferCount--;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800265a:	b29b      	uxth	r3, r3
 800265c:	3b01      	subs	r3, #1
 800265e:	b29a      	uxth	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002664:	e012      	b.n	800268c <I2C_MasterTransmit_TXE+0x1e8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266a:	781a      	ldrb	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002676:	1c5a      	adds	r2, r3, #1
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002680:	b29b      	uxth	r3, r3
 8002682:	3b01      	subs	r3, #1
 8002684:	b29a      	uxth	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800268a:	e7ff      	b.n	800268c <I2C_MasterTransmit_TXE+0x1e8>
 800268c:	bf00      	nop
 800268e:	3710      	adds	r7, #16
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b21      	cmp	r3, #33	; 0x21
 80026ac:	d164      	bne.n	8002778 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d012      	beq.n	80026de <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026bc:	781a      	ldrb	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c8:	1c5a      	adds	r2, r3, #1
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	3b01      	subs	r3, #1
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	855a      	strh	r2, [r3, #42]	; 0x2a
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
        }
      }
    }
  }
}
 80026dc:	e04c      	b.n	8002778 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2b08      	cmp	r3, #8
 80026e2:	d01d      	beq.n	8002720 <I2C_MasterTransmit_BTF+0x8c>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2b20      	cmp	r3, #32
 80026e8:	d01a      	beq.n	8002720 <I2C_MasterTransmit_BTF+0x8c>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80026f0:	d016      	beq.n	8002720 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	685a      	ldr	r2, [r3, #4]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002700:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2211      	movs	r2, #17
 8002706:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2220      	movs	r2, #32
 8002714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f7ff fe8d 	bl	8002438 <HAL_I2C_MasterTxCpltCallback>
}
 800271e:	e02b      	b.n	8002778 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	685a      	ldr	r2, [r3, #4]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800272e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800273e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2220      	movs	r2, #32
 800274a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b40      	cmp	r3, #64	; 0x40
 8002758:	d107      	bne.n	800276a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7ff fe7a 	bl	800245c <HAL_I2C_MemTxCpltCallback>
}
 8002768:	e006      	b.n	8002778 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7ff fe60 	bl	8002438 <HAL_I2C_MasterTxCpltCallback>
}
 8002778:	bf00      	nop
 800277a:	3710      	adds	r7, #16
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2b22      	cmp	r3, #34	; 0x22
 8002792:	d173      	bne.n	800287c <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002798:	b29b      	uxth	r3, r3
 800279a:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2b03      	cmp	r3, #3
 80027a0:	d920      	bls.n	80027e4 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	691a      	ldr	r2, [r3, #16]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ac:	b2d2      	uxtb	r2, r2
 80027ae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b4:	1c5a      	adds	r2, r3, #1
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027be:	b29b      	uxth	r3, r3
 80027c0:	3b01      	subs	r3, #1
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	2b03      	cmp	r3, #3
 80027d0:	d154      	bne.n	800287c <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	685a      	ldr	r2, [r3, #4]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027e0:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80027e2:	e04b      	b.n	800287c <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d047      	beq.n	800287c <I2C_MasterReceive_RXNE+0xfc>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d002      	beq.n	80027f8 <I2C_MasterReceive_RXNE+0x78>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d141      	bne.n	800287c <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002806:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	685a      	ldr	r2, [r3, #4]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002816:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	691a      	ldr	r2, [r3, #16]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002822:	b2d2      	uxtb	r2, r2
 8002824:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282a:	1c5a      	adds	r2, r3, #1
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002834:	b29b      	uxth	r3, r3
 8002836:	3b01      	subs	r3, #1
 8002838:	b29a      	uxth	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2220      	movs	r2, #32
 8002842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b40      	cmp	r3, #64	; 0x40
 8002850:	d10a      	bne.n	8002868 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f7ff fe04 	bl	800246e <HAL_I2C_MemRxCpltCallback>
}
 8002866:	e009      	b.n	800287c <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2212      	movs	r2, #18
 8002874:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7ff fde7 	bl	800244a <HAL_I2C_MasterRxCpltCallback>
}
 800287c:	bf00      	nop
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002890:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002896:	b29b      	uxth	r3, r3
 8002898:	2b04      	cmp	r3, #4
 800289a:	d11b      	bne.n	80028d4 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	685a      	ldr	r2, [r3, #4]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028aa:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	691a      	ldr	r2, [r3, #16]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b6:	b2d2      	uxtb	r2, r2
 80028b8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028be:	1c5a      	adds	r2, r3, #1
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	3b01      	subs	r3, #1
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80028d2:	e0bd      	b.n	8002a50 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d8:	b29b      	uxth	r3, r3
 80028da:	2b03      	cmp	r3, #3
 80028dc:	d129      	bne.n	8002932 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028ec:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2b04      	cmp	r3, #4
 80028f2:	d00a      	beq.n	800290a <I2C_MasterReceive_BTF+0x86>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d007      	beq.n	800290a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002908:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	691a      	ldr	r2, [r3, #16]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002914:	b2d2      	uxtb	r2, r2
 8002916:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291c:	1c5a      	adds	r2, r3, #1
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002926:	b29b      	uxth	r3, r3
 8002928:	3b01      	subs	r3, #1
 800292a:	b29a      	uxth	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002930:	e08e      	b.n	8002a50 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002936:	b29b      	uxth	r3, r3
 8002938:	2b02      	cmp	r3, #2
 800293a:	d176      	bne.n	8002a2a <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d002      	beq.n	8002948 <I2C_MasterReceive_BTF+0xc4>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2b10      	cmp	r3, #16
 8002946:	d108      	bne.n	800295a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	e019      	b.n	800298e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2b04      	cmp	r3, #4
 800295e:	d002      	beq.n	8002966 <I2C_MasterReceive_BTF+0xe2>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2b02      	cmp	r3, #2
 8002964:	d108      	bne.n	8002978 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002974:	601a      	str	r2, [r3, #0]
 8002976:	e00a      	b.n	800298e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2b10      	cmp	r3, #16
 800297c:	d007      	beq.n	800298e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800298c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	691a      	ldr	r2, [r3, #16]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002998:	b2d2      	uxtb	r2, r2
 800299a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a0:	1c5a      	adds	r2, r3, #1
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	3b01      	subs	r3, #1
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	691a      	ldr	r2, [r3, #16]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c6:	1c5a      	adds	r2, r3, #1
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	3b01      	subs	r3, #1
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	685a      	ldr	r2, [r3, #4]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80029e8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2220      	movs	r2, #32
 80029ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b40      	cmp	r3, #64	; 0x40
 80029fc:	d10a      	bne.n	8002a14 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f7ff fd2e 	bl	800246e <HAL_I2C_MemRxCpltCallback>
}
 8002a12:	e01d      	b.n	8002a50 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2212      	movs	r2, #18
 8002a20:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f7ff fd11 	bl	800244a <HAL_I2C_MasterRxCpltCallback>
}
 8002a28:	e012      	b.n	8002a50 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	691a      	ldr	r2, [r3, #16]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a34:	b2d2      	uxtb	r2, r2
 8002a36:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3c:	1c5a      	adds	r2, r3, #1
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002a50:	bf00      	nop
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2b40      	cmp	r3, #64	; 0x40
 8002a6a:	d117      	bne.n	8002a9c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d109      	bne.n	8002a88 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a84:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002a86:	e067      	b.n	8002b58 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	f043 0301 	orr.w	r3, r3, #1
 8002a92:	b2da      	uxtb	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	611a      	str	r2, [r3, #16]
}
 8002a9a:	e05d      	b.n	8002b58 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002aa4:	d133      	bne.n	8002b0e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b21      	cmp	r3, #33	; 0x21
 8002ab0:	d109      	bne.n	8002ac6 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	461a      	mov	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ac2:	611a      	str	r2, [r3, #16]
 8002ac4:	e008      	b.n	8002ad8 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	f043 0301 	orr.w	r3, r3, #1
 8002ad0:	b2da      	uxtb	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	611a      	str	r2, [r3, #16]
      if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d103      	bne.n	8002ae8 <I2C_Master_SB+0x90>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d037      	beq.n	8002b58 <I2C_Master_SB+0x100>
        if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d104      	bne.n	8002afc <I2C_Master_SB+0xa4>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d02d      	beq.n	8002b58 <I2C_Master_SB+0x100>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	685a      	ldr	r2, [r3, #4]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b0a:	605a      	str	r2, [r3, #4]
}
 8002b0c:	e024      	b.n	8002b58 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d10e      	bne.n	8002b34 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	11db      	asrs	r3, r3, #7
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	f003 0306 	and.w	r3, r3, #6
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	f063 030f 	orn	r3, r3, #15
 8002b2a:	b2da      	uxtb	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	611a      	str	r2, [r3, #16]
}
 8002b32:	e011      	b.n	8002b58 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d10d      	bne.n	8002b58 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	11db      	asrs	r3, r3, #7
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	f003 0306 	and.w	r3, r3, #6
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	f063 030e 	orn	r3, r3, #14
 8002b50:	b2da      	uxtb	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	611a      	str	r2, [r3, #16]
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bc80      	pop	{r7}
 8002b60:	4770      	bx	lr

08002b62 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002b62:	b480      	push	{r7}
 8002b64:	b083      	sub	sp, #12
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d103      	bne.n	8002b86 <I2C_Master_ADD10+0x24>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d011      	beq.n	8002baa <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d104      	bne.n	8002b9a <I2C_Master_ADD10+0x38>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d007      	beq.n	8002baa <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ba8:	605a      	str	r2, [r3, #4]
    }
  }
}
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bc80      	pop	{r7}
 8002bb2:	4770      	bx	lr

08002bb4 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b091      	sub	sp, #68	; 0x44
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bc2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bca:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd0:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b22      	cmp	r3, #34	; 0x22
 8002bdc:	f040 8174 	bne.w	8002ec8 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d10f      	bne.n	8002c08 <I2C_Master_ADDR+0x54>
 8002be8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002bec:	2b40      	cmp	r3, #64	; 0x40
 8002bee:	d10b      	bne.n	8002c08 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	633b      	str	r3, [r7, #48]	; 0x30
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	633b      	str	r3, [r7, #48]	; 0x30
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	633b      	str	r3, [r7, #48]	; 0x30
 8002c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c06:	e16b      	b.n	8002ee0 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d11d      	bne.n	8002c4c <I2C_Master_ADDR+0x98>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002c18:	d118      	bne.n	8002c4c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	695b      	ldr	r3, [r3, #20]
 8002c24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c3e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c44:	1c5a      	adds	r2, r3, #1
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	651a      	str	r2, [r3, #80]	; 0x50
 8002c4a:	e149      	b.n	8002ee0 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d113      	bne.n	8002c7e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c56:	2300      	movs	r3, #0
 8002c58:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	e120      	b.n	8002ec0 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	f040 808a 	bne.w	8002d9e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c90:	d137      	bne.n	8002d02 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ca0:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cb0:	d113      	bne.n	8002cda <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cc0:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	695b      	ldr	r3, [r3, #20]
 8002ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	627b      	str	r3, [r7, #36]	; 0x24
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd8:	e0f2      	b.n	8002ec0 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cda:	2300      	movs	r3, #0
 8002cdc:	623b      	str	r3, [r7, #32]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	623b      	str	r3, [r7, #32]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	623b      	str	r3, [r7, #32]
 8002cee:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	e0de      	b.n	8002ec0 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d04:	2b08      	cmp	r3, #8
 8002d06:	d02e      	beq.n	8002d66 <I2C_Master_ADDR+0x1b2>
 8002d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d0a:	2b20      	cmp	r3, #32
 8002d0c:	d02b      	beq.n	8002d66 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d10:	2b12      	cmp	r3, #18
 8002d12:	d102      	bne.n	8002d1a <I2C_Master_ADDR+0x166>
 8002d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d125      	bne.n	8002d66 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d1c:	2b04      	cmp	r3, #4
 8002d1e:	d00e      	beq.n	8002d3e <I2C_Master_ADDR+0x18a>
 8002d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d00b      	beq.n	8002d3e <I2C_Master_ADDR+0x18a>
 8002d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d28:	2b10      	cmp	r3, #16
 8002d2a:	d008      	beq.n	8002d3e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	e007      	b.n	8002d4e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d4c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d4e:	2300      	movs	r3, #0
 8002d50:	61fb      	str	r3, [r7, #28]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	695b      	ldr	r3, [r3, #20]
 8002d58:	61fb      	str	r3, [r7, #28]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	61fb      	str	r3, [r7, #28]
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	e0ac      	b.n	8002ec0 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d74:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d76:	2300      	movs	r3, #0
 8002d78:	61bb      	str	r3, [r7, #24]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	695b      	ldr	r3, [r3, #20]
 8002d80:	61bb      	str	r3, [r7, #24]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	699b      	ldr	r3, [r3, #24]
 8002d88:	61bb      	str	r3, [r7, #24]
 8002d8a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	e090      	b.n	8002ec0 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d158      	bne.n	8002e5a <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002daa:	2b04      	cmp	r3, #4
 8002dac:	d021      	beq.n	8002df2 <I2C_Master_ADDR+0x23e>
 8002dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d01e      	beq.n	8002df2 <I2C_Master_ADDR+0x23e>
 8002db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002db6:	2b10      	cmp	r3, #16
 8002db8:	d01b      	beq.n	8002df2 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dc8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dca:	2300      	movs	r3, #0
 8002dcc:	617b      	str	r3, [r7, #20]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	695b      	ldr	r3, [r3, #20]
 8002dd4:	617b      	str	r3, [r7, #20]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	617b      	str	r3, [r7, #20]
 8002dde:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	e012      	b.n	8002e18 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e00:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e02:	2300      	movs	r3, #0
 8002e04:	613b      	str	r3, [r7, #16]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	695b      	ldr	r3, [r3, #20]
 8002e0c:	613b      	str	r3, [r7, #16]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	613b      	str	r3, [r7, #16]
 8002e16:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e26:	d14b      	bne.n	8002ec0 <I2C_Master_ADDR+0x30c>
 8002e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e2a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e2e:	d00b      	beq.n	8002e48 <I2C_Master_ADDR+0x294>
 8002e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d008      	beq.n	8002e48 <I2C_Master_ADDR+0x294>
 8002e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e38:	2b08      	cmp	r3, #8
 8002e3a:	d005      	beq.n	8002e48 <I2C_Master_ADDR+0x294>
 8002e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e3e:	2b10      	cmp	r3, #16
 8002e40:	d002      	beq.n	8002e48 <I2C_Master_ADDR+0x294>
 8002e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e44:	2b20      	cmp	r3, #32
 8002e46:	d13b      	bne.n	8002ec0 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002e56:	605a      	str	r2, [r3, #4]
 8002e58:	e032      	b.n	8002ec0 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e68:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e78:	d117      	bne.n	8002eaa <I2C_Master_ADDR+0x2f6>
 8002e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e7c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e80:	d00b      	beq.n	8002e9a <I2C_Master_ADDR+0x2e6>
 8002e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d008      	beq.n	8002e9a <I2C_Master_ADDR+0x2e6>
 8002e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e8a:	2b08      	cmp	r3, #8
 8002e8c:	d005      	beq.n	8002e9a <I2C_Master_ADDR+0x2e6>
 8002e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e90:	2b10      	cmp	r3, #16
 8002e92:	d002      	beq.n	8002e9a <I2C_Master_ADDR+0x2e6>
 8002e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e96:	2b20      	cmp	r3, #32
 8002e98:	d107      	bne.n	8002eaa <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	685a      	ldr	r2, [r3, #4]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ea8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eaa:	2300      	movs	r3, #0
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	60fb      	str	r3, [r7, #12]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	60fb      	str	r3, [r7, #12]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002ec6:	e00b      	b.n	8002ee0 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ec8:	2300      	movs	r3, #0
 8002eca:	60bb      	str	r3, [r7, #8]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	60bb      	str	r3, [r7, #8]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	60bb      	str	r3, [r7, #8]
 8002edc:	68bb      	ldr	r3, [r7, #8]
}
 8002ede:	e7ff      	b.n	8002ee0 <I2C_Master_ADDR+0x32c>
 8002ee0:	bf00      	nop
 8002ee2:	3744      	adds	r7, #68	; 0x44
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bc80      	pop	{r7}
 8002ee8:	4770      	bx	lr

08002eea <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b084      	sub	sp, #16
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ef8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d02b      	beq.n	8002f5c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f08:	781a      	ldrb	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f14:	1c5a      	adds	r2, r3, #1
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	3b01      	subs	r3, #1
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d114      	bne.n	8002f5c <I2C_SlaveTransmit_TXE+0x72>
 8002f32:	7bfb      	ldrb	r3, [r7, #15]
 8002f34:	2b29      	cmp	r3, #41	; 0x29
 8002f36:	d111      	bne.n	8002f5c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f46:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2221      	movs	r2, #33	; 0x21
 8002f4c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2228      	movs	r2, #40	; 0x28
 8002f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7fd f9d6 	bl	8000308 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002f5c:	bf00      	nop
 8002f5e:	3710      	adds	r7, #16
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d011      	beq.n	8002f9a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7a:	781a      	ldrb	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f86:	1c5a      	adds	r2, r3, #1
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	3b01      	subs	r3, #1
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002f9a:	bf00      	nop
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bc80      	pop	{r7}
 8002fa2:	4770      	bx	lr

08002fa4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fb2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d02c      	beq.n	8003018 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	691a      	ldr	r2, [r3, #16]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc8:	b2d2      	uxtb	r2, r2
 8002fca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd0:	1c5a      	adds	r2, r3, #1
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d114      	bne.n	8003018 <I2C_SlaveReceive_RXNE+0x74>
 8002fee:	7bfb      	ldrb	r3, [r7, #15]
 8002ff0:	2b2a      	cmp	r3, #42	; 0x2a
 8002ff2:	d111      	bne.n	8003018 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	685a      	ldr	r2, [r3, #4]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003002:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2222      	movs	r2, #34	; 0x22
 8003008:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2228      	movs	r2, #40	; 0x28
 800300e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7fd f994 	bl	8000340 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003018:	bf00      	nop
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302c:	b29b      	uxth	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d012      	beq.n	8003058 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	691a      	ldr	r2, [r3, #16]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303c:	b2d2      	uxtb	r2, r2
 800303e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003044:	1c5a      	adds	r2, r3, #1
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800304e:	b29b      	uxth	r3, r3
 8003050:	3b01      	subs	r3, #1
 8003052:	b29a      	uxth	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	bc80      	pop	{r7}
 8003060:	4770      	bx	lr

08003062 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b084      	sub	sp, #16
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
 800306a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800306c:	2300      	movs	r3, #0
 800306e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003076:	b2db      	uxtb	r3, r3
 8003078:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800307c:	2b28      	cmp	r3, #40	; 0x28
 800307e:	d127      	bne.n	80030d0 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	685a      	ldr	r2, [r3, #4]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800308e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	089b      	lsrs	r3, r3, #2
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	2b00      	cmp	r3, #0
 800309a:	d101      	bne.n	80030a0 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800309c:	2301      	movs	r3, #1
 800309e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	09db      	lsrs	r3, r3, #7
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d103      	bne.n	80030b4 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	81bb      	strh	r3, [r7, #12]
 80030b2:	e002      	b.n	80030ba <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80030c2:	89ba      	ldrh	r2, [r7, #12]
 80030c4:	7bfb      	ldrb	r3, [r7, #15]
 80030c6:	4619      	mov	r1, r3
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f7fd f8eb 	bl	80002a4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80030ce:	e008      	b.n	80030e2 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f06f 0202 	mvn.w	r2, #2
 80030d8:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80030e2:	bf00      	nop
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
	...

080030ec <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030fa:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800310a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800310c:	2300      	movs	r3, #0
 800310e:	60bb      	str	r3, [r7, #8]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	60bb      	str	r3, [r7, #8]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f042 0201 	orr.w	r2, r2, #1
 8003126:	601a      	str	r2, [r3, #0]
 8003128:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003138:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003144:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003148:	d172      	bne.n	8003230 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800314a:	7bfb      	ldrb	r3, [r7, #15]
 800314c:	2b22      	cmp	r3, #34	; 0x22
 800314e:	d002      	beq.n	8003156 <I2C_Slave_STOPF+0x6a>
 8003150:	7bfb      	ldrb	r3, [r7, #15]
 8003152:	2b2a      	cmp	r3, #42	; 0x2a
 8003154:	d135      	bne.n	80031c2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	b29a      	uxth	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003168:	b29b      	uxth	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d005      	beq.n	800317a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003172:	f043 0204 	orr.w	r2, r3, #4
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	685a      	ldr	r2, [r3, #4]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003188:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800318e:	4618      	mov	r0, r3
 8003190:	f7fe fb80 	bl	8001894 <HAL_DMA_GetState>
 8003194:	4603      	mov	r3, r0
 8003196:	2b01      	cmp	r3, #1
 8003198:	d049      	beq.n	800322e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800319e:	4a69      	ldr	r2, [pc, #420]	; (8003344 <I2C_Slave_STOPF+0x258>)
 80031a0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7fe fafe 	bl	80017a8 <HAL_DMA_Abort_IT>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d03d      	beq.n	800322e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80031bc:	4610      	mov	r0, r2
 80031be:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80031c0:	e035      	b.n	800322e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d005      	beq.n	80031e6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031de:	f043 0204 	orr.w	r2, r3, #4
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031f4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7fe fb4a 	bl	8001894 <HAL_DMA_GetState>
 8003200:	4603      	mov	r3, r0
 8003202:	2b01      	cmp	r3, #1
 8003204:	d014      	beq.n	8003230 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800320a:	4a4e      	ldr	r2, [pc, #312]	; (8003344 <I2C_Slave_STOPF+0x258>)
 800320c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003212:	4618      	mov	r0, r3
 8003214:	f7fe fac8 	bl	80017a8 <HAL_DMA_Abort_IT>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d008      	beq.n	8003230 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003228:	4610      	mov	r0, r2
 800322a:	4798      	blx	r3
 800322c:	e000      	b.n	8003230 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800322e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003234:	b29b      	uxth	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d03e      	beq.n	80032b8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	695b      	ldr	r3, [r3, #20]
 8003240:	f003 0304 	and.w	r3, r3, #4
 8003244:	2b04      	cmp	r3, #4
 8003246:	d112      	bne.n	800326e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	691a      	ldr	r2, [r3, #16]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003252:	b2d2      	uxtb	r2, r2
 8003254:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325a:	1c5a      	adds	r2, r3, #1
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003264:	b29b      	uxth	r3, r3
 8003266:	3b01      	subs	r3, #1
 8003268:	b29a      	uxth	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003278:	2b40      	cmp	r3, #64	; 0x40
 800327a:	d112      	bne.n	80032a2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	691a      	ldr	r2, [r3, #16]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003286:	b2d2      	uxtb	r2, r2
 8003288:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328e:	1c5a      	adds	r2, r3, #1
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003298:	b29b      	uxth	r3, r3
 800329a:	3b01      	subs	r3, #1
 800329c:	b29a      	uxth	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d005      	beq.n	80032b8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b0:	f043 0204 	orr.w	r2, r3, #4
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d003      	beq.n	80032c8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 f8b3 	bl	800342c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80032c6:	e039      	b.n	800333c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80032c8:	7bfb      	ldrb	r3, [r7, #15]
 80032ca:	2b2a      	cmp	r3, #42	; 0x2a
 80032cc:	d109      	bne.n	80032e2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2228      	movs	r2, #40	; 0x28
 80032d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f7fd f82f 	bl	8000340 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b28      	cmp	r3, #40	; 0x28
 80032ec:	d111      	bne.n	8003312 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a15      	ldr	r2, [pc, #84]	; (8003348 <I2C_Slave_STOPF+0x25c>)
 80032f2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2220      	movs	r2, #32
 80032fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f7fd f848 	bl	80003a0 <HAL_I2C_ListenCpltCallback>
}
 8003310:	e014      	b.n	800333c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003316:	2b22      	cmp	r3, #34	; 0x22
 8003318:	d002      	beq.n	8003320 <I2C_Slave_STOPF+0x234>
 800331a:	7bfb      	ldrb	r3, [r7, #15]
 800331c:	2b22      	cmp	r3, #34	; 0x22
 800331e:	d10d      	bne.n	800333c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2220      	movs	r2, #32
 800332a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7fd f802 	bl	8000340 <HAL_I2C_SlaveRxCpltCallback>
}
 800333c:	bf00      	nop
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	08003659 	.word	0x08003659
 8003348:	ffff0000 	.word	0xffff0000

0800334c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800335a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003360:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	2b08      	cmp	r3, #8
 8003366:	d002      	beq.n	800336e <I2C_Slave_AF+0x22>
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	2b20      	cmp	r3, #32
 800336c:	d129      	bne.n	80033c2 <I2C_Slave_AF+0x76>
 800336e:	7bfb      	ldrb	r3, [r7, #15]
 8003370:	2b28      	cmp	r3, #40	; 0x28
 8003372:	d126      	bne.n	80033c2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a2c      	ldr	r2, [pc, #176]	; (8003428 <I2C_Slave_AF+0xdc>)
 8003378:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	685a      	ldr	r2, [r3, #4]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003388:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003392:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033a2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2220      	movs	r2, #32
 80033ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7fc fff0 	bl	80003a0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80033c0:	e02e      	b.n	8003420 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80033c2:	7bfb      	ldrb	r3, [r7, #15]
 80033c4:	2b21      	cmp	r3, #33	; 0x21
 80033c6:	d126      	bne.n	8003416 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a17      	ldr	r2, [pc, #92]	; (8003428 <I2C_Slave_AF+0xdc>)
 80033cc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2221      	movs	r2, #33	; 0x21
 80033d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2220      	movs	r2, #32
 80033d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	685a      	ldr	r2, [r3, #4]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80033f2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033fc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800340c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f7fc ff7a 	bl	8000308 <HAL_I2C_SlaveTxCpltCallback>
}
 8003414:	e004      	b.n	8003420 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800341e:	615a      	str	r2, [r3, #20]
}
 8003420:	bf00      	nop
 8003422:	3710      	adds	r7, #16
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	ffff0000 	.word	0xffff0000

0800342c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800343a:	73fb      	strb	r3, [r7, #15]

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003442:	b2db      	uxtb	r3, r3
 8003444:	2b10      	cmp	r3, #16
 8003446:	d10a      	bne.n	800345e <I2C_ITError+0x32>
 8003448:	7bfb      	ldrb	r3, [r7, #15]
 800344a:	2b22      	cmp	r3, #34	; 0x22
 800344c:	d107      	bne.n	800345e <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800345c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800345e:	7bfb      	ldrb	r3, [r7, #15]
 8003460:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003464:	2b28      	cmp	r3, #40	; 0x28
 8003466:	d107      	bne.n	8003478 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2228      	movs	r2, #40	; 0x28
 8003472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003476:	e015      	b.n	80034a4 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003482:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003486:	d006      	beq.n	8003496 <I2C_ITError+0x6a>
 8003488:	7bfb      	ldrb	r3, [r7, #15]
 800348a:	2b60      	cmp	r3, #96	; 0x60
 800348c:	d003      	beq.n	8003496 <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2220      	movs	r2, #32
 8003492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034b2:	d161      	bne.n	8003578 <I2C_ITError+0x14c>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	685a      	ldr	r2, [r3, #4]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034c2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d020      	beq.n	8003512 <I2C_ITError+0xe6>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034d4:	4a5e      	ldr	r2, [pc, #376]	; (8003650 <I2C_ITError+0x224>)
 80034d6:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034dc:	4618      	mov	r0, r3
 80034de:	f7fe f963 	bl	80017a8 <HAL_DMA_Abort_IT>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f000 8089 	beq.w	80035fc <I2C_ITError+0x1d0>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 0201 	bic.w	r2, r2, #1
 80034f8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2220      	movs	r2, #32
 80034fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800350c:	4610      	mov	r0, r2
 800350e:	4798      	blx	r3
 8003510:	e074      	b.n	80035fc <I2C_ITError+0x1d0>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003516:	4a4e      	ldr	r2, [pc, #312]	; (8003650 <I2C_ITError+0x224>)
 8003518:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800351e:	4618      	mov	r0, r3
 8003520:	f7fe f942 	bl	80017a8 <HAL_DMA_Abort_IT>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d068      	beq.n	80035fc <I2C_ITError+0x1d0>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	695b      	ldr	r3, [r3, #20]
 8003530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003534:	2b40      	cmp	r3, #64	; 0x40
 8003536:	d10b      	bne.n	8003550 <I2C_ITError+0x124>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	691a      	ldr	r2, [r3, #16]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003542:	b2d2      	uxtb	r2, r2
 8003544:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354a:	1c5a      	adds	r2, r3, #1
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 0201 	bic.w	r2, r2, #1
 800355e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2220      	movs	r2, #32
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003572:	4610      	mov	r0, r2
 8003574:	4798      	blx	r3
 8003576:	e041      	b.n	80035fc <I2C_ITError+0x1d0>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800357e:	b2db      	uxtb	r3, r3
 8003580:	2b60      	cmp	r3, #96	; 0x60
 8003582:	d125      	bne.n	80035d0 <I2C_ITError+0x1a4>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2220      	movs	r2, #32
 8003588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	695b      	ldr	r3, [r3, #20]
 8003598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800359c:	2b40      	cmp	r3, #64	; 0x40
 800359e:	d10b      	bne.n	80035b8 <I2C_ITError+0x18c>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	691a      	ldr	r2, [r3, #16]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035aa:	b2d2      	uxtb	r2, r2
 80035ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b2:	1c5a      	adds	r2, r3, #1
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 0201 	bic.w	r2, r2, #1
 80035c6:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f7fe ff62 	bl	8002492 <HAL_I2C_AbortCpltCallback>
 80035ce:	e015      	b.n	80035fc <I2C_ITError+0x1d0>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035da:	2b40      	cmp	r3, #64	; 0x40
 80035dc:	d10b      	bne.n	80035f6 <I2C_ITError+0x1ca>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	691a      	ldr	r2, [r3, #16]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e8:	b2d2      	uxtb	r2, r2
 80035ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f0:	1c5a      	adds	r2, r3, #1
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f7fe ff42 	bl	8002480 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  /* STOP Flag is not set after a NACK reception */
  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003602:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003608:	f003 0304 	and.w	r3, r3, #4
 800360c:	2b04      	cmp	r3, #4
 800360e:	d11b      	bne.n	8003648 <I2C_ITError+0x21c>
 8003610:	7bfb      	ldrb	r3, [r7, #15]
 8003612:	2b28      	cmp	r3, #40	; 0x28
 8003614:	d118      	bne.n	8003648 <I2C_ITError+0x21c>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	685a      	ldr	r2, [r3, #4]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003624:	605a      	str	r2, [r3, #4]

    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a0a      	ldr	r2, [pc, #40]	; (8003654 <I2C_ITError+0x228>)
 800362a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2220      	movs	r2, #32
 8003636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f7fc feac 	bl	80003a0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003648:	bf00      	nop
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	08003659 	.word	0x08003659
 8003654:	ffff0000 	.word	0xffff0000

08003658 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003664:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800366c:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  hi2c->hdmatx->XferCpltCallback = NULL;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003672:	2200      	movs	r2, #0
 8003674:	629a      	str	r2, [r3, #40]	; 0x28
  hi2c->hdmarx->XferCpltCallback = NULL;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367a:	2200      	movs	r2, #0
 800367c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800368c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003698:	2200      	movs	r2, #0
 800369a:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->hdmarx->XferAbortCallback = NULL;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a0:	2200      	movs	r2, #0
 80036a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f022 0201 	bic.w	r2, r2, #1
 80036b2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b60      	cmp	r3, #96	; 0x60
 80036be:	d10e      	bne.n	80036de <I2C_DMAAbort+0x86>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2220      	movs	r2, #32
 80036c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2200      	movs	r2, #0
 80036d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f7fe fedb 	bl	8002492 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80036dc:	e027      	b.n	800372e <I2C_DMAAbort+0xd6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80036de:	7afb      	ldrb	r3, [r7, #11]
 80036e0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80036e4:	2b28      	cmp	r3, #40	; 0x28
 80036e6:	d117      	bne.n	8003718 <I2C_DMAAbort+0xc0>
      __HAL_I2C_ENABLE(hi2c);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f042 0201 	orr.w	r2, r2, #1
 80036f6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003706:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2228      	movs	r2, #40	; 0x28
 8003712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003716:	e007      	b.n	8003728 <I2C_DMAAbort+0xd0>
      hi2c->State = HAL_I2C_STATE_READY;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2220      	movs	r2, #32
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f7fe fea9 	bl	8002480 <HAL_I2C_ErrorCallback>
}
 800372e:	bf00      	nop
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003736:	b480      	push	{r7}
 8003738:	b083      	sub	sp, #12
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003742:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003746:	d103      	bne.n	8003750 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800374e:	e007      	b.n	8003760 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003754:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003758:	d102      	bne.n	8003760 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2208      	movs	r2, #8
 800375e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	bc80      	pop	{r7}
 8003768:	4770      	bx	lr

0800376a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800376a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800376c:	b08b      	sub	sp, #44	; 0x2c
 800376e:	af06      	add	r7, sp, #24
 8003770:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d101      	bne.n	800377c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e0d3      	b.n	8003924 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8003782:	b2db      	uxtb	r3, r3
 8003784:	2b00      	cmp	r3, #0
 8003786:	d106      	bne.n	8003796 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f7fd fd2f 	bl	80011f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2203      	movs	r2, #3
 800379a:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f001 fdd9 	bl	800535a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	603b      	str	r3, [r7, #0]
 80037ae:	687e      	ldr	r6, [r7, #4]
 80037b0:	466d      	mov	r5, sp
 80037b2:	f106 0410 	add.w	r4, r6, #16
 80037b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037ba:	6823      	ldr	r3, [r4, #0]
 80037bc:	602b      	str	r3, [r5, #0]
 80037be:	1d33      	adds	r3, r6, #4
 80037c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037c2:	6838      	ldr	r0, [r7, #0]
 80037c4:	f001 fda2 	bl	800530c <USB_CoreInit>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d005      	beq.n	80037da <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2202      	movs	r2, #2
 80037d2:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e0a4      	b.n	8003924 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2100      	movs	r1, #0
 80037e0:	4618      	mov	r0, r3
 80037e2:	f001 fdd6 	bl	8005392 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037e6:	2300      	movs	r3, #0
 80037e8:	73fb      	strb	r3, [r7, #15]
 80037ea:	e035      	b.n	8003858 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80037ec:	7bfb      	ldrb	r3, [r7, #15]
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	015b      	lsls	r3, r3, #5
 80037f2:	4413      	add	r3, r2
 80037f4:	3329      	adds	r3, #41	; 0x29
 80037f6:	2201      	movs	r2, #1
 80037f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80037fa:	7bfb      	ldrb	r3, [r7, #15]
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	015b      	lsls	r3, r3, #5
 8003800:	4413      	add	r3, r2
 8003802:	3328      	adds	r3, #40	; 0x28
 8003804:	7bfa      	ldrb	r2, [r7, #15]
 8003806:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003808:	7bfb      	ldrb	r3, [r7, #15]
 800380a:	7bfa      	ldrb	r2, [r7, #15]
 800380c:	b291      	uxth	r1, r2
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	015b      	lsls	r3, r3, #5
 8003812:	4413      	add	r3, r2
 8003814:	3336      	adds	r3, #54	; 0x36
 8003816:	460a      	mov	r2, r1
 8003818:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800381a:	7bfb      	ldrb	r3, [r7, #15]
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	015b      	lsls	r3, r3, #5
 8003820:	4413      	add	r3, r2
 8003822:	332b      	adds	r3, #43	; 0x2b
 8003824:	2200      	movs	r2, #0
 8003826:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003828:	7bfb      	ldrb	r3, [r7, #15]
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	015b      	lsls	r3, r3, #5
 800382e:	4413      	add	r3, r2
 8003830:	3338      	adds	r3, #56	; 0x38
 8003832:	2200      	movs	r2, #0
 8003834:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003836:	7bfb      	ldrb	r3, [r7, #15]
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	015b      	lsls	r3, r3, #5
 800383c:	4413      	add	r3, r2
 800383e:	333c      	adds	r3, #60	; 0x3c
 8003840:	2200      	movs	r2, #0
 8003842:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003844:	7bfb      	ldrb	r3, [r7, #15]
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	3302      	adds	r3, #2
 800384a:	015b      	lsls	r3, r3, #5
 800384c:	4413      	add	r3, r2
 800384e:	2200      	movs	r2, #0
 8003850:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003852:	7bfb      	ldrb	r3, [r7, #15]
 8003854:	3301      	adds	r3, #1
 8003856:	73fb      	strb	r3, [r7, #15]
 8003858:	7bfa      	ldrb	r2, [r7, #15]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	429a      	cmp	r2, r3
 8003860:	d3c4      	bcc.n	80037ec <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003862:	2300      	movs	r3, #0
 8003864:	73fb      	strb	r3, [r7, #15]
 8003866:	e031      	b.n	80038cc <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003868:	7bfb      	ldrb	r3, [r7, #15]
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	015b      	lsls	r3, r3, #5
 800386e:	4413      	add	r3, r2
 8003870:	f203 1329 	addw	r3, r3, #297	; 0x129
 8003874:	2200      	movs	r2, #0
 8003876:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003878:	7bfb      	ldrb	r3, [r7, #15]
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	015b      	lsls	r3, r3, #5
 800387e:	4413      	add	r3, r2
 8003880:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003884:	7bfa      	ldrb	r2, [r7, #15]
 8003886:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003888:	7bfb      	ldrb	r3, [r7, #15]
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	015b      	lsls	r3, r3, #5
 800388e:	4413      	add	r3, r2
 8003890:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8003894:	2200      	movs	r2, #0
 8003896:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003898:	7bfb      	ldrb	r3, [r7, #15]
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	015b      	lsls	r3, r3, #5
 800389e:	4413      	add	r3, r2
 80038a0:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80038a4:	2200      	movs	r2, #0
 80038a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80038a8:	7bfb      	ldrb	r3, [r7, #15]
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	015b      	lsls	r3, r3, #5
 80038ae:	4413      	add	r3, r2
 80038b0:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80038b4:	2200      	movs	r2, #0
 80038b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80038b8:	7bfb      	ldrb	r3, [r7, #15]
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	330a      	adds	r3, #10
 80038be:	015b      	lsls	r3, r3, #5
 80038c0:	4413      	add	r3, r2
 80038c2:	2200      	movs	r2, #0
 80038c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038c6:	7bfb      	ldrb	r3, [r7, #15]
 80038c8:	3301      	adds	r3, #1
 80038ca:	73fb      	strb	r3, [r7, #15]
 80038cc:	7bfa      	ldrb	r2, [r7, #15]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d3c8      	bcc.n	8003868 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	603b      	str	r3, [r7, #0]
 80038dc:	687e      	ldr	r6, [r7, #4]
 80038de:	466d      	mov	r5, sp
 80038e0:	f106 0410 	add.w	r4, r6, #16
 80038e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038e8:	6823      	ldr	r3, [r4, #0]
 80038ea:	602b      	str	r3, [r5, #0]
 80038ec:	1d33      	adds	r3, r6, #4
 80038ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038f0:	6838      	ldr	r0, [r7, #0]
 80038f2:	f001 fd5a 	bl	80053aa <USB_DevInit>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d005      	beq.n	8003908 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2202      	movs	r2, #2
 8003900:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e00d      	b.n	8003924 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4618      	mov	r0, r3
 800391e:	f001 fd68 	bl	80053f2 <USB_DevDisconnect>

  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3714      	adds	r7, #20
 8003928:	46bd      	mov	sp, r7
 800392a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800392c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e26c      	b.n	8003e18 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	2b00      	cmp	r3, #0
 8003948:	f000 8087 	beq.w	8003a5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800394c:	4b92      	ldr	r3, [pc, #584]	; (8003b98 <HAL_RCC_OscConfig+0x26c>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f003 030c 	and.w	r3, r3, #12
 8003954:	2b04      	cmp	r3, #4
 8003956:	d00c      	beq.n	8003972 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003958:	4b8f      	ldr	r3, [pc, #572]	; (8003b98 <HAL_RCC_OscConfig+0x26c>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f003 030c 	and.w	r3, r3, #12
 8003960:	2b08      	cmp	r3, #8
 8003962:	d112      	bne.n	800398a <HAL_RCC_OscConfig+0x5e>
 8003964:	4b8c      	ldr	r3, [pc, #560]	; (8003b98 <HAL_RCC_OscConfig+0x26c>)
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800396c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003970:	d10b      	bne.n	800398a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003972:	4b89      	ldr	r3, [pc, #548]	; (8003b98 <HAL_RCC_OscConfig+0x26c>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d06c      	beq.n	8003a58 <HAL_RCC_OscConfig+0x12c>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d168      	bne.n	8003a58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e246      	b.n	8003e18 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003992:	d106      	bne.n	80039a2 <HAL_RCC_OscConfig+0x76>
 8003994:	4b80      	ldr	r3, [pc, #512]	; (8003b98 <HAL_RCC_OscConfig+0x26c>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a7f      	ldr	r2, [pc, #508]	; (8003b98 <HAL_RCC_OscConfig+0x26c>)
 800399a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800399e:	6013      	str	r3, [r2, #0]
 80039a0:	e02e      	b.n	8003a00 <HAL_RCC_OscConfig+0xd4>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10c      	bne.n	80039c4 <HAL_RCC_OscConfig+0x98>
 80039aa:	4b7b      	ldr	r3, [pc, #492]	; (8003b98 <HAL_RCC_OscConfig+0x26c>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a7a      	ldr	r2, [pc, #488]	; (8003b98 <HAL_RCC_OscConfig+0x26c>)
 80039b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039b4:	6013      	str	r3, [r2, #0]
 80039b6:	4b78      	ldr	r3, [pc, #480]	; (8003b98 <HAL_RCC_OscConfig+0x26c>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a77      	ldr	r2, [pc, #476]	; (8003b98 <HAL_RCC_OscConfig+0x26c>)
 80039bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039c0:	6013      	str	r3, [r2, #0]
 80039c2:	e01d      	b.n	8003a00 <HAL_RCC_OscConfig+0xd4>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039cc:	d10c      	bne.n	80039e8 <HAL_RCC_OscConfig+0xbc>
 80039ce:	4b72      	ldr	r3, [pc, #456]	; (8003b98 <HAL_RCC_OscConfig+0x26c>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a71      	ldr	r2, [pc, #452]	; (8003b98 <HAL_RCC_OscConfig+0x26c>)
 80039d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039d8:	6013      	str	r3, [r2, #0]
 80039da:	4b6f      	ldr	r3, [pc, #444]	; (8003b98 <HAL_RCC_OscConfig+0x26c>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a6e      	ldr	r2, [pc, #440]	; (8003b98 <HAL_RCC_OscConfig+0x26c>)
 80039e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039e4:	6013      	str	r3, [r2, #0]
 80039e6:	e00b      	b.n	8003a00 <HAL_RCC_OscConfig+0xd4>
 80039e8:	4b6b      	ldr	r3, [pc, #428]	; (8003b98 <HAL_RCC_OscConfig+0x26c>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a6a      	ldr	r2, [pc, #424]	; (8003b98 <HAL_RCC_OscConfig+0x26c>)
 80039ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039f2:	6013      	str	r3, [r2, #0]
 80039f4:	4b68      	ldr	r3, [pc, #416]	; (8003b98 <HAL_RCC_OscConfig+0x26c>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a67      	ldr	r2, [pc, #412]	; (8003b98 <HAL_RCC_OscConfig+0x26c>)
 80039fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d013      	beq.n	8003a30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a08:	f7fd fdb6 	bl	8001578 <HAL_GetTick>
 8003a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a0e:	e008      	b.n	8003a22 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a10:	f7fd fdb2 	bl	8001578 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b64      	cmp	r3, #100	; 0x64
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e1fa      	b.n	8003e18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a22:	4b5d      	ldr	r3, [pc, #372]	; (8003b98 <HAL_RCC_OscConfig+0x26c>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d0f0      	beq.n	8003a10 <HAL_RCC_OscConfig+0xe4>
 8003a2e:	e014      	b.n	8003a5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a30:	f7fd fda2 	bl	8001578 <HAL_GetTick>
 8003a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a36:	e008      	b.n	8003a4a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a38:	f7fd fd9e 	bl	8001578 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b64      	cmp	r3, #100	; 0x64
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e1e6      	b.n	8003e18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a4a:	4b53      	ldr	r3, [pc, #332]	; (8003b98 <HAL_RCC_OscConfig+0x26c>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1f0      	bne.n	8003a38 <HAL_RCC_OscConfig+0x10c>
 8003a56:	e000      	b.n	8003a5a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d063      	beq.n	8003b2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a66:	4b4c      	ldr	r3, [pc, #304]	; (8003b98 <HAL_RCC_OscConfig+0x26c>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f003 030c 	and.w	r3, r3, #12
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00b      	beq.n	8003a8a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003a72:	4b49      	ldr	r3, [pc, #292]	; (8003b98 <HAL_RCC_OscConfig+0x26c>)
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f003 030c 	and.w	r3, r3, #12
 8003a7a:	2b08      	cmp	r3, #8
 8003a7c:	d11c      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x18c>
 8003a7e:	4b46      	ldr	r3, [pc, #280]	; (8003b98 <HAL_RCC_OscConfig+0x26c>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d116      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a8a:	4b43      	ldr	r3, [pc, #268]	; (8003b98 <HAL_RCC_OscConfig+0x26c>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d005      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x176>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d001      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e1ba      	b.n	8003e18 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aa2:	4b3d      	ldr	r3, [pc, #244]	; (8003b98 <HAL_RCC_OscConfig+0x26c>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	00db      	lsls	r3, r3, #3
 8003ab0:	4939      	ldr	r1, [pc, #228]	; (8003b98 <HAL_RCC_OscConfig+0x26c>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ab6:	e03a      	b.n	8003b2e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d020      	beq.n	8003b02 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ac0:	4b36      	ldr	r3, [pc, #216]	; (8003b9c <HAL_RCC_OscConfig+0x270>)
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac6:	f7fd fd57 	bl	8001578 <HAL_GetTick>
 8003aca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003acc:	e008      	b.n	8003ae0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ace:	f7fd fd53 	bl	8001578 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d901      	bls.n	8003ae0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e19b      	b.n	8003e18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae0:	4b2d      	ldr	r3, [pc, #180]	; (8003b98 <HAL_RCC_OscConfig+0x26c>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d0f0      	beq.n	8003ace <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aec:	4b2a      	ldr	r3, [pc, #168]	; (8003b98 <HAL_RCC_OscConfig+0x26c>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	695b      	ldr	r3, [r3, #20]
 8003af8:	00db      	lsls	r3, r3, #3
 8003afa:	4927      	ldr	r1, [pc, #156]	; (8003b98 <HAL_RCC_OscConfig+0x26c>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	600b      	str	r3, [r1, #0]
 8003b00:	e015      	b.n	8003b2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b02:	4b26      	ldr	r3, [pc, #152]	; (8003b9c <HAL_RCC_OscConfig+0x270>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b08:	f7fd fd36 	bl	8001578 <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b0e:	e008      	b.n	8003b22 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b10:	f7fd fd32 	bl	8001578 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e17a      	b.n	8003e18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b22:	4b1d      	ldr	r3, [pc, #116]	; (8003b98 <HAL_RCC_OscConfig+0x26c>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1f0      	bne.n	8003b10 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0308 	and.w	r3, r3, #8
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d03a      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d019      	beq.n	8003b76 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b42:	4b17      	ldr	r3, [pc, #92]	; (8003ba0 <HAL_RCC_OscConfig+0x274>)
 8003b44:	2201      	movs	r2, #1
 8003b46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b48:	f7fd fd16 	bl	8001578 <HAL_GetTick>
 8003b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b4e:	e008      	b.n	8003b62 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b50:	f7fd fd12 	bl	8001578 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e15a      	b.n	8003e18 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b62:	4b0d      	ldr	r3, [pc, #52]	; (8003b98 <HAL_RCC_OscConfig+0x26c>)
 8003b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d0f0      	beq.n	8003b50 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003b6e:	2001      	movs	r0, #1
 8003b70:	f000 fada 	bl	8004128 <RCC_Delay>
 8003b74:	e01c      	b.n	8003bb0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b76:	4b0a      	ldr	r3, [pc, #40]	; (8003ba0 <HAL_RCC_OscConfig+0x274>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b7c:	f7fd fcfc 	bl	8001578 <HAL_GetTick>
 8003b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b82:	e00f      	b.n	8003ba4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b84:	f7fd fcf8 	bl	8001578 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d908      	bls.n	8003ba4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e140      	b.n	8003e18 <HAL_RCC_OscConfig+0x4ec>
 8003b96:	bf00      	nop
 8003b98:	40021000 	.word	0x40021000
 8003b9c:	42420000 	.word	0x42420000
 8003ba0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ba4:	4b9e      	ldr	r3, [pc, #632]	; (8003e20 <HAL_RCC_OscConfig+0x4f4>)
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba8:	f003 0302 	and.w	r3, r3, #2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1e9      	bne.n	8003b84 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0304 	and.w	r3, r3, #4
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f000 80a6 	beq.w	8003d0a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bc2:	4b97      	ldr	r3, [pc, #604]	; (8003e20 <HAL_RCC_OscConfig+0x4f4>)
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d10d      	bne.n	8003bea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bce:	4b94      	ldr	r3, [pc, #592]	; (8003e20 <HAL_RCC_OscConfig+0x4f4>)
 8003bd0:	69db      	ldr	r3, [r3, #28]
 8003bd2:	4a93      	ldr	r2, [pc, #588]	; (8003e20 <HAL_RCC_OscConfig+0x4f4>)
 8003bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bd8:	61d3      	str	r3, [r2, #28]
 8003bda:	4b91      	ldr	r3, [pc, #580]	; (8003e20 <HAL_RCC_OscConfig+0x4f4>)
 8003bdc:	69db      	ldr	r3, [r3, #28]
 8003bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be2:	60bb      	str	r3, [r7, #8]
 8003be4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003be6:	2301      	movs	r3, #1
 8003be8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bea:	4b8e      	ldr	r3, [pc, #568]	; (8003e24 <HAL_RCC_OscConfig+0x4f8>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d118      	bne.n	8003c28 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bf6:	4b8b      	ldr	r3, [pc, #556]	; (8003e24 <HAL_RCC_OscConfig+0x4f8>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a8a      	ldr	r2, [pc, #552]	; (8003e24 <HAL_RCC_OscConfig+0x4f8>)
 8003bfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c02:	f7fd fcb9 	bl	8001578 <HAL_GetTick>
 8003c06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c08:	e008      	b.n	8003c1c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c0a:	f7fd fcb5 	bl	8001578 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	2b64      	cmp	r3, #100	; 0x64
 8003c16:	d901      	bls.n	8003c1c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e0fd      	b.n	8003e18 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c1c:	4b81      	ldr	r3, [pc, #516]	; (8003e24 <HAL_RCC_OscConfig+0x4f8>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d0f0      	beq.n	8003c0a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d106      	bne.n	8003c3e <HAL_RCC_OscConfig+0x312>
 8003c30:	4b7b      	ldr	r3, [pc, #492]	; (8003e20 <HAL_RCC_OscConfig+0x4f4>)
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	4a7a      	ldr	r2, [pc, #488]	; (8003e20 <HAL_RCC_OscConfig+0x4f4>)
 8003c36:	f043 0301 	orr.w	r3, r3, #1
 8003c3a:	6213      	str	r3, [r2, #32]
 8003c3c:	e02d      	b.n	8003c9a <HAL_RCC_OscConfig+0x36e>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d10c      	bne.n	8003c60 <HAL_RCC_OscConfig+0x334>
 8003c46:	4b76      	ldr	r3, [pc, #472]	; (8003e20 <HAL_RCC_OscConfig+0x4f4>)
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	4a75      	ldr	r2, [pc, #468]	; (8003e20 <HAL_RCC_OscConfig+0x4f4>)
 8003c4c:	f023 0301 	bic.w	r3, r3, #1
 8003c50:	6213      	str	r3, [r2, #32]
 8003c52:	4b73      	ldr	r3, [pc, #460]	; (8003e20 <HAL_RCC_OscConfig+0x4f4>)
 8003c54:	6a1b      	ldr	r3, [r3, #32]
 8003c56:	4a72      	ldr	r2, [pc, #456]	; (8003e20 <HAL_RCC_OscConfig+0x4f4>)
 8003c58:	f023 0304 	bic.w	r3, r3, #4
 8003c5c:	6213      	str	r3, [r2, #32]
 8003c5e:	e01c      	b.n	8003c9a <HAL_RCC_OscConfig+0x36e>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	2b05      	cmp	r3, #5
 8003c66:	d10c      	bne.n	8003c82 <HAL_RCC_OscConfig+0x356>
 8003c68:	4b6d      	ldr	r3, [pc, #436]	; (8003e20 <HAL_RCC_OscConfig+0x4f4>)
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	4a6c      	ldr	r2, [pc, #432]	; (8003e20 <HAL_RCC_OscConfig+0x4f4>)
 8003c6e:	f043 0304 	orr.w	r3, r3, #4
 8003c72:	6213      	str	r3, [r2, #32]
 8003c74:	4b6a      	ldr	r3, [pc, #424]	; (8003e20 <HAL_RCC_OscConfig+0x4f4>)
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	4a69      	ldr	r2, [pc, #420]	; (8003e20 <HAL_RCC_OscConfig+0x4f4>)
 8003c7a:	f043 0301 	orr.w	r3, r3, #1
 8003c7e:	6213      	str	r3, [r2, #32]
 8003c80:	e00b      	b.n	8003c9a <HAL_RCC_OscConfig+0x36e>
 8003c82:	4b67      	ldr	r3, [pc, #412]	; (8003e20 <HAL_RCC_OscConfig+0x4f4>)
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	4a66      	ldr	r2, [pc, #408]	; (8003e20 <HAL_RCC_OscConfig+0x4f4>)
 8003c88:	f023 0301 	bic.w	r3, r3, #1
 8003c8c:	6213      	str	r3, [r2, #32]
 8003c8e:	4b64      	ldr	r3, [pc, #400]	; (8003e20 <HAL_RCC_OscConfig+0x4f4>)
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	4a63      	ldr	r2, [pc, #396]	; (8003e20 <HAL_RCC_OscConfig+0x4f4>)
 8003c94:	f023 0304 	bic.w	r3, r3, #4
 8003c98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d015      	beq.n	8003cce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ca2:	f7fd fc69 	bl	8001578 <HAL_GetTick>
 8003ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ca8:	e00a      	b.n	8003cc0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003caa:	f7fd fc65 	bl	8001578 <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d901      	bls.n	8003cc0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e0ab      	b.n	8003e18 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cc0:	4b57      	ldr	r3, [pc, #348]	; (8003e20 <HAL_RCC_OscConfig+0x4f4>)
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d0ee      	beq.n	8003caa <HAL_RCC_OscConfig+0x37e>
 8003ccc:	e014      	b.n	8003cf8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cce:	f7fd fc53 	bl	8001578 <HAL_GetTick>
 8003cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cd4:	e00a      	b.n	8003cec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cd6:	f7fd fc4f 	bl	8001578 <HAL_GetTick>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d901      	bls.n	8003cec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e095      	b.n	8003e18 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cec:	4b4c      	ldr	r3, [pc, #304]	; (8003e20 <HAL_RCC_OscConfig+0x4f4>)
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1ee      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003cf8:	7dfb      	ldrb	r3, [r7, #23]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d105      	bne.n	8003d0a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cfe:	4b48      	ldr	r3, [pc, #288]	; (8003e20 <HAL_RCC_OscConfig+0x4f4>)
 8003d00:	69db      	ldr	r3, [r3, #28]
 8003d02:	4a47      	ldr	r2, [pc, #284]	; (8003e20 <HAL_RCC_OscConfig+0x4f4>)
 8003d04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d08:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	69db      	ldr	r3, [r3, #28]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f000 8081 	beq.w	8003e16 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d14:	4b42      	ldr	r3, [pc, #264]	; (8003e20 <HAL_RCC_OscConfig+0x4f4>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f003 030c 	and.w	r3, r3, #12
 8003d1c:	2b08      	cmp	r3, #8
 8003d1e:	d061      	beq.n	8003de4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	69db      	ldr	r3, [r3, #28]
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d146      	bne.n	8003db6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d28:	4b3f      	ldr	r3, [pc, #252]	; (8003e28 <HAL_RCC_OscConfig+0x4fc>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d2e:	f7fd fc23 	bl	8001578 <HAL_GetTick>
 8003d32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d34:	e008      	b.n	8003d48 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d36:	f7fd fc1f 	bl	8001578 <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d901      	bls.n	8003d48 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e067      	b.n	8003e18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d48:	4b35      	ldr	r3, [pc, #212]	; (8003e20 <HAL_RCC_OscConfig+0x4f4>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1f0      	bne.n	8003d36 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d5c:	d108      	bne.n	8003d70 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d5e:	4b30      	ldr	r3, [pc, #192]	; (8003e20 <HAL_RCC_OscConfig+0x4f4>)
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	492d      	ldr	r1, [pc, #180]	; (8003e20 <HAL_RCC_OscConfig+0x4f4>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d70:	4b2b      	ldr	r3, [pc, #172]	; (8003e20 <HAL_RCC_OscConfig+0x4f4>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a19      	ldr	r1, [r3, #32]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d80:	430b      	orrs	r3, r1
 8003d82:	4927      	ldr	r1, [pc, #156]	; (8003e20 <HAL_RCC_OscConfig+0x4f4>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d88:	4b27      	ldr	r3, [pc, #156]	; (8003e28 <HAL_RCC_OscConfig+0x4fc>)
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d8e:	f7fd fbf3 	bl	8001578 <HAL_GetTick>
 8003d92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d94:	e008      	b.n	8003da8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d96:	f7fd fbef 	bl	8001578 <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d901      	bls.n	8003da8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e037      	b.n	8003e18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003da8:	4b1d      	ldr	r3, [pc, #116]	; (8003e20 <HAL_RCC_OscConfig+0x4f4>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d0f0      	beq.n	8003d96 <HAL_RCC_OscConfig+0x46a>
 8003db4:	e02f      	b.n	8003e16 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003db6:	4b1c      	ldr	r3, [pc, #112]	; (8003e28 <HAL_RCC_OscConfig+0x4fc>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dbc:	f7fd fbdc 	bl	8001578 <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dc4:	f7fd fbd8 	bl	8001578 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e020      	b.n	8003e18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dd6:	4b12      	ldr	r3, [pc, #72]	; (8003e20 <HAL_RCC_OscConfig+0x4f4>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1f0      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x498>
 8003de2:	e018      	b.n	8003e16 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	69db      	ldr	r3, [r3, #28]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d101      	bne.n	8003df0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e013      	b.n	8003e18 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003df0:	4b0b      	ldr	r3, [pc, #44]	; (8003e20 <HAL_RCC_OscConfig+0x4f4>)
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d106      	bne.n	8003e12 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d001      	beq.n	8003e16 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e000      	b.n	8003e18 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3718      	adds	r7, #24
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	40021000 	.word	0x40021000
 8003e24:	40007000 	.word	0x40007000
 8003e28:	42420060 	.word	0x42420060

08003e2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d101      	bne.n	8003e40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e0d0      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e40:	4b6a      	ldr	r3, [pc, #424]	; (8003fec <HAL_RCC_ClockConfig+0x1c0>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0307 	and.w	r3, r3, #7
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d910      	bls.n	8003e70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e4e:	4b67      	ldr	r3, [pc, #412]	; (8003fec <HAL_RCC_ClockConfig+0x1c0>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f023 0207 	bic.w	r2, r3, #7
 8003e56:	4965      	ldr	r1, [pc, #404]	; (8003fec <HAL_RCC_ClockConfig+0x1c0>)
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e5e:	4b63      	ldr	r3, [pc, #396]	; (8003fec <HAL_RCC_ClockConfig+0x1c0>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0307 	and.w	r3, r3, #7
 8003e66:	683a      	ldr	r2, [r7, #0]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d001      	beq.n	8003e70 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e0b8      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0302 	and.w	r3, r3, #2
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d020      	beq.n	8003ebe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0304 	and.w	r3, r3, #4
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d005      	beq.n	8003e94 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e88:	4b59      	ldr	r3, [pc, #356]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	4a58      	ldr	r2, [pc, #352]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e8e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003e92:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0308 	and.w	r3, r3, #8
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d005      	beq.n	8003eac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ea0:	4b53      	ldr	r3, [pc, #332]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	4a52      	ldr	r2, [pc, #328]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003eaa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003eac:	4b50      	ldr	r3, [pc, #320]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	494d      	ldr	r1, [pc, #308]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d040      	beq.n	8003f4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d107      	bne.n	8003ee2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ed2:	4b47      	ldr	r3, [pc, #284]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d115      	bne.n	8003f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e07f      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d107      	bne.n	8003efa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eea:	4b41      	ldr	r3, [pc, #260]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d109      	bne.n	8003f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e073      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003efa:	4b3d      	ldr	r3, [pc, #244]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d101      	bne.n	8003f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e06b      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f0a:	4b39      	ldr	r3, [pc, #228]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f023 0203 	bic.w	r2, r3, #3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	4936      	ldr	r1, [pc, #216]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f1c:	f7fd fb2c 	bl	8001578 <HAL_GetTick>
 8003f20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f22:	e00a      	b.n	8003f3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f24:	f7fd fb28 	bl	8001578 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e053      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f3a:	4b2d      	ldr	r3, [pc, #180]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f003 020c 	and.w	r2, r3, #12
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d1eb      	bne.n	8003f24 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f4c:	4b27      	ldr	r3, [pc, #156]	; (8003fec <HAL_RCC_ClockConfig+0x1c0>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0307 	and.w	r3, r3, #7
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d210      	bcs.n	8003f7c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f5a:	4b24      	ldr	r3, [pc, #144]	; (8003fec <HAL_RCC_ClockConfig+0x1c0>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f023 0207 	bic.w	r2, r3, #7
 8003f62:	4922      	ldr	r1, [pc, #136]	; (8003fec <HAL_RCC_ClockConfig+0x1c0>)
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f6a:	4b20      	ldr	r3, [pc, #128]	; (8003fec <HAL_RCC_ClockConfig+0x1c0>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0307 	and.w	r3, r3, #7
 8003f72:	683a      	ldr	r2, [r7, #0]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d001      	beq.n	8003f7c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e032      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0304 	and.w	r3, r3, #4
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d008      	beq.n	8003f9a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f88:	4b19      	ldr	r3, [pc, #100]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	4916      	ldr	r1, [pc, #88]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0308 	and.w	r3, r3, #8
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d009      	beq.n	8003fba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003fa6:	4b12      	ldr	r3, [pc, #72]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	490e      	ldr	r1, [pc, #56]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003fba:	f000 f821 	bl	8004000 <HAL_RCC_GetSysClockFreq>
 8003fbe:	4601      	mov	r1, r0
 8003fc0:	4b0b      	ldr	r3, [pc, #44]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	091b      	lsrs	r3, r3, #4
 8003fc6:	f003 030f 	and.w	r3, r3, #15
 8003fca:	4a0a      	ldr	r2, [pc, #40]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8003fcc:	5cd3      	ldrb	r3, [r2, r3]
 8003fce:	fa21 f303 	lsr.w	r3, r1, r3
 8003fd2:	4a09      	ldr	r2, [pc, #36]	; (8003ff8 <HAL_RCC_ClockConfig+0x1cc>)
 8003fd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003fd6:	4b09      	ldr	r3, [pc, #36]	; (8003ffc <HAL_RCC_ClockConfig+0x1d0>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7fd fa8a 	bl	80014f4 <HAL_InitTick>

  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3710      	adds	r7, #16
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	40022000 	.word	0x40022000
 8003ff0:	40021000 	.word	0x40021000
 8003ff4:	0800a6dc 	.word	0x0800a6dc
 8003ff8:	2000210c 	.word	0x2000210c
 8003ffc:	20002130 	.word	0x20002130

08004000 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004000:	b490      	push	{r4, r7}
 8004002:	b08a      	sub	sp, #40	; 0x28
 8004004:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004006:	4b2a      	ldr	r3, [pc, #168]	; (80040b0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004008:	1d3c      	adds	r4, r7, #4
 800400a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800400c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004010:	4b28      	ldr	r3, [pc, #160]	; (80040b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004012:	881b      	ldrh	r3, [r3, #0]
 8004014:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004016:	2300      	movs	r3, #0
 8004018:	61fb      	str	r3, [r7, #28]
 800401a:	2300      	movs	r3, #0
 800401c:	61bb      	str	r3, [r7, #24]
 800401e:	2300      	movs	r3, #0
 8004020:	627b      	str	r3, [r7, #36]	; 0x24
 8004022:	2300      	movs	r3, #0
 8004024:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004026:	2300      	movs	r3, #0
 8004028:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800402a:	4b23      	ldr	r3, [pc, #140]	; (80040b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	f003 030c 	and.w	r3, r3, #12
 8004036:	2b04      	cmp	r3, #4
 8004038:	d002      	beq.n	8004040 <HAL_RCC_GetSysClockFreq+0x40>
 800403a:	2b08      	cmp	r3, #8
 800403c:	d003      	beq.n	8004046 <HAL_RCC_GetSysClockFreq+0x46>
 800403e:	e02d      	b.n	800409c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004040:	4b1e      	ldr	r3, [pc, #120]	; (80040bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004042:	623b      	str	r3, [r7, #32]
      break;
 8004044:	e02d      	b.n	80040a2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	0c9b      	lsrs	r3, r3, #18
 800404a:	f003 030f 	and.w	r3, r3, #15
 800404e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004052:	4413      	add	r3, r2
 8004054:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004058:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d013      	beq.n	800408c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004064:	4b14      	ldr	r3, [pc, #80]	; (80040b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	0c5b      	lsrs	r3, r3, #17
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004072:	4413      	add	r3, r2
 8004074:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004078:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	4a0f      	ldr	r2, [pc, #60]	; (80040bc <HAL_RCC_GetSysClockFreq+0xbc>)
 800407e:	fb02 f203 	mul.w	r2, r2, r3
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	fbb2 f3f3 	udiv	r3, r2, r3
 8004088:	627b      	str	r3, [r7, #36]	; 0x24
 800408a:	e004      	b.n	8004096 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	4a0c      	ldr	r2, [pc, #48]	; (80040c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004090:	fb02 f303 	mul.w	r3, r2, r3
 8004094:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004098:	623b      	str	r3, [r7, #32]
      break;
 800409a:	e002      	b.n	80040a2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800409c:	4b07      	ldr	r3, [pc, #28]	; (80040bc <HAL_RCC_GetSysClockFreq+0xbc>)
 800409e:	623b      	str	r3, [r7, #32]
      break;
 80040a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040a2:	6a3b      	ldr	r3, [r7, #32]
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3728      	adds	r7, #40	; 0x28
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bc90      	pop	{r4, r7}
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	0800a6c8 	.word	0x0800a6c8
 80040b4:	0800a6d8 	.word	0x0800a6d8
 80040b8:	40021000 	.word	0x40021000
 80040bc:	007a1200 	.word	0x007a1200
 80040c0:	003d0900 	.word	0x003d0900

080040c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040c4:	b480      	push	{r7}
 80040c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040c8:	4b02      	ldr	r3, [pc, #8]	; (80040d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80040ca:	681b      	ldr	r3, [r3, #0]
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bc80      	pop	{r7}
 80040d2:	4770      	bx	lr
 80040d4:	2000210c 	.word	0x2000210c

080040d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040dc:	f7ff fff2 	bl	80040c4 <HAL_RCC_GetHCLKFreq>
 80040e0:	4601      	mov	r1, r0
 80040e2:	4b05      	ldr	r3, [pc, #20]	; (80040f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	0a1b      	lsrs	r3, r3, #8
 80040e8:	f003 0307 	and.w	r3, r3, #7
 80040ec:	4a03      	ldr	r2, [pc, #12]	; (80040fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80040ee:	5cd3      	ldrb	r3, [r2, r3]
 80040f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	40021000 	.word	0x40021000
 80040fc:	0800a6ec 	.word	0x0800a6ec

08004100 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004104:	f7ff ffde 	bl	80040c4 <HAL_RCC_GetHCLKFreq>
 8004108:	4601      	mov	r1, r0
 800410a:	4b05      	ldr	r3, [pc, #20]	; (8004120 <HAL_RCC_GetPCLK2Freq+0x20>)
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	0adb      	lsrs	r3, r3, #11
 8004110:	f003 0307 	and.w	r3, r3, #7
 8004114:	4a03      	ldr	r2, [pc, #12]	; (8004124 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004116:	5cd3      	ldrb	r3, [r2, r3]
 8004118:	fa21 f303 	lsr.w	r3, r1, r3
}
 800411c:	4618      	mov	r0, r3
 800411e:	bd80      	pop	{r7, pc}
 8004120:	40021000 	.word	0x40021000
 8004124:	0800a6ec 	.word	0x0800a6ec

08004128 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004130:	4b0a      	ldr	r3, [pc, #40]	; (800415c <RCC_Delay+0x34>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a0a      	ldr	r2, [pc, #40]	; (8004160 <RCC_Delay+0x38>)
 8004136:	fba2 2303 	umull	r2, r3, r2, r3
 800413a:	0a5b      	lsrs	r3, r3, #9
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	fb02 f303 	mul.w	r3, r2, r3
 8004142:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004144:	bf00      	nop
  }
  while (Delay --);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	1e5a      	subs	r2, r3, #1
 800414a:	60fa      	str	r2, [r7, #12]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1f9      	bne.n	8004144 <RCC_Delay+0x1c>
}
 8004150:	bf00      	nop
 8004152:	3714      	adds	r7, #20
 8004154:	46bd      	mov	sp, r7
 8004156:	bc80      	pop	{r7}
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	2000210c 	.word	0x2000210c
 8004160:	10624dd3 	.word	0x10624dd3

08004164 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b086      	sub	sp, #24
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800416c:	2300      	movs	r3, #0
 800416e:	613b      	str	r3, [r7, #16]
 8004170:	2300      	movs	r3, #0
 8004172:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0301 	and.w	r3, r3, #1
 800417c:	2b00      	cmp	r3, #0
 800417e:	d07d      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004180:	2300      	movs	r3, #0
 8004182:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004184:	4b4f      	ldr	r3, [pc, #316]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004186:	69db      	ldr	r3, [r3, #28]
 8004188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d10d      	bne.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004190:	4b4c      	ldr	r3, [pc, #304]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004192:	69db      	ldr	r3, [r3, #28]
 8004194:	4a4b      	ldr	r2, [pc, #300]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004196:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800419a:	61d3      	str	r3, [r2, #28]
 800419c:	4b49      	ldr	r3, [pc, #292]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800419e:	69db      	ldr	r3, [r3, #28]
 80041a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041a4:	60bb      	str	r3, [r7, #8]
 80041a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041a8:	2301      	movs	r3, #1
 80041aa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ac:	4b46      	ldr	r3, [pc, #280]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d118      	bne.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041b8:	4b43      	ldr	r3, [pc, #268]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a42      	ldr	r2, [pc, #264]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041c4:	f7fd f9d8 	bl	8001578 <HAL_GetTick>
 80041c8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ca:	e008      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041cc:	f7fd f9d4 	bl	8001578 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b64      	cmp	r3, #100	; 0x64
 80041d8:	d901      	bls.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e06d      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041de:	4b3a      	ldr	r3, [pc, #232]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d0f0      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041ea:	4b36      	ldr	r3, [pc, #216]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041f2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d02e      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	429a      	cmp	r2, r3
 8004206:	d027      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004208:	4b2e      	ldr	r3, [pc, #184]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800420a:	6a1b      	ldr	r3, [r3, #32]
 800420c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004210:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004212:	4b2e      	ldr	r3, [pc, #184]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004214:	2201      	movs	r2, #1
 8004216:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004218:	4b2c      	ldr	r3, [pc, #176]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800421a:	2200      	movs	r2, #0
 800421c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800421e:	4a29      	ldr	r2, [pc, #164]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	2b00      	cmp	r3, #0
 800422c:	d014      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800422e:	f7fd f9a3 	bl	8001578 <HAL_GetTick>
 8004232:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004234:	e00a      	b.n	800424c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004236:	f7fd f99f 	bl	8001578 <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	f241 3288 	movw	r2, #5000	; 0x1388
 8004244:	4293      	cmp	r3, r2
 8004246:	d901      	bls.n	800424c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e036      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800424c:	4b1d      	ldr	r3, [pc, #116]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800424e:	6a1b      	ldr	r3, [r3, #32]
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	2b00      	cmp	r3, #0
 8004256:	d0ee      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004258:	4b1a      	ldr	r3, [pc, #104]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800425a:	6a1b      	ldr	r3, [r3, #32]
 800425c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	4917      	ldr	r1, [pc, #92]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004266:	4313      	orrs	r3, r2
 8004268:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800426a:	7dfb      	ldrb	r3, [r7, #23]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d105      	bne.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004270:	4b14      	ldr	r3, [pc, #80]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004272:	69db      	ldr	r3, [r3, #28]
 8004274:	4a13      	ldr	r2, [pc, #76]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004276:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800427a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0302 	and.w	r3, r3, #2
 8004284:	2b00      	cmp	r3, #0
 8004286:	d008      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004288:	4b0e      	ldr	r3, [pc, #56]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	490b      	ldr	r1, [pc, #44]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004296:	4313      	orrs	r3, r2
 8004298:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0310 	and.w	r3, r3, #16
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d008      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042a6:	4b07      	ldr	r3, [pc, #28]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	4904      	ldr	r1, [pc, #16]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3718      	adds	r7, #24
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	40021000 	.word	0x40021000
 80042c8:	40007000 	.word	0x40007000
 80042cc:	42420440 	.word	0x42420440

080042d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d101      	bne.n	80042e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e01d      	b.n	800431e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d106      	bne.n	80042fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f7fc feca 	bl	8001090 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2202      	movs	r2, #2
 8004300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	3304      	adds	r3, #4
 800430c:	4619      	mov	r1, r3
 800430e:	4610      	mov	r0, r2
 8004310:	f000 fb8a 	bl	8004a28 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3708      	adds	r7, #8
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004326:	b480      	push	{r7}
 8004328:	b085      	sub	sp, #20
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68da      	ldr	r2, [r3, #12]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f042 0201 	orr.w	r2, r2, #1
 800433c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f003 0307 	and.w	r3, r3, #7
 8004348:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2b06      	cmp	r3, #6
 800434e:	d007      	beq.n	8004360 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f042 0201 	orr.w	r2, r2, #1
 800435e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3714      	adds	r7, #20
 8004366:	46bd      	mov	sp, r7
 8004368:	bc80      	pop	{r7}
 800436a:	4770      	bx	lr

0800436c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e01d      	b.n	80043ba <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d106      	bne.n	8004398 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 f815 	bl	80043c2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2202      	movs	r2, #2
 800439c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	3304      	adds	r3, #4
 80043a8:	4619      	mov	r1, r3
 80043aa:	4610      	mov	r0, r2
 80043ac:	f000 fb3c 	bl	8004a28 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b083      	sub	sp, #12
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80043ca:	bf00      	nop
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bc80      	pop	{r7}
 80043d2:	4770      	bx	lr

080043d4 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	2b0c      	cmp	r3, #12
 80043e2:	d841      	bhi.n	8004468 <HAL_TIM_PWM_Start_IT+0x94>
 80043e4:	a201      	add	r2, pc, #4	; (adr r2, 80043ec <HAL_TIM_PWM_Start_IT+0x18>)
 80043e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ea:	bf00      	nop
 80043ec:	08004421 	.word	0x08004421
 80043f0:	08004469 	.word	0x08004469
 80043f4:	08004469 	.word	0x08004469
 80043f8:	08004469 	.word	0x08004469
 80043fc:	08004433 	.word	0x08004433
 8004400:	08004469 	.word	0x08004469
 8004404:	08004469 	.word	0x08004469
 8004408:	08004469 	.word	0x08004469
 800440c:	08004445 	.word	0x08004445
 8004410:	08004469 	.word	0x08004469
 8004414:	08004469 	.word	0x08004469
 8004418:	08004469 	.word	0x08004469
 800441c:	08004457 	.word	0x08004457
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68da      	ldr	r2, [r3, #12]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f042 0202 	orr.w	r2, r2, #2
 800442e:	60da      	str	r2, [r3, #12]
      break;
 8004430:	e01b      	b.n	800446a <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68da      	ldr	r2, [r3, #12]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f042 0204 	orr.w	r2, r2, #4
 8004440:	60da      	str	r2, [r3, #12]
      break;
 8004442:	e012      	b.n	800446a <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68da      	ldr	r2, [r3, #12]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f042 0208 	orr.w	r2, r2, #8
 8004452:	60da      	str	r2, [r3, #12]
      break;
 8004454:	e009      	b.n	800446a <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68da      	ldr	r2, [r3, #12]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f042 0210 	orr.w	r2, r2, #16
 8004464:	60da      	str	r2, [r3, #12]
      break;
 8004466:	e000      	b.n	800446a <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 8004468:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2201      	movs	r2, #1
 8004470:	6839      	ldr	r1, [r7, #0]
 8004472:	4618      	mov	r0, r3
 8004474:	f000 fd58 	bl	8004f28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a10      	ldr	r2, [pc, #64]	; (80044c0 <HAL_TIM_PWM_Start_IT+0xec>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d107      	bne.n	8004492 <HAL_TIM_PWM_Start_IT+0xbe>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004490:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f003 0307 	and.w	r3, r3, #7
 800449c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2b06      	cmp	r3, #6
 80044a2:	d007      	beq.n	80044b4 <HAL_TIM_PWM_Start_IT+0xe0>
  {
    __HAL_TIM_ENABLE(htim);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f042 0201 	orr.w	r2, r2, #1
 80044b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3710      	adds	r7, #16
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	40012c00 	.word	0x40012c00

080044c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d122      	bne.n	8004520 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d11b      	bne.n	8004520 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f06f 0202 	mvn.w	r2, #2
 80044f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2201      	movs	r2, #1
 80044f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	f003 0303 	and.w	r3, r3, #3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d003      	beq.n	800450e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 fa73 	bl	80049f2 <HAL_TIM_IC_CaptureCallback>
 800450c:	e005      	b.n	800451a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 fa66 	bl	80049e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 fa75 	bl	8004a04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	f003 0304 	and.w	r3, r3, #4
 800452a:	2b04      	cmp	r3, #4
 800452c:	d122      	bne.n	8004574 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	f003 0304 	and.w	r3, r3, #4
 8004538:	2b04      	cmp	r3, #4
 800453a:	d11b      	bne.n	8004574 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f06f 0204 	mvn.w	r2, #4
 8004544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2202      	movs	r2, #2
 800454a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004556:	2b00      	cmp	r3, #0
 8004558:	d003      	beq.n	8004562 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 fa49 	bl	80049f2 <HAL_TIM_IC_CaptureCallback>
 8004560:	e005      	b.n	800456e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 fa3c 	bl	80049e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 fa4b 	bl	8004a04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	f003 0308 	and.w	r3, r3, #8
 800457e:	2b08      	cmp	r3, #8
 8004580:	d122      	bne.n	80045c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	f003 0308 	and.w	r3, r3, #8
 800458c:	2b08      	cmp	r3, #8
 800458e:	d11b      	bne.n	80045c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f06f 0208 	mvn.w	r2, #8
 8004598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2204      	movs	r2, #4
 800459e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	69db      	ldr	r3, [r3, #28]
 80045a6:	f003 0303 	and.w	r3, r3, #3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d003      	beq.n	80045b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 fa1f 	bl	80049f2 <HAL_TIM_IC_CaptureCallback>
 80045b4:	e005      	b.n	80045c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 fa12 	bl	80049e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 fa21 	bl	8004a04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	f003 0310 	and.w	r3, r3, #16
 80045d2:	2b10      	cmp	r3, #16
 80045d4:	d122      	bne.n	800461c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	f003 0310 	and.w	r3, r3, #16
 80045e0:	2b10      	cmp	r3, #16
 80045e2:	d11b      	bne.n	800461c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f06f 0210 	mvn.w	r2, #16
 80045ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2208      	movs	r2, #8
 80045f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	69db      	ldr	r3, [r3, #28]
 80045fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d003      	beq.n	800460a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f9f5 	bl	80049f2 <HAL_TIM_IC_CaptureCallback>
 8004608:	e005      	b.n	8004616 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 f9e8 	bl	80049e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 f9f7 	bl	8004a04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	2b01      	cmp	r3, #1
 8004628:	d10e      	bne.n	8004648 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	f003 0301 	and.w	r3, r3, #1
 8004634:	2b01      	cmp	r3, #1
 8004636:	d107      	bne.n	8004648 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f06f 0201 	mvn.w	r2, #1
 8004640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 f9c3 	bl	80049ce <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004652:	2b80      	cmp	r3, #128	; 0x80
 8004654:	d10e      	bne.n	8004674 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004660:	2b80      	cmp	r3, #128	; 0x80
 8004662:	d107      	bne.n	8004674 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800466c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 fd1c 	bl	80050ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800467e:	2b40      	cmp	r3, #64	; 0x40
 8004680:	d10e      	bne.n	80046a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800468c:	2b40      	cmp	r3, #64	; 0x40
 800468e:	d107      	bne.n	80046a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004698:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 f9bb 	bl	8004a16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	f003 0320 	and.w	r3, r3, #32
 80046aa:	2b20      	cmp	r3, #32
 80046ac:	d10e      	bne.n	80046cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	f003 0320 	and.w	r3, r3, #32
 80046b8:	2b20      	cmp	r3, #32
 80046ba:	d107      	bne.n	80046cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f06f 0220 	mvn.w	r2, #32
 80046c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 fce7 	bl	800509a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046cc:	bf00      	nop
 80046ce:	3708      	adds	r7, #8
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d101      	bne.n	80046ee <HAL_TIM_PWM_ConfigChannel+0x1a>
 80046ea:	2302      	movs	r3, #2
 80046ec:	e0b4      	b.n	8004858 <HAL_TIM_PWM_ConfigChannel+0x184>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2202      	movs	r2, #2
 80046fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2b0c      	cmp	r3, #12
 8004702:	f200 809f 	bhi.w	8004844 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004706:	a201      	add	r2, pc, #4	; (adr r2, 800470c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800470c:	08004741 	.word	0x08004741
 8004710:	08004845 	.word	0x08004845
 8004714:	08004845 	.word	0x08004845
 8004718:	08004845 	.word	0x08004845
 800471c:	08004781 	.word	0x08004781
 8004720:	08004845 	.word	0x08004845
 8004724:	08004845 	.word	0x08004845
 8004728:	08004845 	.word	0x08004845
 800472c:	080047c3 	.word	0x080047c3
 8004730:	08004845 	.word	0x08004845
 8004734:	08004845 	.word	0x08004845
 8004738:	08004845 	.word	0x08004845
 800473c:	08004803 	.word	0x08004803
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68b9      	ldr	r1, [r7, #8]
 8004746:	4618      	mov	r0, r3
 8004748:	f000 f9d0 	bl	8004aec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	699a      	ldr	r2, [r3, #24]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f042 0208 	orr.w	r2, r2, #8
 800475a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	699a      	ldr	r2, [r3, #24]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f022 0204 	bic.w	r2, r2, #4
 800476a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	6999      	ldr	r1, [r3, #24]
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	691a      	ldr	r2, [r3, #16]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	430a      	orrs	r2, r1
 800477c:	619a      	str	r2, [r3, #24]
      break;
 800477e:	e062      	b.n	8004846 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68b9      	ldr	r1, [r7, #8]
 8004786:	4618      	mov	r0, r3
 8004788:	f000 fa16 	bl	8004bb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	699a      	ldr	r2, [r3, #24]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800479a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	699a      	ldr	r2, [r3, #24]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	6999      	ldr	r1, [r3, #24]
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	021a      	lsls	r2, r3, #8
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	430a      	orrs	r2, r1
 80047be:	619a      	str	r2, [r3, #24]
      break;
 80047c0:	e041      	b.n	8004846 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68b9      	ldr	r1, [r7, #8]
 80047c8:	4618      	mov	r0, r3
 80047ca:	f000 fa5f 	bl	8004c8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	69da      	ldr	r2, [r3, #28]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f042 0208 	orr.w	r2, r2, #8
 80047dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	69da      	ldr	r2, [r3, #28]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f022 0204 	bic.w	r2, r2, #4
 80047ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	69d9      	ldr	r1, [r3, #28]
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	691a      	ldr	r2, [r3, #16]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	430a      	orrs	r2, r1
 80047fe:	61da      	str	r2, [r3, #28]
      break;
 8004800:	e021      	b.n	8004846 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68b9      	ldr	r1, [r7, #8]
 8004808:	4618      	mov	r0, r3
 800480a:	f000 faa9 	bl	8004d60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	69da      	ldr	r2, [r3, #28]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800481c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	69da      	ldr	r2, [r3, #28]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800482c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	69d9      	ldr	r1, [r3, #28]
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	021a      	lsls	r2, r3, #8
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	430a      	orrs	r2, r1
 8004840:	61da      	str	r2, [r3, #28]
      break;
 8004842:	e000      	b.n	8004846 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004844:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3710      	adds	r7, #16
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004870:	2b01      	cmp	r3, #1
 8004872:	d101      	bne.n	8004878 <HAL_TIM_ConfigClockSource+0x18>
 8004874:	2302      	movs	r3, #2
 8004876:	e0a6      	b.n	80049c6 <HAL_TIM_ConfigClockSource+0x166>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2202      	movs	r2, #2
 8004884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004896:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800489e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2b40      	cmp	r3, #64	; 0x40
 80048ae:	d067      	beq.n	8004980 <HAL_TIM_ConfigClockSource+0x120>
 80048b0:	2b40      	cmp	r3, #64	; 0x40
 80048b2:	d80b      	bhi.n	80048cc <HAL_TIM_ConfigClockSource+0x6c>
 80048b4:	2b10      	cmp	r3, #16
 80048b6:	d073      	beq.n	80049a0 <HAL_TIM_ConfigClockSource+0x140>
 80048b8:	2b10      	cmp	r3, #16
 80048ba:	d802      	bhi.n	80048c2 <HAL_TIM_ConfigClockSource+0x62>
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d06f      	beq.n	80049a0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80048c0:	e078      	b.n	80049b4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80048c2:	2b20      	cmp	r3, #32
 80048c4:	d06c      	beq.n	80049a0 <HAL_TIM_ConfigClockSource+0x140>
 80048c6:	2b30      	cmp	r3, #48	; 0x30
 80048c8:	d06a      	beq.n	80049a0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80048ca:	e073      	b.n	80049b4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80048cc:	2b70      	cmp	r3, #112	; 0x70
 80048ce:	d00d      	beq.n	80048ec <HAL_TIM_ConfigClockSource+0x8c>
 80048d0:	2b70      	cmp	r3, #112	; 0x70
 80048d2:	d804      	bhi.n	80048de <HAL_TIM_ConfigClockSource+0x7e>
 80048d4:	2b50      	cmp	r3, #80	; 0x50
 80048d6:	d033      	beq.n	8004940 <HAL_TIM_ConfigClockSource+0xe0>
 80048d8:	2b60      	cmp	r3, #96	; 0x60
 80048da:	d041      	beq.n	8004960 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80048dc:	e06a      	b.n	80049b4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80048de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048e2:	d066      	beq.n	80049b2 <HAL_TIM_ConfigClockSource+0x152>
 80048e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048e8:	d017      	beq.n	800491a <HAL_TIM_ConfigClockSource+0xba>
      break;
 80048ea:	e063      	b.n	80049b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6818      	ldr	r0, [r3, #0]
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	6899      	ldr	r1, [r3, #8]
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	685a      	ldr	r2, [r3, #4]
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	f000 faf5 	bl	8004eea <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800490e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	609a      	str	r2, [r3, #8]
      break;
 8004918:	e04c      	b.n	80049b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6818      	ldr	r0, [r3, #0]
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	6899      	ldr	r1, [r3, #8]
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	685a      	ldr	r2, [r3, #4]
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	f000 fade 	bl	8004eea <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	689a      	ldr	r2, [r3, #8]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800493c:	609a      	str	r2, [r3, #8]
      break;
 800493e:	e039      	b.n	80049b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6818      	ldr	r0, [r3, #0]
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	6859      	ldr	r1, [r3, #4]
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	461a      	mov	r2, r3
 800494e:	f000 fa55 	bl	8004dfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2150      	movs	r1, #80	; 0x50
 8004958:	4618      	mov	r0, r3
 800495a:	f000 faac 	bl	8004eb6 <TIM_ITRx_SetConfig>
      break;
 800495e:	e029      	b.n	80049b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6818      	ldr	r0, [r3, #0]
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	6859      	ldr	r1, [r3, #4]
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	461a      	mov	r2, r3
 800496e:	f000 fa73 	bl	8004e58 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2160      	movs	r1, #96	; 0x60
 8004978:	4618      	mov	r0, r3
 800497a:	f000 fa9c 	bl	8004eb6 <TIM_ITRx_SetConfig>
      break;
 800497e:	e019      	b.n	80049b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6818      	ldr	r0, [r3, #0]
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	6859      	ldr	r1, [r3, #4]
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	461a      	mov	r2, r3
 800498e:	f000 fa35 	bl	8004dfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2140      	movs	r1, #64	; 0x40
 8004998:	4618      	mov	r0, r3
 800499a:	f000 fa8c 	bl	8004eb6 <TIM_ITRx_SetConfig>
      break;
 800499e:	e009      	b.n	80049b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4619      	mov	r1, r3
 80049aa:	4610      	mov	r0, r2
 80049ac:	f000 fa83 	bl	8004eb6 <TIM_ITRx_SetConfig>
      break;
 80049b0:	e000      	b.n	80049b4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80049b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3710      	adds	r7, #16
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}

080049ce <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049ce:	b480      	push	{r7}
 80049d0:	b083      	sub	sp, #12
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80049d6:	bf00      	nop
 80049d8:	370c      	adds	r7, #12
 80049da:	46bd      	mov	sp, r7
 80049dc:	bc80      	pop	{r7}
 80049de:	4770      	bx	lr

080049e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049e8:	bf00      	nop
 80049ea:	370c      	adds	r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bc80      	pop	{r7}
 80049f0:	4770      	bx	lr

080049f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049f2:	b480      	push	{r7}
 80049f4:	b083      	sub	sp, #12
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049fa:	bf00      	nop
 80049fc:	370c      	adds	r7, #12
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bc80      	pop	{r7}
 8004a02:	4770      	bx	lr

08004a04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bc80      	pop	{r7}
 8004a14:	4770      	bx	lr

08004a16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a16:	b480      	push	{r7}
 8004a18:	b083      	sub	sp, #12
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a1e:	bf00      	nop
 8004a20:	370c      	adds	r7, #12
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bc80      	pop	{r7}
 8004a26:	4770      	bx	lr

08004a28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b085      	sub	sp, #20
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a29      	ldr	r2, [pc, #164]	; (8004ae0 <TIM_Base_SetConfig+0xb8>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d00b      	beq.n	8004a58 <TIM_Base_SetConfig+0x30>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a46:	d007      	beq.n	8004a58 <TIM_Base_SetConfig+0x30>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a26      	ldr	r2, [pc, #152]	; (8004ae4 <TIM_Base_SetConfig+0xbc>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d003      	beq.n	8004a58 <TIM_Base_SetConfig+0x30>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a25      	ldr	r2, [pc, #148]	; (8004ae8 <TIM_Base_SetConfig+0xc0>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d108      	bne.n	8004a6a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a1c      	ldr	r2, [pc, #112]	; (8004ae0 <TIM_Base_SetConfig+0xb8>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d00b      	beq.n	8004a8a <TIM_Base_SetConfig+0x62>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a78:	d007      	beq.n	8004a8a <TIM_Base_SetConfig+0x62>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a19      	ldr	r2, [pc, #100]	; (8004ae4 <TIM_Base_SetConfig+0xbc>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d003      	beq.n	8004a8a <TIM_Base_SetConfig+0x62>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a18      	ldr	r2, [pc, #96]	; (8004ae8 <TIM_Base_SetConfig+0xc0>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d108      	bne.n	8004a9c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	689a      	ldr	r2, [r3, #8]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a07      	ldr	r2, [pc, #28]	; (8004ae0 <TIM_Base_SetConfig+0xb8>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d103      	bne.n	8004ad0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	691a      	ldr	r2, [r3, #16]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	615a      	str	r2, [r3, #20]
}
 8004ad6:	bf00      	nop
 8004ad8:	3714      	adds	r7, #20
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bc80      	pop	{r7}
 8004ade:	4770      	bx	lr
 8004ae0:	40012c00 	.word	0x40012c00
 8004ae4:	40000400 	.word	0x40000400
 8004ae8:	40000800 	.word	0x40000800

08004aec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b087      	sub	sp, #28
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a1b      	ldr	r3, [r3, #32]
 8004afa:	f023 0201 	bic.w	r2, r3, #1
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a1b      	ldr	r3, [r3, #32]
 8004b06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f023 0303 	bic.w	r3, r3, #3
 8004b22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	f023 0302 	bic.w	r3, r3, #2
 8004b34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	697a      	ldr	r2, [r7, #20]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4a1c      	ldr	r2, [pc, #112]	; (8004bb4 <TIM_OC1_SetConfig+0xc8>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d10c      	bne.n	8004b62 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	f023 0308 	bic.w	r3, r3, #8
 8004b4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	697a      	ldr	r2, [r7, #20]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	f023 0304 	bic.w	r3, r3, #4
 8004b60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a13      	ldr	r2, [pc, #76]	; (8004bb4 <TIM_OC1_SetConfig+0xc8>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d111      	bne.n	8004b8e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	693a      	ldr	r2, [r7, #16]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	699b      	ldr	r3, [r3, #24]
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	685a      	ldr	r2, [r3, #4]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	697a      	ldr	r2, [r7, #20]
 8004ba6:	621a      	str	r2, [r3, #32]
}
 8004ba8:	bf00      	nop
 8004baa:	371c      	adds	r7, #28
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bc80      	pop	{r7}
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	40012c00 	.word	0x40012c00

08004bb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b087      	sub	sp, #28
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a1b      	ldr	r3, [r3, #32]
 8004bc6:	f023 0210 	bic.w	r2, r3, #16
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	021b      	lsls	r3, r3, #8
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	f023 0320 	bic.w	r3, r3, #32
 8004c02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	011b      	lsls	r3, r3, #4
 8004c0a:	697a      	ldr	r2, [r7, #20]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4a1d      	ldr	r2, [pc, #116]	; (8004c88 <TIM_OC2_SetConfig+0xd0>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d10d      	bne.n	8004c34 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	011b      	lsls	r3, r3, #4
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4a14      	ldr	r2, [pc, #80]	; (8004c88 <TIM_OC2_SetConfig+0xd0>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d113      	bne.n	8004c64 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	695b      	ldr	r3, [r3, #20]
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	693a      	ldr	r2, [r7, #16]
 8004c68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	685a      	ldr	r2, [r3, #4]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	697a      	ldr	r2, [r7, #20]
 8004c7c:	621a      	str	r2, [r3, #32]
}
 8004c7e:	bf00      	nop
 8004c80:	371c      	adds	r7, #28
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bc80      	pop	{r7}
 8004c86:	4770      	bx	lr
 8004c88:	40012c00 	.word	0x40012c00

08004c8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b087      	sub	sp, #28
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a1b      	ldr	r3, [r3, #32]
 8004c9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
 8004ca6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	69db      	ldr	r3, [r3, #28]
 8004cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f023 0303 	bic.w	r3, r3, #3
 8004cc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004cd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	021b      	lsls	r3, r3, #8
 8004cdc:	697a      	ldr	r2, [r7, #20]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a1d      	ldr	r2, [pc, #116]	; (8004d5c <TIM_OC3_SetConfig+0xd0>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d10d      	bne.n	8004d06 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cf0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	021b      	lsls	r3, r3, #8
 8004cf8:	697a      	ldr	r2, [r7, #20]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a14      	ldr	r2, [pc, #80]	; (8004d5c <TIM_OC3_SetConfig+0xd0>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d113      	bne.n	8004d36 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	695b      	ldr	r3, [r3, #20]
 8004d22:	011b      	lsls	r3, r3, #4
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	011b      	lsls	r3, r3, #4
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	693a      	ldr	r2, [r7, #16]
 8004d3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	68fa      	ldr	r2, [r7, #12]
 8004d40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	685a      	ldr	r2, [r3, #4]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	697a      	ldr	r2, [r7, #20]
 8004d4e:	621a      	str	r2, [r3, #32]
}
 8004d50:	bf00      	nop
 8004d52:	371c      	adds	r7, #28
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bc80      	pop	{r7}
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	40012c00 	.word	0x40012c00

08004d60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b087      	sub	sp, #28
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a1b      	ldr	r3, [r3, #32]
 8004d7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	69db      	ldr	r3, [r3, #28]
 8004d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	021b      	lsls	r3, r3, #8
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004daa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	031b      	lsls	r3, r3, #12
 8004db2:	693a      	ldr	r2, [r7, #16]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a0f      	ldr	r2, [pc, #60]	; (8004df8 <TIM_OC4_SetConfig+0x98>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d109      	bne.n	8004dd4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dc6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	695b      	ldr	r3, [r3, #20]
 8004dcc:	019b      	lsls	r3, r3, #6
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	697a      	ldr	r2, [r7, #20]
 8004dd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	68fa      	ldr	r2, [r7, #12]
 8004dde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	685a      	ldr	r2, [r3, #4]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	621a      	str	r2, [r3, #32]
}
 8004dee:	bf00      	nop
 8004df0:	371c      	adds	r7, #28
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bc80      	pop	{r7}
 8004df6:	4770      	bx	lr
 8004df8:	40012c00 	.word	0x40012c00

08004dfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b087      	sub	sp, #28
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6a1b      	ldr	r3, [r3, #32]
 8004e0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	f023 0201 	bic.w	r2, r3, #1
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	011b      	lsls	r3, r3, #4
 8004e2c:	693a      	ldr	r2, [r7, #16]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	f023 030a 	bic.w	r3, r3, #10
 8004e38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	621a      	str	r2, [r3, #32]
}
 8004e4e:	bf00      	nop
 8004e50:	371c      	adds	r7, #28
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bc80      	pop	{r7}
 8004e56:	4770      	bx	lr

08004e58 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b087      	sub	sp, #28
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6a1b      	ldr	r3, [r3, #32]
 8004e68:	f023 0210 	bic.w	r2, r3, #16
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	699b      	ldr	r3, [r3, #24]
 8004e74:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6a1b      	ldr	r3, [r3, #32]
 8004e7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e82:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	031b      	lsls	r3, r3, #12
 8004e88:	697a      	ldr	r2, [r7, #20]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e94:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	011b      	lsls	r3, r3, #4
 8004e9a:	693a      	ldr	r2, [r7, #16]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	697a      	ldr	r2, [r7, #20]
 8004ea4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	621a      	str	r2, [r3, #32]
}
 8004eac:	bf00      	nop
 8004eae:	371c      	adds	r7, #28
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bc80      	pop	{r7}
 8004eb4:	4770      	bx	lr

08004eb6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004eb6:	b480      	push	{r7}
 8004eb8:	b085      	sub	sp, #20
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
 8004ebe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ecc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ece:	683a      	ldr	r2, [r7, #0]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	f043 0307 	orr.w	r3, r3, #7
 8004ed8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	609a      	str	r2, [r3, #8]
}
 8004ee0:	bf00      	nop
 8004ee2:	3714      	adds	r7, #20
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bc80      	pop	{r7}
 8004ee8:	4770      	bx	lr

08004eea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004eea:	b480      	push	{r7}
 8004eec:	b087      	sub	sp, #28
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	60f8      	str	r0, [r7, #12]
 8004ef2:	60b9      	str	r1, [r7, #8]
 8004ef4:	607a      	str	r2, [r7, #4]
 8004ef6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f04:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	021a      	lsls	r2, r3, #8
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	431a      	orrs	r2, r3
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	697a      	ldr	r2, [r7, #20]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	697a      	ldr	r2, [r7, #20]
 8004f1c:	609a      	str	r2, [r3, #8]
}
 8004f1e:	bf00      	nop
 8004f20:	371c      	adds	r7, #28
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bc80      	pop	{r7}
 8004f26:	4770      	bx	lr

08004f28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b087      	sub	sp, #28
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	f003 031f 	and.w	r3, r3, #31
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6a1a      	ldr	r2, [r3, #32]
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	43db      	mvns	r3, r3
 8004f4a:	401a      	ands	r2, r3
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6a1a      	ldr	r2, [r3, #32]
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	f003 031f 	and.w	r3, r3, #31
 8004f5a:	6879      	ldr	r1, [r7, #4]
 8004f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f60:	431a      	orrs	r2, r3
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	621a      	str	r2, [r3, #32]
}
 8004f66:	bf00      	nop
 8004f68:	371c      	adds	r7, #28
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bc80      	pop	{r7}
 8004f6e:	4770      	bx	lr

08004f70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b085      	sub	sp, #20
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d101      	bne.n	8004f88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f84:	2302      	movs	r3, #2
 8004f86:	e032      	b.n	8004fee <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2202      	movs	r2, #2
 8004f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fc0:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68ba      	ldr	r2, [r7, #8]
 8004fda:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3714      	adds	r7, #20
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bc80      	pop	{r7}
 8004ff6:	4770      	bx	lr

08004ff8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005002:	2300      	movs	r3, #0
 8005004:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800500c:	2b01      	cmp	r3, #1
 800500e:	d101      	bne.n	8005014 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005010:	2302      	movs	r3, #2
 8005012:	e03d      	b.n	8005090 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	4313      	orrs	r3, r2
 8005028:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	4313      	orrs	r3, r2
 8005036:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	4313      	orrs	r3, r2
 8005044:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4313      	orrs	r3, r2
 8005052:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	4313      	orrs	r3, r2
 8005060:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	695b      	ldr	r3, [r3, #20]
 800506c:	4313      	orrs	r3, r2
 800506e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	69db      	ldr	r3, [r3, #28]
 800507a:	4313      	orrs	r3, r2
 800507c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800508e:	2300      	movs	r3, #0
}
 8005090:	4618      	mov	r0, r3
 8005092:	3714      	adds	r7, #20
 8005094:	46bd      	mov	sp, r7
 8005096:	bc80      	pop	{r7}
 8005098:	4770      	bx	lr

0800509a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800509a:	b480      	push	{r7}
 800509c:	b083      	sub	sp, #12
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050a2:	bf00      	nop
 80050a4:	370c      	adds	r7, #12
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bc80      	pop	{r7}
 80050aa:	4770      	bx	lr

080050ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050b4:	bf00      	nop
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bc80      	pop	{r7}
 80050bc:	4770      	bx	lr

080050be <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050be:	b580      	push	{r7, lr}
 80050c0:	b082      	sub	sp, #8
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d101      	bne.n	80050d0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e03f      	b.n	8005150 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d106      	bne.n	80050ea <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f7fc f801 	bl	80010ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2224      	movs	r2, #36	; 0x24
 80050ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68da      	ldr	r2, [r3, #12]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005100:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f828 	bl	8005158 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	691a      	ldr	r2, [r3, #16]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005116:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	695a      	ldr	r2, [r3, #20]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005126:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68da      	ldr	r2, [r3, #12]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005136:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2220      	movs	r2, #32
 8005142:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2220      	movs	r2, #32
 800514a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	3708      	adds	r7, #8
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	68da      	ldr	r2, [r3, #12]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	430a      	orrs	r2, r1
 8005174:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	689a      	ldr	r2, [r3, #8]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	431a      	orrs	r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	695b      	ldr	r3, [r3, #20]
 8005184:	4313      	orrs	r3, r2
 8005186:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005192:	f023 030c 	bic.w	r3, r3, #12
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	6812      	ldr	r2, [r2, #0]
 800519a:	68f9      	ldr	r1, [r7, #12]
 800519c:	430b      	orrs	r3, r1
 800519e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	699a      	ldr	r2, [r3, #24]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	430a      	orrs	r2, r1
 80051b4:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a52      	ldr	r2, [pc, #328]	; (8005304 <UART_SetConfig+0x1ac>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d14e      	bne.n	800525e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80051c0:	f7fe ff9e 	bl	8004100 <HAL_RCC_GetPCLK2Freq>
 80051c4:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051c6:	68ba      	ldr	r2, [r7, #8]
 80051c8:	4613      	mov	r3, r2
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	4413      	add	r3, r2
 80051ce:	009a      	lsls	r2, r3, #2
 80051d0:	441a      	add	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051dc:	4a4a      	ldr	r2, [pc, #296]	; (8005308 <UART_SetConfig+0x1b0>)
 80051de:	fba2 2303 	umull	r2, r3, r2, r3
 80051e2:	095b      	lsrs	r3, r3, #5
 80051e4:	0119      	lsls	r1, r3, #4
 80051e6:	68ba      	ldr	r2, [r7, #8]
 80051e8:	4613      	mov	r3, r2
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	4413      	add	r3, r2
 80051ee:	009a      	lsls	r2, r3, #2
 80051f0:	441a      	add	r2, r3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80051fc:	4b42      	ldr	r3, [pc, #264]	; (8005308 <UART_SetConfig+0x1b0>)
 80051fe:	fba3 0302 	umull	r0, r3, r3, r2
 8005202:	095b      	lsrs	r3, r3, #5
 8005204:	2064      	movs	r0, #100	; 0x64
 8005206:	fb00 f303 	mul.w	r3, r0, r3
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	011b      	lsls	r3, r3, #4
 800520e:	3332      	adds	r3, #50	; 0x32
 8005210:	4a3d      	ldr	r2, [pc, #244]	; (8005308 <UART_SetConfig+0x1b0>)
 8005212:	fba2 2303 	umull	r2, r3, r2, r3
 8005216:	095b      	lsrs	r3, r3, #5
 8005218:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800521c:	4419      	add	r1, r3
 800521e:	68ba      	ldr	r2, [r7, #8]
 8005220:	4613      	mov	r3, r2
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	4413      	add	r3, r2
 8005226:	009a      	lsls	r2, r3, #2
 8005228:	441a      	add	r2, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	fbb2 f2f3 	udiv	r2, r2, r3
 8005234:	4b34      	ldr	r3, [pc, #208]	; (8005308 <UART_SetConfig+0x1b0>)
 8005236:	fba3 0302 	umull	r0, r3, r3, r2
 800523a:	095b      	lsrs	r3, r3, #5
 800523c:	2064      	movs	r0, #100	; 0x64
 800523e:	fb00 f303 	mul.w	r3, r0, r3
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	011b      	lsls	r3, r3, #4
 8005246:	3332      	adds	r3, #50	; 0x32
 8005248:	4a2f      	ldr	r2, [pc, #188]	; (8005308 <UART_SetConfig+0x1b0>)
 800524a:	fba2 2303 	umull	r2, r3, r2, r3
 800524e:	095b      	lsrs	r3, r3, #5
 8005250:	f003 020f 	and.w	r2, r3, #15
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	440a      	add	r2, r1
 800525a:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800525c:	e04d      	b.n	80052fa <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800525e:	f7fe ff3b 	bl	80040d8 <HAL_RCC_GetPCLK1Freq>
 8005262:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005264:	68ba      	ldr	r2, [r7, #8]
 8005266:	4613      	mov	r3, r2
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	4413      	add	r3, r2
 800526c:	009a      	lsls	r2, r3, #2
 800526e:	441a      	add	r2, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	fbb2 f3f3 	udiv	r3, r2, r3
 800527a:	4a23      	ldr	r2, [pc, #140]	; (8005308 <UART_SetConfig+0x1b0>)
 800527c:	fba2 2303 	umull	r2, r3, r2, r3
 8005280:	095b      	lsrs	r3, r3, #5
 8005282:	0119      	lsls	r1, r3, #4
 8005284:	68ba      	ldr	r2, [r7, #8]
 8005286:	4613      	mov	r3, r2
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	4413      	add	r3, r2
 800528c:	009a      	lsls	r2, r3, #2
 800528e:	441a      	add	r2, r3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	fbb2 f2f3 	udiv	r2, r2, r3
 800529a:	4b1b      	ldr	r3, [pc, #108]	; (8005308 <UART_SetConfig+0x1b0>)
 800529c:	fba3 0302 	umull	r0, r3, r3, r2
 80052a0:	095b      	lsrs	r3, r3, #5
 80052a2:	2064      	movs	r0, #100	; 0x64
 80052a4:	fb00 f303 	mul.w	r3, r0, r3
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	011b      	lsls	r3, r3, #4
 80052ac:	3332      	adds	r3, #50	; 0x32
 80052ae:	4a16      	ldr	r2, [pc, #88]	; (8005308 <UART_SetConfig+0x1b0>)
 80052b0:	fba2 2303 	umull	r2, r3, r2, r3
 80052b4:	095b      	lsrs	r3, r3, #5
 80052b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052ba:	4419      	add	r1, r3
 80052bc:	68ba      	ldr	r2, [r7, #8]
 80052be:	4613      	mov	r3, r2
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	4413      	add	r3, r2
 80052c4:	009a      	lsls	r2, r3, #2
 80052c6:	441a      	add	r2, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80052d2:	4b0d      	ldr	r3, [pc, #52]	; (8005308 <UART_SetConfig+0x1b0>)
 80052d4:	fba3 0302 	umull	r0, r3, r3, r2
 80052d8:	095b      	lsrs	r3, r3, #5
 80052da:	2064      	movs	r0, #100	; 0x64
 80052dc:	fb00 f303 	mul.w	r3, r0, r3
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	011b      	lsls	r3, r3, #4
 80052e4:	3332      	adds	r3, #50	; 0x32
 80052e6:	4a08      	ldr	r2, [pc, #32]	; (8005308 <UART_SetConfig+0x1b0>)
 80052e8:	fba2 2303 	umull	r2, r3, r2, r3
 80052ec:	095b      	lsrs	r3, r3, #5
 80052ee:	f003 020f 	and.w	r2, r3, #15
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	440a      	add	r2, r1
 80052f8:	609a      	str	r2, [r3, #8]
}
 80052fa:	bf00      	nop
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	40013800 	.word	0x40013800
 8005308:	51eb851f 	.word	0x51eb851f

0800530c <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800530c:	b084      	sub	sp, #16
 800530e:	b480      	push	{r7}
 8005310:	b083      	sub	sp, #12
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
 8005316:	f107 0014 	add.w	r0, r7, #20
 800531a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	bc80      	pop	{r7}
 8005328:	b004      	add	sp, #16
 800532a:	4770      	bx	lr

0800532c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800532c:	b480      	push	{r7}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005334:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005338:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005340:	b29a      	uxth	r2, r3
 8005342:	89fb      	ldrh	r3, [r7, #14]
 8005344:	4313      	orrs	r3, r2
 8005346:	b29a      	uxth	r2, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800534e:	2300      	movs	r3, #0
}
 8005350:	4618      	mov	r0, r3
 8005352:	3714      	adds	r7, #20
 8005354:	46bd      	mov	sp, r7
 8005356:	bc80      	pop	{r7}
 8005358:	4770      	bx	lr

0800535a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800535a:	b480      	push	{r7}
 800535c:	b085      	sub	sp, #20
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005362:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005366:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800536e:	b29b      	uxth	r3, r3
 8005370:	b21a      	sxth	r2, r3
 8005372:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005376:	43db      	mvns	r3, r3
 8005378:	b21b      	sxth	r3, r3
 800537a:	4013      	ands	r3, r2
 800537c:	b21b      	sxth	r3, r3
 800537e:	b29a      	uxth	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005386:	2300      	movs	r3, #0
}
 8005388:	4618      	mov	r0, r3
 800538a:	3714      	adds	r7, #20
 800538c:	46bd      	mov	sp, r7
 800538e:	bc80      	pop	{r7}
 8005390:	4770      	bx	lr

08005392 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005392:	b480      	push	{r7}
 8005394:	b083      	sub	sp, #12
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
 800539a:	460b      	mov	r3, r1
 800539c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bc80      	pop	{r7}
 80053a8:	4770      	bx	lr

080053aa <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80053aa:	b084      	sub	sp, #16
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	f107 0014 	add.w	r0, r7, #20
 80053b8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f7ff ffa5 	bl	800532c <USB_EnableGlobalInt>

  return HAL_OK;
 80053e2:	2300      	movs	r3, #0
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3708      	adds	r7, #8
 80053e8:	46bd      	mov	sp, r7
 80053ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053ee:	b004      	add	sp, #16
 80053f0:	4770      	bx	lr

080053f2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80053f2:	b480      	push	{r7}
 80053f4:	b083      	sub	sp, #12
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	bc80      	pop	{r7}
 8005404:	4770      	bx	lr

08005406 <tu_desc_next>:

//--------------------------------------------------------------------+
// Descriptor helper
//--------------------------------------------------------------------+
static inline uint8_t const * tu_desc_next(void const* desc)
{
 8005406:	b480      	push	{r7}
 8005408:	b085      	sub	sp, #20
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
  uint8_t const* desc8 = (uint8_t const*) desc;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	461a      	mov	r2, r3
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	4413      	add	r3, r2
}
 800541c:	4618      	mov	r0, r3
 800541e:	3714      	adds	r7, #20
 8005420:	46bd      	mov	sp, r7
 8005422:	bc80      	pop	{r7}
 8005424:	4770      	bx	lr

08005426 <tu_desc_type>:

static inline uint8_t tu_desc_type(void const* desc)
{
 8005426:	b480      	push	{r7}
 8005428:	b083      	sub	sp, #12
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	3301      	adds	r3, #1
 8005432:	781b      	ldrb	r3, [r3, #0]
}
 8005434:	4618      	mov	r0, r3
 8005436:	370c      	adds	r7, #12
 8005438:	46bd      	mov	sp, r7
 800543a:	bc80      	pop	{r7}
 800543c:	4770      	bx	lr

0800543e <tu_desc_len>:

static inline uint8_t tu_desc_len(void const* desc)
{
 800543e:	b480      	push	{r7}
 8005440:	b083      	sub	sp, #12
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	781b      	ldrb	r3, [r3, #0]
}
 800544a:	4618      	mov	r0, r3
 800544c:	370c      	adds	r7, #12
 800544e:	46bd      	mov	sp, r7
 8005450:	bc80      	pop	{r7}
 8005452:	4770      	bx	lr

08005454 <tu_within>:
//------------- Mathematics -------------//
static inline uint32_t tu_abs(int32_t value) { return (uint32_t)((value < 0) ? (-value) : value); }

/// inclusive range checking
static inline bool tu_within(uint32_t lower, uint32_t value, uint32_t upper)
{
 8005454:	b480      	push	{r7}
 8005456:	b085      	sub	sp, #20
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	607a      	str	r2, [r7, #4]
  return (lower <= value) && (value <= upper);
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	429a      	cmp	r2, r3
 8005466:	d805      	bhi.n	8005474 <tu_within+0x20>
 8005468:	68ba      	ldr	r2, [r7, #8]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	429a      	cmp	r2, r3
 800546e:	d801      	bhi.n	8005474 <tu_within+0x20>
 8005470:	2301      	movs	r3, #1
 8005472:	e000      	b.n	8005476 <tu_within+0x22>
 8005474:	2300      	movs	r3, #0
 8005476:	f003 0301 	and.w	r3, r3, #1
 800547a:	b2db      	uxtb	r3, r3
}
 800547c:	4618      	mov	r0, r3
 800547e:	3714      	adds	r7, #20
 8005480:	46bd      	mov	sp, r7
 8005482:	bc80      	pop	{r7}
 8005484:	4770      	bx	lr

08005486 <tu_bit_test>:
}

// Bit
static inline uint32_t tu_bit_set  (uint32_t value, uint8_t pos) { return value | TU_BIT(pos);                  }
static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8005486:	b480      	push	{r7}
 8005488:	b083      	sub	sp, #12
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
 800548e:	460b      	mov	r3, r1
 8005490:	70fb      	strb	r3, [r7, #3]
 8005492:	78fb      	ldrb	r3, [r7, #3]
 8005494:	2201      	movs	r2, #1
 8005496:	409a      	lsls	r2, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4013      	ands	r3, r2
 800549c:	2b00      	cmp	r3, #0
 800549e:	bf14      	ite	ne
 80054a0:	2301      	movne	r3, #1
 80054a2:	2300      	moveq	r3, #0
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	4618      	mov	r0, r3
 80054a8:	370c      	adds	r7, #12
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bc80      	pop	{r7}
 80054ae:	4770      	bx	lr

080054b0 <tud_ready>:
// Check if device is suspended
bool tud_suspended(void);

// Check if device is ready to transfer
static inline bool tud_ready(void)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	af00      	add	r7, sp, #0
  return tud_mounted() && !tud_suspended();
 80054b4:	f002 fce6 	bl	8007e84 <tud_mounted>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d009      	beq.n	80054d2 <tud_ready+0x22>
 80054be:	f002 fcf3 	bl	8007ea8 <tud_suspended>
 80054c2:	4603      	mov	r3, r0
 80054c4:	f083 0301 	eor.w	r3, r3, #1
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d001      	beq.n	80054d2 <tud_ready+0x22>
 80054ce:	2301      	movs	r3, #1
 80054d0:	e000      	b.n	80054d4 <tud_ready+0x24>
 80054d2:	2300      	movs	r3, #0
 80054d4:	f003 0301 	and.w	r3, r3, #1
 80054d8:	b2db      	uxtb	r3, r3
}
 80054da:	4618      	mov	r0, r3
 80054dc:	bd80      	pop	{r7, pc}

080054de <tu_fifo_count>:
{
  return (f->count == f->depth);
}

static inline uint16_t tu_fifo_count(tu_fifo_t* f)
{
 80054de:	b480      	push	{r7}
 80054e0:	b083      	sub	sp, #12
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
  return f->count;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	895b      	ldrh	r3, [r3, #10]
 80054ea:	b29b      	uxth	r3, r3
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bc80      	pop	{r7}
 80054f4:	4770      	bx	lr

080054f6 <tu_fifo_remaining>:

static inline uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
 80054f6:	b480      	push	{r7}
 80054f8:	b083      	sub	sp, #12
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
  return f->depth - f->count;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	889a      	ldrh	r2, [r3, #4]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	895b      	ldrh	r3, [r3, #10]
 8005506:	b29b      	uxth	r3, r3
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	b29b      	uxth	r3, r3
}
 800550c:	4618      	mov	r0, r3
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	bc80      	pop	{r7}
 8005514:	4770      	bx	lr
	...

08005518 <_prep_out_transaction>:
// INTERNAL OBJECT & FUNCTION DECLARATION
//--------------------------------------------------------------------+
CFG_TUSB_MEM_SECTION static cdcd_interface_t _cdcd_itf[CFG_TUD_CDC];

static void _prep_out_transaction (uint8_t itf)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	4603      	mov	r3, r0
 8005520:	71fb      	strb	r3, [r7, #7]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8005522:	79fb      	ldrb	r3, [r7, #7]
 8005524:	f44f 7298 	mov.w	r2, #304	; 0x130
 8005528:	fb02 f303 	mul.w	r3, r2, r3
 800552c:	4a11      	ldr	r2, [pc, #68]	; (8005574 <_prep_out_transaction+0x5c>)
 800552e:	4413      	add	r3, r2
 8005530:	60fb      	str	r3, [r7, #12]

  // skip if previous transfer not complete
  if ( usbd_edpt_busy(TUD_OPT_RHPORT, p_cdc->ep_out) ) return;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	78db      	ldrb	r3, [r3, #3]
 8005536:	4619      	mov	r1, r3
 8005538:	2000      	movs	r0, #0
 800553a:	f003 fc63 	bl	8008e04 <usbd_edpt_busy>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d113      	bne.n	800556c <_prep_out_transaction+0x54>

  // Prepare for incoming data but only allow what we can store in the ring buffer.
  uint16_t max_read = tu_fifo_remaining(&p_cdc->rx_ff);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	3310      	adds	r3, #16
 8005548:	4618      	mov	r0, r3
 800554a:	f7ff ffd4 	bl	80054f6 <tu_fifo_remaining>
 800554e:	4603      	mov	r3, r0
 8005550:	817b      	strh	r3, [r7, #10]
  if ( max_read >= CFG_TUD_CDC_EPSIZE )
 8005552:	897b      	ldrh	r3, [r7, #10]
 8005554:	2b3f      	cmp	r3, #63	; 0x3f
 8005556:	d90a      	bls.n	800556e <_prep_out_transaction+0x56>
  {
    usbd_edpt_xfer(TUD_OPT_RHPORT, p_cdc->ep_out, p_cdc->epout_buf, CFG_TUD_CDC_EPSIZE);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	78d9      	ldrb	r1, [r3, #3]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8005562:	2340      	movs	r3, #64	; 0x40
 8005564:	2000      	movs	r0, #0
 8005566:	f003 fc15 	bl	8008d94 <usbd_edpt_xfer>
 800556a:	e000      	b.n	800556e <_prep_out_transaction+0x56>
  if ( usbd_edpt_busy(TUD_OPT_RHPORT, p_cdc->ep_out) ) return;
 800556c:	bf00      	nop
  }
}
 800556e:	3710      	adds	r7, #16
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}
 8005574:	200021d4 	.word	0x200021d4

08005578 <tud_cdc_n_connected>:

//--------------------------------------------------------------------+
// APPLICATION API
//--------------------------------------------------------------------+
bool tud_cdc_n_connected(uint8_t itf)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
 800557e:	4603      	mov	r3, r0
 8005580:	71fb      	strb	r3, [r7, #7]
  // DTR (bit 0) active  is considered as connected
  return tud_ready() && tu_bit_test(_cdcd_itf[itf].line_state, 0);
 8005582:	f7ff ff95 	bl	80054b0 <tud_ready>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d011      	beq.n	80055b0 <tud_cdc_n_connected+0x38>
 800558c:	79fb      	ldrb	r3, [r7, #7]
 800558e:	4a0c      	ldr	r2, [pc, #48]	; (80055c0 <tud_cdc_n_connected+0x48>)
 8005590:	f44f 7198 	mov.w	r1, #304	; 0x130
 8005594:	fb01 f303 	mul.w	r3, r1, r3
 8005598:	4413      	add	r3, r2
 800559a:	3304      	adds	r3, #4
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	2100      	movs	r1, #0
 80055a0:	4618      	mov	r0, r3
 80055a2:	f7ff ff70 	bl	8005486 <tu_bit_test>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d001      	beq.n	80055b0 <tud_cdc_n_connected+0x38>
 80055ac:	2301      	movs	r3, #1
 80055ae:	e000      	b.n	80055b2 <tud_cdc_n_connected+0x3a>
 80055b0:	2300      	movs	r3, #0
 80055b2:	f003 0301 	and.w	r3, r3, #1
 80055b6:	b2db      	uxtb	r3, r3
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3708      	adds	r7, #8
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}
 80055c0:	200021d4 	.word	0x200021d4

080055c4 <tud_cdc_n_available>:

//--------------------------------------------------------------------+
// READ API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_available(uint8_t itf)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	4603      	mov	r3, r0
 80055cc:	71fb      	strb	r3, [r7, #7]
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
 80055ce:	79fb      	ldrb	r3, [r7, #7]
 80055d0:	f44f 7298 	mov.w	r2, #304	; 0x130
 80055d4:	fb02 f303 	mul.w	r3, r2, r3
 80055d8:	3310      	adds	r3, #16
 80055da:	4a05      	ldr	r2, [pc, #20]	; (80055f0 <tud_cdc_n_available+0x2c>)
 80055dc:	4413      	add	r3, r2
 80055de:	4618      	mov	r0, r3
 80055e0:	f7ff ff7d 	bl	80054de <tu_fifo_count>
 80055e4:	4603      	mov	r3, r0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3708      	adds	r7, #8
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	200021d4 	.word	0x200021d4

080055f4 <tud_cdc_n_read>:

uint32_t tud_cdc_n_read(uint8_t itf, void* buffer, uint32_t bufsize)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b086      	sub	sp, #24
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	4603      	mov	r3, r0
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	607a      	str	r2, [r7, #4]
 8005600:	73fb      	strb	r3, [r7, #15]
  uint32_t num_read = tu_fifo_read_n(&_cdcd_itf[itf].rx_ff, buffer, bufsize);
 8005602:	7bfb      	ldrb	r3, [r7, #15]
 8005604:	f44f 7298 	mov.w	r2, #304	; 0x130
 8005608:	fb02 f303 	mul.w	r3, r2, r3
 800560c:	3310      	adds	r3, #16
 800560e:	4a09      	ldr	r2, [pc, #36]	; (8005634 <tud_cdc_n_read+0x40>)
 8005610:	4413      	add	r3, r2
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	b292      	uxth	r2, r2
 8005616:	68b9      	ldr	r1, [r7, #8]
 8005618:	4618      	mov	r0, r3
 800561a:	f002 fabc 	bl	8007b96 <tu_fifo_read_n>
 800561e:	4603      	mov	r3, r0
 8005620:	617b      	str	r3, [r7, #20]
  _prep_out_transaction(itf);
 8005622:	7bfb      	ldrb	r3, [r7, #15]
 8005624:	4618      	mov	r0, r3
 8005626:	f7ff ff77 	bl	8005518 <_prep_out_transaction>
  return num_read;
 800562a:	697b      	ldr	r3, [r7, #20]
}
 800562c:	4618      	mov	r0, r3
 800562e:	3718      	adds	r7, #24
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}
 8005634:	200021d4 	.word	0x200021d4

08005638 <tud_cdc_n_write>:

//--------------------------------------------------------------------+
// WRITE API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_write(uint8_t itf, void const* buffer, uint32_t bufsize)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b086      	sub	sp, #24
 800563c:	af00      	add	r7, sp, #0
 800563e:	4603      	mov	r3, r0
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	607a      	str	r2, [r7, #4]
 8005644:	73fb      	strb	r3, [r7, #15]
  uint16_t ret = tu_fifo_write_n(&_cdcd_itf[itf].tx_ff, buffer, bufsize);
 8005646:	7bfb      	ldrb	r3, [r7, #15]
 8005648:	f44f 7298 	mov.w	r2, #304	; 0x130
 800564c:	fb02 f303 	mul.w	r3, r2, r3
 8005650:	3320      	adds	r3, #32
 8005652:	4a07      	ldr	r2, [pc, #28]	; (8005670 <tud_cdc_n_write+0x38>)
 8005654:	4413      	add	r3, r2
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	b292      	uxth	r2, r2
 800565a:	68b9      	ldr	r1, [r7, #8]
 800565c:	4618      	mov	r0, r3
 800565e:	f002 faea 	bl	8007c36 <tu_fifo_write_n>
 8005662:	4603      	mov	r3, r0
 8005664:	82fb      	strh	r3, [r7, #22]
  {
    tud_cdc_n_write_flush(itf);
  }
#endif

  return ret;
 8005666:	8afb      	ldrh	r3, [r7, #22]
}
 8005668:	4618      	mov	r0, r3
 800566a:	3718      	adds	r7, #24
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}
 8005670:	200021d4 	.word	0x200021d4

08005674 <tud_cdc_n_write_flush>:

bool tud_cdc_n_write_flush (uint8_t itf)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b086      	sub	sp, #24
 8005678:	af00      	add	r7, sp, #0
 800567a:	4603      	mov	r3, r0
 800567c:	71fb      	strb	r3, [r7, #7]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 800567e:	79fb      	ldrb	r3, [r7, #7]
 8005680:	f44f 7298 	mov.w	r2, #304	; 0x130
 8005684:	fb02 f303 	mul.w	r3, r2, r3
 8005688:	4a25      	ldr	r2, [pc, #148]	; (8005720 <tud_cdc_n_write_flush+0xac>)
 800568a:	4413      	add	r3, r2
 800568c:	617b      	str	r3, [r7, #20]
  TU_VERIFY( !usbd_edpt_busy(TUD_OPT_RHPORT, p_cdc->ep_in) ); // skip if previous transfer not complete
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	789b      	ldrb	r3, [r3, #2]
 8005692:	4619      	mov	r1, r3
 8005694:	2000      	movs	r0, #0
 8005696:	f003 fbb5 	bl	8008e04 <usbd_edpt_busy>
 800569a:	4603      	mov	r3, r0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d001      	beq.n	80056a4 <tud_cdc_n_write_flush+0x30>
 80056a0:	2300      	movs	r3, #0
 80056a2:	e039      	b.n	8005718 <tud_cdc_n_write_flush+0xa4>

  uint16_t count = tu_fifo_read_n(&_cdcd_itf[itf].tx_ff, p_cdc->epin_buf, CFG_TUD_CDC_EPSIZE);
 80056a4:	79fb      	ldrb	r3, [r7, #7]
 80056a6:	f44f 7298 	mov.w	r2, #304	; 0x130
 80056aa:	fb02 f303 	mul.w	r3, r2, r3
 80056ae:	3320      	adds	r3, #32
 80056b0:	4a1b      	ldr	r2, [pc, #108]	; (8005720 <tud_cdc_n_write_flush+0xac>)
 80056b2:	1898      	adds	r0, r3, r2
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	33f0      	adds	r3, #240	; 0xf0
 80056b8:	2240      	movs	r2, #64	; 0x40
 80056ba:	4619      	mov	r1, r3
 80056bc:	f002 fa6b 	bl	8007b96 <tu_fifo_read_n>
 80056c0:	4603      	mov	r3, r0
 80056c2:	827b      	strh	r3, [r7, #18]
  if ( count )
 80056c4:	8a7b      	ldrh	r3, [r7, #18]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d025      	beq.n	8005716 <tud_cdc_n_write_flush+0xa2>
  {
    TU_VERIFY( tud_cdc_n_connected(itf) ); // fifo is empty if not connected
 80056ca:	79fb      	ldrb	r3, [r7, #7]
 80056cc:	4618      	mov	r0, r3
 80056ce:	f7ff ff53 	bl	8005578 <tud_cdc_n_connected>
 80056d2:	4603      	mov	r3, r0
 80056d4:	f083 0301 	eor.w	r3, r3, #1
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d001      	beq.n	80056e2 <tud_cdc_n_write_flush+0x6e>
 80056de:	2300      	movs	r3, #0
 80056e0:	e01a      	b.n	8005718 <tud_cdc_n_write_flush+0xa4>
    TU_ASSERT( usbd_edpt_xfer(TUD_OPT_RHPORT, p_cdc->ep_in, p_cdc->epin_buf, count) );
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	7899      	ldrb	r1, [r3, #2]
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
 80056ec:	8a7b      	ldrh	r3, [r7, #18]
 80056ee:	2000      	movs	r0, #0
 80056f0:	f003 fb50 	bl	8008d94 <usbd_edpt_xfer>
 80056f4:	4603      	mov	r3, r0
 80056f6:	f083 0301 	eor.w	r3, r3, #1
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00a      	beq.n	8005716 <tud_cdc_n_write_flush+0xa2>
 8005700:	4b08      	ldr	r3, [pc, #32]	; (8005724 <tud_cdc_n_write_flush+0xb0>)
 8005702:	60fb      	str	r3, [r7, #12]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0301 	and.w	r3, r3, #1
 800570c:	2b00      	cmp	r3, #0
 800570e:	d000      	beq.n	8005712 <tud_cdc_n_write_flush+0x9e>
 8005710:	be00      	bkpt	0x0000
 8005712:	2300      	movs	r3, #0
 8005714:	e000      	b.n	8005718 <tud_cdc_n_write_flush+0xa4>
  }

  return true;
 8005716:	2301      	movs	r3, #1
}
 8005718:	4618      	mov	r0, r3
 800571a:	3718      	adds	r7, #24
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	200021d4 	.word	0x200021d4
 8005724:	e000edf0 	.word	0xe000edf0

08005728 <cdcd_init>:

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void cdcd_init(void)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af02      	add	r7, sp, #8
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
 800572e:	f44f 7298 	mov.w	r2, #304	; 0x130
 8005732:	2100      	movs	r1, #0
 8005734:	4824      	ldr	r0, [pc, #144]	; (80057c8 <cdcd_init+0xa0>)
 8005736:	f004 ff5d 	bl	800a5f4 <memset>

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 800573a:	2300      	movs	r3, #0
 800573c:	71fb      	strb	r3, [r7, #7]
 800573e:	e03b      	b.n	80057b8 <cdcd_init+0x90>
  {
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 8005740:	79fb      	ldrb	r3, [r7, #7]
 8005742:	f44f 7298 	mov.w	r2, #304	; 0x130
 8005746:	fb02 f303 	mul.w	r3, r2, r3
 800574a:	4a1f      	ldr	r2, [pc, #124]	; (80057c8 <cdcd_init+0xa0>)
 800574c:	4413      	add	r3, r2
 800574e:	603b      	str	r3, [r7, #0]

    p_cdc->wanted_char = -1;
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	22ff      	movs	r2, #255	; 0xff
 8005754:	715a      	strb	r2, [r3, #5]

    // default line coding is : stop bit = 1, parity = none, data bits = 8
    p_cdc->line_coding.bit_rate = 115200;
 8005756:	683a      	ldr	r2, [r7, #0]
 8005758:	2300      	movs	r3, #0
 800575a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800575e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005762:	f443 4342 	orr.w	r3, r3, #49664	; 0xc200
 8005766:	80d3      	strh	r3, [r2, #6]
 8005768:	2300      	movs	r3, #0
 800576a:	f043 0301 	orr.w	r3, r3, #1
 800576e:	8113      	strh	r3, [r2, #8]
    p_cdc->line_coding.stop_bits = 0;
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	2200      	movs	r2, #0
 8005774:	729a      	strb	r2, [r3, #10]
    p_cdc->line_coding.parity    = 0;
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	2200      	movs	r2, #0
 800577a:	72da      	strb	r2, [r3, #11]
    p_cdc->line_coding.data_bits = 8;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	2208      	movs	r2, #8
 8005780:	731a      	strb	r2, [r3, #12]

    // config fifo
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, CFG_TUD_CDC_RX_BUFSIZE, 1, false);
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	f103 0010 	add.w	r0, r3, #16
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800578e:	2300      	movs	r3, #0
 8005790:	9300      	str	r3, [sp, #0]
 8005792:	2301      	movs	r3, #1
 8005794:	2240      	movs	r2, #64	; 0x40
 8005796:	f002 f958 	bl	8007a4a <tu_fifo_config>
    tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, CFG_TUD_CDC_TX_BUFSIZE, 1, false);
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	f103 0020 	add.w	r0, r3, #32
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	f103 0170 	add.w	r1, r3, #112	; 0x70
 80057a6:	2300      	movs	r3, #0
 80057a8:	9300      	str	r3, [sp, #0]
 80057aa:	2301      	movs	r3, #1
 80057ac:	2240      	movs	r2, #64	; 0x40
 80057ae:	f002 f94c 	bl	8007a4a <tu_fifo_config>
  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 80057b2:	79fb      	ldrb	r3, [r7, #7]
 80057b4:	3301      	adds	r3, #1
 80057b6:	71fb      	strb	r3, [r7, #7]
 80057b8:	79fb      	ldrb	r3, [r7, #7]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d0c0      	beq.n	8005740 <cdcd_init+0x18>
#if CFG_FIFO_MUTEX
    tu_fifo_config_mutex(&p_cdc->rx_ff, osal_mutex_create(&p_cdc->rx_ff_mutex));
    tu_fifo_config_mutex(&p_cdc->tx_ff, osal_mutex_create(&p_cdc->tx_ff_mutex));
#endif
  }
}
 80057be:	bf00      	nop
 80057c0:	3708      	adds	r7, #8
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop
 80057c8:	200021d4 	.word	0x200021d4

080057cc <cdcd_reset>:

void cdcd_reset(uint8_t rhport)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	4603      	mov	r3, r0
 80057d4:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 80057d6:	2300      	movs	r3, #0
 80057d8:	73fb      	strb	r3, [r7, #15]
 80057da:	e024      	b.n	8005826 <cdcd_reset+0x5a>
  {
    tu_memclr(&_cdcd_itf[i], ITF_MEM_RESET_SIZE);
 80057dc:	7bfb      	ldrb	r3, [r7, #15]
 80057de:	f44f 7298 	mov.w	r2, #304	; 0x130
 80057e2:	fb02 f303 	mul.w	r3, r2, r3
 80057e6:	4a13      	ldr	r2, [pc, #76]	; (8005834 <cdcd_reset+0x68>)
 80057e8:	4413      	add	r3, r2
 80057ea:	2205      	movs	r2, #5
 80057ec:	2100      	movs	r1, #0
 80057ee:	4618      	mov	r0, r3
 80057f0:	f004 ff00 	bl	800a5f4 <memset>
    tu_fifo_clear(&_cdcd_itf[i].rx_ff);
 80057f4:	7bfb      	ldrb	r3, [r7, #15]
 80057f6:	f44f 7298 	mov.w	r2, #304	; 0x130
 80057fa:	fb02 f303 	mul.w	r3, r2, r3
 80057fe:	3310      	adds	r3, #16
 8005800:	4a0c      	ldr	r2, [pc, #48]	; (8005834 <cdcd_reset+0x68>)
 8005802:	4413      	add	r3, r2
 8005804:	4618      	mov	r0, r3
 8005806:	f002 fa50 	bl	8007caa <tu_fifo_clear>
    tu_fifo_clear(&_cdcd_itf[i].tx_ff);
 800580a:	7bfb      	ldrb	r3, [r7, #15]
 800580c:	f44f 7298 	mov.w	r2, #304	; 0x130
 8005810:	fb02 f303 	mul.w	r3, r2, r3
 8005814:	3320      	adds	r3, #32
 8005816:	4a07      	ldr	r2, [pc, #28]	; (8005834 <cdcd_reset+0x68>)
 8005818:	4413      	add	r3, r2
 800581a:	4618      	mov	r0, r3
 800581c:	f002 fa45 	bl	8007caa <tu_fifo_clear>
  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 8005820:	7bfb      	ldrb	r3, [r7, #15]
 8005822:	3301      	adds	r3, #1
 8005824:	73fb      	strb	r3, [r7, #15]
 8005826:	7bfb      	ldrb	r3, [r7, #15]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d0d7      	beq.n	80057dc <cdcd_reset+0x10>
  }
}
 800582c:	bf00      	nop
 800582e:	3710      	adds	r7, #16
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	200021d4 	.word	0x200021d4

08005838 <cdcd_open>:

bool cdcd_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t *p_length)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b08e      	sub	sp, #56	; 0x38
 800583c:	af02      	add	r7, sp, #8
 800583e:	4603      	mov	r3, r0
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	607a      	str	r2, [r7, #4]
 8005844:	73fb      	strb	r3, [r7, #15]
  // Only support ACM subclass
  TU_ASSERT ( CDC_COMM_SUBCLASS_ABSTRACT_CONTROL_MODEL == itf_desc->bInterfaceSubClass);
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	799b      	ldrb	r3, [r3, #6]
 800584a:	2b02      	cmp	r3, #2
 800584c:	d00a      	beq.n	8005864 <cdcd_open+0x2c>
 800584e:	4b71      	ldr	r3, [pc, #452]	; (8005a14 <cdcd_open+0x1dc>)
 8005850:	613b      	str	r3, [r7, #16]
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 0301 	and.w	r3, r3, #1
 800585a:	2b00      	cmp	r3, #0
 800585c:	d000      	beq.n	8005860 <cdcd_open+0x28>
 800585e:	be00      	bkpt	0x0000
 8005860:	2300      	movs	r3, #0
 8005862:	e0d3      	b.n	8005a0c <cdcd_open+0x1d4>

  // Only support AT commands, no protocol and vendor specific commands.
  TU_ASSERT(tu_within(CDC_COMM_PROTOCOL_NONE, itf_desc->bInterfaceProtocol, CDC_COMM_PROTOCOL_ATCOMMAND_CDMA) ||
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	79db      	ldrb	r3, [r3, #7]
 8005868:	2206      	movs	r2, #6
 800586a:	4619      	mov	r1, r3
 800586c:	2000      	movs	r0, #0
 800586e:	f7ff fdf1 	bl	8005454 <tu_within>
 8005872:	4603      	mov	r3, r0
 8005874:	f083 0301 	eor.w	r3, r3, #1
 8005878:	b2db      	uxtb	r3, r3
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00e      	beq.n	800589c <cdcd_open+0x64>
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	79db      	ldrb	r3, [r3, #7]
 8005882:	2bff      	cmp	r3, #255	; 0xff
 8005884:	d00a      	beq.n	800589c <cdcd_open+0x64>
 8005886:	4b63      	ldr	r3, [pc, #396]	; (8005a14 <cdcd_open+0x1dc>)
 8005888:	623b      	str	r3, [r7, #32]
 800588a:	6a3b      	ldr	r3, [r7, #32]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0301 	and.w	r3, r3, #1
 8005892:	2b00      	cmp	r3, #0
 8005894:	d000      	beq.n	8005898 <cdcd_open+0x60>
 8005896:	be00      	bkpt	0x0000
 8005898:	2300      	movs	r3, #0
 800589a:	e0b7      	b.n	8005a0c <cdcd_open+0x1d4>
            itf_desc->bInterfaceProtocol == 0xff);

  // Find available interface
  cdcd_interface_t * p_cdc = NULL;
 800589c:	2300      	movs	r3, #0
 800589e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t cdc_id;
  for(cdc_id=0; cdc_id<CFG_TUD_CDC; cdc_id++)
 80058a0:	2300      	movs	r3, #0
 80058a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058a6:	e01a      	b.n	80058de <cdcd_open+0xa6>
  {
    if ( _cdcd_itf[cdc_id].ep_in == 0 )
 80058a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80058ac:	4a5a      	ldr	r2, [pc, #360]	; (8005a18 <cdcd_open+0x1e0>)
 80058ae:	f44f 7198 	mov.w	r1, #304	; 0x130
 80058b2:	fb01 f303 	mul.w	r3, r1, r3
 80058b6:	4413      	add	r3, r2
 80058b8:	3302      	adds	r3, #2
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d109      	bne.n	80058d4 <cdcd_open+0x9c>
    {
      p_cdc = &_cdcd_itf[cdc_id];
 80058c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80058c4:	f44f 7298 	mov.w	r2, #304	; 0x130
 80058c8:	fb02 f303 	mul.w	r3, r2, r3
 80058cc:	4a52      	ldr	r2, [pc, #328]	; (8005a18 <cdcd_open+0x1e0>)
 80058ce:	4413      	add	r3, r2
 80058d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 80058d2:	e008      	b.n	80058e6 <cdcd_open+0xae>
  for(cdc_id=0; cdc_id<CFG_TUD_CDC; cdc_id++)
 80058d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80058d8:	3301      	adds	r3, #1
 80058da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d0e0      	beq.n	80058a8 <cdcd_open+0x70>
    }
  }
  TU_ASSERT(p_cdc);
 80058e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d10a      	bne.n	8005902 <cdcd_open+0xca>
 80058ec:	4b49      	ldr	r3, [pc, #292]	; (8005a14 <cdcd_open+0x1dc>)
 80058ee:	617b      	str	r3, [r7, #20]
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 0301 	and.w	r3, r3, #1
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d000      	beq.n	80058fe <cdcd_open+0xc6>
 80058fc:	be00      	bkpt	0x0000
 80058fe:	2300      	movs	r3, #0
 8005900:	e084      	b.n	8005a0c <cdcd_open+0x1d4>

  //------------- Control Interface -------------//
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	789a      	ldrb	r2, [r3, #2]
 8005906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005908:	701a      	strb	r2, [r3, #0]

  uint8_t const * p_desc = tu_desc_next( itf_desc );
 800590a:	68b8      	ldr	r0, [r7, #8]
 800590c:	f7ff fd7b 	bl	8005406 <tu_desc_next>
 8005910:	6278      	str	r0, [r7, #36]	; 0x24
  (*p_length) = sizeof(tusb_desc_interface_t);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2209      	movs	r2, #9
 8005916:	801a      	strh	r2, [r3, #0]

  // Communication Functional Descriptors
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) )
 8005918:	e00f      	b.n	800593a <cdcd_open+0x102>
  {
    (*p_length) += tu_desc_len(p_desc);
 800591a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800591c:	f7ff fd8f 	bl	800543e <tu_desc_len>
 8005920:	4603      	mov	r3, r0
 8005922:	4619      	mov	r1, r3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	881a      	ldrh	r2, [r3, #0]
 8005928:	b28b      	uxth	r3, r1
 800592a:	4413      	add	r3, r2
 800592c:	b29a      	uxth	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	801a      	strh	r2, [r3, #0]
    p_desc = tu_desc_next(p_desc);
 8005932:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005934:	f7ff fd67 	bl	8005406 <tu_desc_next>
 8005938:	6278      	str	r0, [r7, #36]	; 0x24
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) )
 800593a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800593c:	f7ff fd73 	bl	8005426 <tu_desc_type>
 8005940:	4603      	mov	r3, r0
 8005942:	2b24      	cmp	r3, #36	; 0x24
 8005944:	d0e9      	beq.n	800591a <cdcd_open+0xe2>
  }

  if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 8005946:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005948:	f7ff fd6d 	bl	8005426 <tu_desc_type>
 800594c:	4603      	mov	r3, r0
 800594e:	2b05      	cmp	r3, #5
 8005950:	d126      	bne.n	80059a0 <cdcd_open+0x168>
  {
    // notification endpoint if any
    TU_ASSERT( dcd_edpt_open(rhport, (tusb_desc_endpoint_t const *) p_desc) );
 8005952:	7bfb      	ldrb	r3, [r7, #15]
 8005954:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005956:	4618      	mov	r0, r3
 8005958:	f004 fb6e 	bl	800a038 <dcd_edpt_open>
 800595c:	4603      	mov	r3, r0
 800595e:	f083 0301 	eor.w	r3, r3, #1
 8005962:	b2db      	uxtb	r3, r3
 8005964:	2b00      	cmp	r3, #0
 8005966:	d00a      	beq.n	800597e <cdcd_open+0x146>
 8005968:	4b2a      	ldr	r3, [pc, #168]	; (8005a14 <cdcd_open+0x1dc>)
 800596a:	61fb      	str	r3, [r7, #28]
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 0301 	and.w	r3, r3, #1
 8005974:	2b00      	cmp	r3, #0
 8005976:	d000      	beq.n	800597a <cdcd_open+0x142>
 8005978:	be00      	bkpt	0x0000
 800597a:	2300      	movs	r3, #0
 800597c:	e046      	b.n	8005a0c <cdcd_open+0x1d4>

    p_cdc->ep_notif = ((tusb_desc_endpoint_t const *) p_desc)->bEndpointAddress;
 800597e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005980:	789a      	ldrb	r2, [r3, #2]
 8005982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005984:	705a      	strb	r2, [r3, #1]

    (*p_length) += p_desc[DESC_OFFSET_LEN];
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	881a      	ldrh	r2, [r3, #0]
 800598a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	b29b      	uxth	r3, r3
 8005990:	4413      	add	r3, r2
 8005992:	b29a      	uxth	r2, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	801a      	strh	r2, [r3, #0]
    p_desc = tu_desc_next(p_desc);
 8005998:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800599a:	f7ff fd34 	bl	8005406 <tu_desc_next>
 800599e:	6278      	str	r0, [r7, #36]	; 0x24
  }

  //------------- Data Interface (if any) -------------//
  if ( (TUSB_DESC_INTERFACE == p_desc[DESC_OFFSET_TYPE]) &&
 80059a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a2:	3301      	adds	r3, #1
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	2b04      	cmp	r3, #4
 80059a8:	d12a      	bne.n	8005a00 <cdcd_open+0x1c8>
       (TUSB_CLASS_CDC_DATA == ((tusb_desc_interface_t const *) p_desc)->bInterfaceClass) )
 80059aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ac:	795b      	ldrb	r3, [r3, #5]
  if ( (TUSB_DESC_INTERFACE == p_desc[DESC_OFFSET_TYPE]) &&
 80059ae:	2b0a      	cmp	r3, #10
 80059b0:	d126      	bne.n	8005a00 <cdcd_open+0x1c8>
  {
    // next to endpoint descriptor
    p_desc = tu_desc_next(p_desc);
 80059b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80059b4:	f7ff fd27 	bl	8005406 <tu_desc_next>
 80059b8:	6278      	str	r0, [r7, #36]	; 0x24

    // Open endpoint pair
    TU_ASSERT( usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in) );
 80059ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059bc:	3303      	adds	r3, #3
 80059be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059c0:	3202      	adds	r2, #2
 80059c2:	7bf8      	ldrb	r0, [r7, #15]
 80059c4:	9201      	str	r2, [sp, #4]
 80059c6:	9300      	str	r3, [sp, #0]
 80059c8:	2302      	movs	r3, #2
 80059ca:	2202      	movs	r2, #2
 80059cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80059ce:	f003 f97f 	bl	8008cd0 <usbd_open_edpt_pair>
 80059d2:	4603      	mov	r3, r0
 80059d4:	f083 0301 	eor.w	r3, r3, #1
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00a      	beq.n	80059f4 <cdcd_open+0x1bc>
 80059de:	4b0d      	ldr	r3, [pc, #52]	; (8005a14 <cdcd_open+0x1dc>)
 80059e0:	61bb      	str	r3, [r7, #24]
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0301 	and.w	r3, r3, #1
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d000      	beq.n	80059f0 <cdcd_open+0x1b8>
 80059ee:	be00      	bkpt	0x0000
 80059f0:	2300      	movs	r3, #0
 80059f2:	e00b      	b.n	8005a0c <cdcd_open+0x1d4>

    (*p_length) += sizeof(tusb_desc_interface_t) + 2*sizeof(tusb_desc_endpoint_t);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	881b      	ldrh	r3, [r3, #0]
 80059f8:	3317      	adds	r3, #23
 80059fa:	b29a      	uxth	r2, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	801a      	strh	r2, [r3, #0]
  }

  // Prepare for incoming data
  _prep_out_transaction(cdc_id);
 8005a00:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005a04:	4618      	mov	r0, r3
 8005a06:	f7ff fd87 	bl	8005518 <_prep_out_transaction>

  return true;
 8005a0a:	2301      	movs	r3, #1
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3730      	adds	r7, #48	; 0x30
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	e000edf0 	.word	0xe000edf0
 8005a18:	200021d4 	.word	0x200021d4

08005a1c <cdcd_control_complete>:

// Invoked when class request DATA stage is finished.
// return false to stall control endpoint (e.g Host send non-sense DATA)
bool cdcd_control_complete(uint8_t rhport, tusb_control_request_t const * request)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	4603      	mov	r3, r0
 8005a24:	6039      	str	r1, [r7, #0]
 8005a26:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  //------------- Class Specific Request -------------//
  TU_VERIFY (request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	2b20      	cmp	r3, #32
 8005a34:	d001      	beq.n	8005a3a <cdcd_control_complete+0x1e>
 8005a36:	2300      	movs	r3, #0
 8005a38:	e028      	b.n	8005a8c <cdcd_control_complete+0x70>

  uint8_t itf = 0;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = _cdcd_itf;
 8005a3e:	4b15      	ldr	r3, [pc, #84]	; (8005a94 <cdcd_control_complete+0x78>)
 8005a40:	60bb      	str	r3, [r7, #8]

  // Identify which interface to use
  for ( ; ; itf++, p_cdc++)
  {
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;
 8005a42:	7bfb      	ldrb	r3, [r7, #15]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d001      	beq.n	8005a4c <cdcd_control_complete+0x30>
 8005a48:	2300      	movs	r3, #0
 8005a4a:	e01f      	b.n	8005a8c <cdcd_control_complete+0x70>

    if ( p_cdc->itf_num == request->wIndex ) break;
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	b29a      	uxth	r2, r3
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	889b      	ldrh	r3, [r3, #4]
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d007      	beq.n	8005a6c <cdcd_control_complete+0x50>
  for ( ; ; itf++, p_cdc++)
 8005a5c:	7bfb      	ldrb	r3, [r7, #15]
 8005a5e:	3301      	adds	r3, #1
 8005a60:	73fb      	strb	r3, [r7, #15]
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8005a68:	60bb      	str	r3, [r7, #8]
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;
 8005a6a:	e7ea      	b.n	8005a42 <cdcd_control_complete+0x26>
    if ( p_cdc->itf_num == request->wIndex ) break;
 8005a6c:	bf00      	nop
  }

  // Invoke callback
  if ( CDC_REQUEST_SET_LINE_CODING == request->bRequest )
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	785b      	ldrb	r3, [r3, #1]
 8005a72:	2b20      	cmp	r3, #32
 8005a74:	d109      	bne.n	8005a8a <cdcd_control_complete+0x6e>
  {
    if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
 8005a76:	4b08      	ldr	r3, [pc, #32]	; (8005a98 <cdcd_control_complete+0x7c>)
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d006      	beq.n	8005a8a <cdcd_control_complete+0x6e>
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	1d9a      	adds	r2, r3, #6
 8005a80:	7bfb      	ldrb	r3, [r7, #15]
 8005a82:	4611      	mov	r1, r2
 8005a84:	4618      	mov	r0, r3
 8005a86:	f3af 8000 	nop.w
  }

  return true;
 8005a8a:	2301      	movs	r3, #1
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3710      	adds	r7, #16
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	200021d4 	.word	0x200021d4
 8005a98:	00000000 	.word	0x00000000

08005a9c <cdcd_control_request>:

// Handle class control request
// return false to stall control endpoint (e.g unsupported request)
bool cdcd_control_request(uint8_t rhport, tusb_control_request_t const * request)
{
 8005a9c:	b590      	push	{r4, r7, lr}
 8005a9e:	b085      	sub	sp, #20
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	6039      	str	r1, [r7, #0]
 8005aa6:	71fb      	strb	r3, [r7, #7]
  // Handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	2b20      	cmp	r3, #32
 8005ab4:	d001      	beq.n	8005aba <cdcd_control_request+0x1e>
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	e05b      	b.n	8005b72 <cdcd_control_request+0xd6>

  uint8_t itf = 0;
 8005aba:	2300      	movs	r3, #0
 8005abc:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = _cdcd_itf;
 8005abe:	4b2f      	ldr	r3, [pc, #188]	; (8005b7c <cdcd_control_request+0xe0>)
 8005ac0:	60bb      	str	r3, [r7, #8]

  // Identify which interface to use
  for ( ; ; itf++, p_cdc++)
  {
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;
 8005ac2:	7bfb      	ldrb	r3, [r7, #15]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d001      	beq.n	8005acc <cdcd_control_request+0x30>
 8005ac8:	2300      	movs	r3, #0
 8005aca:	e052      	b.n	8005b72 <cdcd_control_request+0xd6>

    if ( p_cdc->itf_num == request->wIndex ) break;
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	b29a      	uxth	r2, r3
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	889b      	ldrh	r3, [r3, #4]
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d007      	beq.n	8005aec <cdcd_control_request+0x50>
  for ( ; ; itf++, p_cdc++)
 8005adc:	7bfb      	ldrb	r3, [r7, #15]
 8005ade:	3301      	adds	r3, #1
 8005ae0:	73fb      	strb	r3, [r7, #15]
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8005ae8:	60bb      	str	r3, [r7, #8]
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;
 8005aea:	e7ea      	b.n	8005ac2 <cdcd_control_request+0x26>
    if ( p_cdc->itf_num == request->wIndex ) break;
 8005aec:	bf00      	nop
  }

  switch ( request->bRequest )
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	785b      	ldrb	r3, [r3, #1]
 8005af2:	2b21      	cmp	r3, #33	; 0x21
 8005af4:	d00b      	beq.n	8005b0e <cdcd_control_request+0x72>
 8005af6:	2b22      	cmp	r3, #34	; 0x22
 8005af8:	d011      	beq.n	8005b1e <cdcd_control_request+0x82>
 8005afa:	2b20      	cmp	r3, #32
 8005afc:	d135      	bne.n	8005b6a <cdcd_control_request+0xce>
  {
    case CDC_REQUEST_SET_LINE_CODING:
      tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	1d9a      	adds	r2, r3, #6
 8005b02:	79f8      	ldrb	r0, [r7, #7]
 8005b04:	2307      	movs	r3, #7
 8005b06:	6839      	ldr	r1, [r7, #0]
 8005b08:	f003 facc 	bl	80090a4 <tud_control_xfer>
    break;
 8005b0c:	e030      	b.n	8005b70 <cdcd_control_request+0xd4>

    case CDC_REQUEST_GET_LINE_CODING:
      tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	1d9a      	adds	r2, r3, #6
 8005b12:	79f8      	ldrb	r0, [r7, #7]
 8005b14:	2307      	movs	r3, #7
 8005b16:	6839      	ldr	r1, [r7, #0]
 8005b18:	f003 fac4 	bl	80090a4 <tud_control_xfer>
    break;
 8005b1c:	e028      	b.n	8005b70 <cdcd_control_request+0xd4>
      // CDC PSTN v1.2 section 6.3.12
      // Bit 0: Indicates if DTE is present or not.
      //        This signal corresponds to V.24 signal 108/2 and RS-232 signal DTR (Data Terminal Ready)
      // Bit 1: Carrier control for half-duplex modems.
      //        This signal corresponds to V.24 signal 105 and RS-232 signal RTS (Request to Send)
      p_cdc->line_state = (uint8_t) request->wValue;
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	885b      	ldrh	r3, [r3, #2]
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	b2da      	uxtb	r2, r3
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	711a      	strb	r2, [r3, #4]

      tud_control_status(rhport, request);
 8005b2a:	79fb      	ldrb	r3, [r7, #7]
 8005b2c:	6839      	ldr	r1, [r7, #0]
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f003 fa5e 	bl	8008ff0 <tud_control_status>

      // Invoke callback
      if ( tud_cdc_line_state_cb) tud_cdc_line_state_cb(itf, tu_bit_test(request->wValue, 0), tu_bit_test(request->wValue, 1));
 8005b34:	4b12      	ldr	r3, [pc, #72]	; (8005b80 <cdcd_control_request+0xe4>)
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d019      	beq.n	8005b6e <cdcd_control_request+0xd2>
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	885b      	ldrh	r3, [r3, #2]
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	2100      	movs	r1, #0
 8005b42:	4618      	mov	r0, r3
 8005b44:	f7ff fc9f 	bl	8005486 <tu_bit_test>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	461c      	mov	r4, r3
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	885b      	ldrh	r3, [r3, #2]
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	2101      	movs	r1, #1
 8005b54:	4618      	mov	r0, r3
 8005b56:	f7ff fc96 	bl	8005486 <tu_bit_test>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	7bfb      	ldrb	r3, [r7, #15]
 8005b60:	4621      	mov	r1, r4
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7fb f802 	bl	8000b6c <tud_cdc_line_state_cb>
    break;
 8005b68:	e001      	b.n	8005b6e <cdcd_control_request+0xd2>

    default: return false; // stall unsupported request
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	e001      	b.n	8005b72 <cdcd_control_request+0xd6>
    break;
 8005b6e:	bf00      	nop
  }

  return true;
 8005b70:	2301      	movs	r3, #1
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3714      	adds	r7, #20
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd90      	pop	{r4, r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	200021d4 	.word	0x200021d4
 8005b80:	08000b6d 	.word	0x08000b6d

08005b84 <cdcd_xfer_cb>:

bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b086      	sub	sp, #24
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	603b      	str	r3, [r7, #0]
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	71fb      	strb	r3, [r7, #7]
 8005b90:	460b      	mov	r3, r1
 8005b92:	71bb      	strb	r3, [r7, #6]
 8005b94:	4613      	mov	r3, r2
 8005b96:	717b      	strb	r3, [r7, #5]
  (void) rhport;
  (void) result;

  uint8_t itf = 0;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	75fb      	strb	r3, [r7, #23]
  cdcd_interface_t* p_cdc = _cdcd_itf;
 8005b9c:	4b30      	ldr	r3, [pc, #192]	; (8005c60 <cdcd_xfer_cb+0xdc>)
 8005b9e:	613b      	str	r3, [r7, #16]

  // Identify which interface to use
  for ( ; ; itf++, p_cdc++)
  {
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;
 8005ba0:	7dfb      	ldrb	r3, [r7, #23]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d001      	beq.n	8005baa <cdcd_xfer_cb+0x26>
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	e055      	b.n	8005c56 <cdcd_xfer_cb+0xd2>

    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	78db      	ldrb	r3, [r3, #3]
 8005bae:	79ba      	ldrb	r2, [r7, #6]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d00c      	beq.n	8005bce <cdcd_xfer_cb+0x4a>
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	789b      	ldrb	r3, [r3, #2]
 8005bb8:	79ba      	ldrb	r2, [r7, #6]
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d007      	beq.n	8005bce <cdcd_xfer_cb+0x4a>
  for ( ; ; itf++, p_cdc++)
 8005bbe:	7dfb      	ldrb	r3, [r7, #23]
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	75fb      	strb	r3, [r7, #23]
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8005bca:	613b      	str	r3, [r7, #16]
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;
 8005bcc:	e7e8      	b.n	8005ba0 <cdcd_xfer_cb+0x1c>
  }

  // Received new data
  if ( ep_addr == p_cdc->ep_out )
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	78db      	ldrb	r3, [r3, #3]
 8005bd2:	79ba      	ldrb	r2, [r7, #6]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d13d      	bne.n	8005c54 <cdcd_xfer_cb+0xd0>
  {
    for(uint32_t i=0; i<xferred_bytes; i++)
 8005bd8:	2300      	movs	r3, #0
 8005bda:	60fb      	str	r3, [r7, #12]
 8005bdc:	e023      	b.n	8005c26 <cdcd_xfer_cb+0xa2>
    {
      tu_fifo_write(&p_cdc->rx_ff, &p_cdc->epout_buf[i]);
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	f103 0010 	add.w	r0, r3, #16
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	33b0      	adds	r3, #176	; 0xb0
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	4413      	add	r3, r2
 8005bec:	4619      	mov	r1, r3
 8005bee:	f002 f805 	bl	8007bfc <tu_fifo_write>

      // Check for wanted char and invoke callback if needed
      if ( tud_cdc_rx_wanted_cb && ( ((signed char) p_cdc->wanted_char) != -1 ) && ( p_cdc->wanted_char == p_cdc->epout_buf[i] ) )
 8005bf2:	4b1c      	ldr	r3, [pc, #112]	; (8005c64 <cdcd_xfer_cb+0xe0>)
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d013      	beq.n	8005c20 <cdcd_xfer_cb+0x9c>
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	795b      	ldrb	r3, [r3, #5]
 8005bfc:	2bff      	cmp	r3, #255	; 0xff
 8005bfe:	d00f      	beq.n	8005c20 <cdcd_xfer_cb+0x9c>
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	795a      	ldrb	r2, [r3, #5]
 8005c04:	6939      	ldr	r1, [r7, #16]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	440b      	add	r3, r1
 8005c0a:	33b0      	adds	r3, #176	; 0xb0
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d106      	bne.n	8005c20 <cdcd_xfer_cb+0x9c>
      {
        tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	795a      	ldrb	r2, [r3, #5]
 8005c16:	7dfb      	ldrb	r3, [r7, #23]
 8005c18:	4611      	mov	r1, r2
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f3af 8000 	nop.w
    for(uint32_t i=0; i<xferred_bytes; i++)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	3301      	adds	r3, #1
 8005c24:	60fb      	str	r3, [r7, #12]
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d3d7      	bcc.n	8005bde <cdcd_xfer_cb+0x5a>
      }
    }

    // invoke receive callback (if there is still data)
    if (tud_cdc_rx_cb && tu_fifo_count(&p_cdc->rx_ff) ) tud_cdc_rx_cb(itf);
 8005c2e:	4b0e      	ldr	r3, [pc, #56]	; (8005c68 <cdcd_xfer_cb+0xe4>)
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d00b      	beq.n	8005c4c <cdcd_xfer_cb+0xc8>
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	3310      	adds	r3, #16
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f7ff fc50 	bl	80054de <tu_fifo_count>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d003      	beq.n	8005c4c <cdcd_xfer_cb+0xc8>
 8005c44:	7dfb      	ldrb	r3, [r7, #23]
 8005c46:	4618      	mov	r0, r3
 8005c48:	f7fa ffa8 	bl	8000b9c <tud_cdc_rx_cb>

    // prepare for OUT transaction
    _prep_out_transaction(itf);
 8005c4c:	7dfb      	ldrb	r3, [r7, #23]
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f7ff fc62 	bl	8005518 <_prep_out_transaction>
//
//  }

  // nothing to do with notif endpoint for now

  return true;
 8005c54:	2301      	movs	r3, #1
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3718      	adds	r7, #24
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	200021d4 	.word	0x200021d4
 8005c64:	00000000 	.word	0x00000000
 8005c68:	08000b9d 	.word	0x08000b9d

08005c6c <tu_desc_next>:
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b085      	sub	sp, #20
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	4413      	add	r3, r2
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3714      	adds	r7, #20
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bc80      	pop	{r7}
 8005c8a:	4770      	bx	lr

08005c8c <tu_u16_high>:
static inline uint8_t tu_u16_high(uint16_t u16) { return (uint8_t) (((uint16_t) (u16 >> 8)) & 0x00ff); }
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	4603      	mov	r3, r0
 8005c94:	80fb      	strh	r3, [r7, #6]
 8005c96:	88fb      	ldrh	r3, [r7, #6]
 8005c98:	0a1b      	lsrs	r3, r3, #8
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	370c      	adds	r7, #12
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bc80      	pop	{r7}
 8005ca6:	4770      	bx	lr

08005ca8 <tu_u16_low>:
static inline uint8_t tu_u16_low (uint16_t u16) { return (uint8_t) (u16 & 0x00ff); }
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	4603      	mov	r3, r0
 8005cb0:	80fb      	strh	r3, [r7, #6]
 8005cb2:	88fb      	ldrh	r3, [r7, #6]
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	370c      	adds	r7, #12
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bc80      	pop	{r7}
 8005cbe:	4770      	bx	lr

08005cc0 <tu_min8>:
static inline uint8_t  tu_min8  (uint8_t  x, uint8_t y ) { return (x < y) ? x : y; }
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	460a      	mov	r2, r1
 8005cca:	71fb      	strb	r3, [r7, #7]
 8005ccc:	4613      	mov	r3, r2
 8005cce:	71bb      	strb	r3, [r7, #6]
 8005cd0:	79ba      	ldrb	r2, [r7, #6]
 8005cd2:	79fb      	ldrb	r3, [r7, #7]
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	bf28      	it	cs
 8005cd8:	4613      	movcs	r3, r2
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	4618      	mov	r0, r3
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bc80      	pop	{r7}
 8005ce4:	4770      	bx	lr

08005ce6 <tud_ready>:
{
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	af00      	add	r7, sp, #0
  return tud_mounted() && !tud_suspended();
 8005cea:	f002 f8cb 	bl	8007e84 <tud_mounted>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d009      	beq.n	8005d08 <tud_ready+0x22>
 8005cf4:	f002 f8d8 	bl	8007ea8 <tud_suspended>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	f083 0301 	eor.w	r3, r3, #1
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d001      	beq.n	8005d08 <tud_ready+0x22>
 8005d04:	2301      	movs	r3, #1
 8005d06:	e000      	b.n	8005d0a <tud_ready+0x24>
 8005d08:	2300      	movs	r3, #0
 8005d0a:	f003 0301 	and.w	r3, r3, #1
 8005d0e:	b2db      	uxtb	r3, r3
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <usbd_edpt_ready>:
// Check if endpoint is stalled
bool usbd_edpt_stalled(uint8_t rhport, uint8_t ep_addr);

static inline
bool usbd_edpt_ready(uint8_t rhport, uint8_t ep_addr)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b082      	sub	sp, #8
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	460a      	mov	r2, r1
 8005d1e:	71fb      	strb	r3, [r7, #7]
 8005d20:	4613      	mov	r3, r2
 8005d22:	71bb      	strb	r3, [r7, #6]
  return !usbd_edpt_busy(rhport, ep_addr) && !usbd_edpt_stalled(rhport, ep_addr);
 8005d24:	79ba      	ldrb	r2, [r7, #6]
 8005d26:	79fb      	ldrb	r3, [r7, #7]
 8005d28:	4611      	mov	r1, r2
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f003 f86a 	bl	8008e04 <usbd_edpt_busy>
 8005d30:	4603      	mov	r3, r0
 8005d32:	f083 0301 	eor.w	r3, r3, #1
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d00d      	beq.n	8005d58 <usbd_edpt_ready+0x44>
 8005d3c:	79ba      	ldrb	r2, [r7, #6]
 8005d3e:	79fb      	ldrb	r3, [r7, #7]
 8005d40:	4611      	mov	r1, r2
 8005d42:	4618      	mov	r0, r3
 8005d44:	f003 f8f4 	bl	8008f30 <usbd_edpt_stalled>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	f083 0301 	eor.w	r3, r3, #1
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d001      	beq.n	8005d58 <usbd_edpt_ready+0x44>
 8005d54:	2301      	movs	r3, #1
 8005d56:	e000      	b.n	8005d5a <usbd_edpt_ready+0x46>
 8005d58:	2300      	movs	r3, #0
 8005d5a:	f003 0301 	and.w	r3, r3, #1
 8005d5e:	b2db      	uxtb	r3, r3
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3708      	adds	r7, #8
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <get_interface_by_itfnum>:

CFG_TUSB_MEM_SECTION static hidd_interface_t _hidd_itf[CFG_TUD_HID];

/*------------- Helpers -------------*/
static inline hidd_interface_t* get_interface_by_itfnum(uint8_t itf_num)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b085      	sub	sp, #20
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	4603      	mov	r3, r0
 8005d70:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i=0; i < CFG_TUD_HID; i++ )
 8005d72:	2300      	movs	r3, #0
 8005d74:	73fb      	strb	r3, [r7, #15]
 8005d76:	e013      	b.n	8005da0 <get_interface_by_itfnum+0x38>
  {
    if ( itf_num == _hidd_itf[i].itf_num ) return &_hidd_itf[i];
 8005d78:	7bfb      	ldrb	r3, [r7, #15]
 8005d7a:	4a0e      	ldr	r2, [pc, #56]	; (8005db4 <get_interface_by_itfnum+0x4c>)
 8005d7c:	212c      	movs	r1, #44	; 0x2c
 8005d7e:	fb01 f303 	mul.w	r3, r1, r3
 8005d82:	4413      	add	r3, r2
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	79fa      	ldrb	r2, [r7, #7]
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d106      	bne.n	8005d9a <get_interface_by_itfnum+0x32>
 8005d8c:	7bfb      	ldrb	r3, [r7, #15]
 8005d8e:	222c      	movs	r2, #44	; 0x2c
 8005d90:	fb02 f303 	mul.w	r3, r2, r3
 8005d94:	4a07      	ldr	r2, [pc, #28]	; (8005db4 <get_interface_by_itfnum+0x4c>)
 8005d96:	4413      	add	r3, r2
 8005d98:	e006      	b.n	8005da8 <get_interface_by_itfnum+0x40>
  for (uint8_t i=0; i < CFG_TUD_HID; i++ )
 8005d9a:	7bfb      	ldrb	r3, [r7, #15]
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	73fb      	strb	r3, [r7, #15]
 8005da0:	7bfb      	ldrb	r3, [r7, #15]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d0e8      	beq.n	8005d78 <get_interface_by_itfnum+0x10>
  }

  return NULL;
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3714      	adds	r7, #20
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bc80      	pop	{r7}
 8005db0:	4770      	bx	lr
 8005db2:	bf00      	nop
 8005db4:	20002304 	.word	0x20002304

08005db8 <tud_hid_ready>:

//--------------------------------------------------------------------+
// APPLICATION API
//--------------------------------------------------------------------+
bool tud_hid_ready(void)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b082      	sub	sp, #8
 8005dbc:	af00      	add	r7, sp, #0
  uint8_t itf = 0;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	71fb      	strb	r3, [r7, #7]
  uint8_t const ep_in = _hidd_itf[itf].ep_in;
 8005dc2:	79fb      	ldrb	r3, [r7, #7]
 8005dc4:	4a10      	ldr	r2, [pc, #64]	; (8005e08 <tud_hid_ready+0x50>)
 8005dc6:	212c      	movs	r1, #44	; 0x2c
 8005dc8:	fb01 f303 	mul.w	r3, r1, r3
 8005dcc:	4413      	add	r3, r2
 8005dce:	3301      	adds	r3, #1
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	71bb      	strb	r3, [r7, #6]
  return tud_ready() && (ep_in != 0) && usbd_edpt_ready(TUD_OPT_RHPORT, ep_in);
 8005dd4:	f7ff ff87 	bl	8005ce6 <tud_ready>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00c      	beq.n	8005df8 <tud_hid_ready+0x40>
 8005dde:	79bb      	ldrb	r3, [r7, #6]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d009      	beq.n	8005df8 <tud_hid_ready+0x40>
 8005de4:	79bb      	ldrb	r3, [r7, #6]
 8005de6:	4619      	mov	r1, r3
 8005de8:	2000      	movs	r0, #0
 8005dea:	f7ff ff93 	bl	8005d14 <usbd_edpt_ready>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d001      	beq.n	8005df8 <tud_hid_ready+0x40>
 8005df4:	2301      	movs	r3, #1
 8005df6:	e000      	b.n	8005dfa <tud_hid_ready+0x42>
 8005df8:	2300      	movs	r3, #0
 8005dfa:	f003 0301 	and.w	r3, r3, #1
 8005dfe:	b2db      	uxtb	r3, r3
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3708      	adds	r7, #8
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}
 8005e08:	20002304 	.word	0x20002304

08005e0c <tud_hid_report>:

bool tud_hid_report(uint8_t report_id, void const* report, uint8_t len)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	4603      	mov	r3, r0
 8005e14:	6039      	str	r1, [r7, #0]
 8005e16:	71fb      	strb	r3, [r7, #7]
 8005e18:	4613      	mov	r3, r2
 8005e1a:	71bb      	strb	r3, [r7, #6]
  TU_VERIFY( tud_hid_ready() );
 8005e1c:	f7ff ffcc 	bl	8005db8 <tud_hid_ready>
 8005e20:	4603      	mov	r3, r0
 8005e22:	f083 0301 	eor.w	r3, r3, #1
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d001      	beq.n	8005e30 <tud_hid_report+0x24>
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	e03a      	b.n	8005ea6 <tud_hid_report+0x9a>

  uint8_t itf = 0;
 8005e30:	2300      	movs	r3, #0
 8005e32:	73fb      	strb	r3, [r7, #15]
  hidd_interface_t * p_hid = &_hidd_itf[itf];
 8005e34:	7bfb      	ldrb	r3, [r7, #15]
 8005e36:	222c      	movs	r2, #44	; 0x2c
 8005e38:	fb02 f303 	mul.w	r3, r2, r3
 8005e3c:	4a1c      	ldr	r2, [pc, #112]	; (8005eb0 <tud_hid_report+0xa4>)
 8005e3e:	4413      	add	r3, r2
 8005e40:	60bb      	str	r3, [r7, #8]

  if (report_id)
 8005e42:	79fb      	ldrb	r3, [r7, #7]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d015      	beq.n	8005e74 <tud_hid_report+0x68>
  {
    len = tu_min8(len, CFG_TUD_HID_BUFSIZE-1);
 8005e48:	79bb      	ldrb	r3, [r7, #6]
 8005e4a:	210f      	movs	r1, #15
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f7ff ff37 	bl	8005cc0 <tu_min8>
 8005e52:	4603      	mov	r3, r0
 8005e54:	71bb      	strb	r3, [r7, #6]

    p_hid->epin_buf[0] = report_id;
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	79fa      	ldrb	r2, [r7, #7]
 8005e5a:	721a      	strb	r2, [r3, #8]
    memcpy(p_hid->epin_buf+1, report, len);
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	3308      	adds	r3, #8
 8005e60:	3301      	adds	r3, #1
 8005e62:	79ba      	ldrb	r2, [r7, #6]
 8005e64:	6839      	ldr	r1, [r7, #0]
 8005e66:	4618      	mov	r0, r3
 8005e68:	f004 fba0 	bl	800a5ac <memcpy>
    len++;
 8005e6c:	79bb      	ldrb	r3, [r7, #6]
 8005e6e:	3301      	adds	r3, #1
 8005e70:	71bb      	strb	r3, [r7, #6]
 8005e72:	e00d      	b.n	8005e90 <tud_hid_report+0x84>
  }else
  {
    // If report id = 0, skip ID field
    len = tu_min8(len, CFG_TUD_HID_BUFSIZE);
 8005e74:	79bb      	ldrb	r3, [r7, #6]
 8005e76:	2110      	movs	r1, #16
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f7ff ff21 	bl	8005cc0 <tu_min8>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	71bb      	strb	r3, [r7, #6]
    memcpy(p_hid->epin_buf, report, len);
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	3308      	adds	r3, #8
 8005e86:	79ba      	ldrb	r2, [r7, #6]
 8005e88:	6839      	ldr	r1, [r7, #0]
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f004 fb8e 	bl	800a5ac <memcpy>
  }

  return usbd_edpt_xfer(TUD_OPT_RHPORT, p_hid->ep_in, p_hid->epin_buf, len);
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	7859      	ldrb	r1, [r3, #1]
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	f103 0208 	add.w	r2, r3, #8
 8005e9a:	79bb      	ldrb	r3, [r7, #6]
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	2000      	movs	r0, #0
 8005ea0:	f002 ff78 	bl	8008d94 <usbd_edpt_xfer>
 8005ea4:	4603      	mov	r3, r0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3710      	adds	r7, #16
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	20002304 	.word	0x20002304

08005eb4 <tud_hid_keyboard_report>:

//--------------------------------------------------------------------+
// KEYBOARD API
//--------------------------------------------------------------------+
bool tud_hid_keyboard_report(uint8_t report_id, uint8_t modifier, uint8_t keycode[6])
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	4603      	mov	r3, r0
 8005ebc:	603a      	str	r2, [r7, #0]
 8005ebe:	71fb      	strb	r3, [r7, #7]
 8005ec0:	460b      	mov	r3, r1
 8005ec2:	71bb      	strb	r3, [r7, #6]
  hid_keyboard_report_t report;

  report.modifier = modifier;
 8005ec4:	79bb      	ldrb	r3, [r7, #6]
 8005ec6:	723b      	strb	r3, [r7, #8]

  if ( keycode )
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d007      	beq.n	8005ede <tud_hid_keyboard_report+0x2a>
  {
    memcpy(report.keycode, keycode, 6);
 8005ece:	683a      	ldr	r2, [r7, #0]
 8005ed0:	f107 030a 	add.w	r3, r7, #10
 8005ed4:	6811      	ldr	r1, [r2, #0]
 8005ed6:	6019      	str	r1, [r3, #0]
 8005ed8:	8892      	ldrh	r2, [r2, #4]
 8005eda:	809a      	strh	r2, [r3, #4]
 8005edc:	e007      	b.n	8005eee <tud_hid_keyboard_report+0x3a>
  }else
  {
    tu_memclr(report.keycode, 6);
 8005ede:	f107 0308 	add.w	r3, r7, #8
 8005ee2:	3302      	adds	r3, #2
 8005ee4:	2206      	movs	r2, #6
 8005ee6:	2100      	movs	r1, #0
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f004 fb83 	bl	800a5f4 <memset>
  }

  return tud_hid_report(report_id, &report, sizeof(report));
 8005eee:	f107 0108 	add.w	r1, r7, #8
 8005ef2:	79fb      	ldrb	r3, [r7, #7]
 8005ef4:	2208      	movs	r2, #8
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7ff ff88 	bl	8005e0c <tud_hid_report>
 8005efc:	4603      	mov	r3, r0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3710      	adds	r7, #16
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}

08005f06 <tud_hid_mouse_report>:

//--------------------------------------------------------------------+
// MOUSE APPLICATION API
//--------------------------------------------------------------------+
bool tud_hid_mouse_report(uint8_t report_id, uint8_t buttons, int8_t x, int8_t y, int8_t vertical, int8_t horizontal)
{
 8005f06:	b590      	push	{r4, r7, lr}
 8005f08:	b085      	sub	sp, #20
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	4604      	mov	r4, r0
 8005f0e:	4608      	mov	r0, r1
 8005f10:	4611      	mov	r1, r2
 8005f12:	461a      	mov	r2, r3
 8005f14:	4623      	mov	r3, r4
 8005f16:	71fb      	strb	r3, [r7, #7]
 8005f18:	4603      	mov	r3, r0
 8005f1a:	71bb      	strb	r3, [r7, #6]
 8005f1c:	460b      	mov	r3, r1
 8005f1e:	717b      	strb	r3, [r7, #5]
 8005f20:	4613      	mov	r3, r2
 8005f22:	713b      	strb	r3, [r7, #4]
  hid_mouse_report_t report =
 8005f24:	79bb      	ldrb	r3, [r7, #6]
 8005f26:	723b      	strb	r3, [r7, #8]
 8005f28:	797b      	ldrb	r3, [r7, #5]
 8005f2a:	727b      	strb	r3, [r7, #9]
 8005f2c:	793b      	ldrb	r3, [r7, #4]
 8005f2e:	72bb      	strb	r3, [r7, #10]
 8005f30:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005f34:	72fb      	strb	r3, [r7, #11]
 8005f36:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005f3a:	733b      	strb	r3, [r7, #12]
    .y       = y,
    .wheel   = vertical,
    .pan     = horizontal
  };

  return tud_hid_report(report_id, &report, sizeof(report));
 8005f3c:	f107 0108 	add.w	r1, r7, #8
 8005f40:	79fb      	ldrb	r3, [r7, #7]
 8005f42:	2205      	movs	r2, #5
 8005f44:	4618      	mov	r0, r3
 8005f46:	f7ff ff61 	bl	8005e0c <tud_hid_report>
 8005f4a:	4603      	mov	r3, r0
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3714      	adds	r7, #20
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd90      	pop	{r4, r7, pc}

08005f54 <hidd_init>:

//--------------------------------------------------------------------+
// USBD-CLASS API
//--------------------------------------------------------------------+
void hidd_init(void)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	af00      	add	r7, sp, #0
  hidd_reset(TUD_OPT_RHPORT);
 8005f58:	2000      	movs	r0, #0
 8005f5a:	f000 f803 	bl	8005f64 <hidd_reset>
}
 8005f5e:	bf00      	nop
 8005f60:	bd80      	pop	{r7, pc}
	...

08005f64 <hidd_reset>:

void hidd_reset(uint8_t rhport)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b082      	sub	sp, #8
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  tu_memclr(_hidd_itf, sizeof(_hidd_itf));
 8005f6e:	222c      	movs	r2, #44	; 0x2c
 8005f70:	2100      	movs	r1, #0
 8005f72:	4803      	ldr	r0, [pc, #12]	; (8005f80 <hidd_reset+0x1c>)
 8005f74:	f004 fb3e 	bl	800a5f4 <memset>
}
 8005f78:	bf00      	nop
 8005f7a:	3708      	adds	r7, #8
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	20002304 	.word	0x20002304

08005f84 <hidd_open>:

bool hidd_open(uint8_t rhport, tusb_desc_interface_t const * desc_itf, uint16_t *p_len)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b08e      	sub	sp, #56	; 0x38
 8005f88:	af02      	add	r7, sp, #8
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
 8005f90:	73fb      	strb	r3, [r7, #15]
  uint8_t const *p_desc = (uint8_t const *) desc_itf;
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	627b      	str	r3, [r7, #36]	; 0x24

  // Find available interface
  hidd_interface_t * p_hid = NULL;
 8005f96:	2300      	movs	r3, #0
 8005f98:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t hid_id;
  for(hid_id=0; hid_id<CFG_TUD_HID; hid_id++)
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fa0:	e018      	b.n	8005fd4 <hidd_open+0x50>
  {
    if ( _hidd_itf[hid_id].ep_in == 0 )
 8005fa2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005fa6:	4a54      	ldr	r2, [pc, #336]	; (80060f8 <hidd_open+0x174>)
 8005fa8:	212c      	movs	r1, #44	; 0x2c
 8005faa:	fb01 f303 	mul.w	r3, r1, r3
 8005fae:	4413      	add	r3, r2
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d108      	bne.n	8005fca <hidd_open+0x46>
    {
      p_hid = &_hidd_itf[hid_id];
 8005fb8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005fbc:	222c      	movs	r2, #44	; 0x2c
 8005fbe:	fb02 f303 	mul.w	r3, r2, r3
 8005fc2:	4a4d      	ldr	r2, [pc, #308]	; (80060f8 <hidd_open+0x174>)
 8005fc4:	4413      	add	r3, r2
 8005fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8005fc8:	e008      	b.n	8005fdc <hidd_open+0x58>
  for(hid_id=0; hid_id<CFG_TUD_HID; hid_id++)
 8005fca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005fce:	3301      	adds	r3, #1
 8005fd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fd4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d0e2      	beq.n	8005fa2 <hidd_open+0x1e>
    }
  }
  TU_ASSERT(p_hid);
 8005fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d10a      	bne.n	8005ff8 <hidd_open+0x74>
 8005fe2:	4b46      	ldr	r3, [pc, #280]	; (80060fc <hidd_open+0x178>)
 8005fe4:	617b      	str	r3, [r7, #20]
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 0301 	and.w	r3, r3, #1
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d000      	beq.n	8005ff4 <hidd_open+0x70>
 8005ff2:	be00      	bkpt	0x0000
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	e07a      	b.n	80060ee <hidd_open+0x16a>

  //------------- HID descriptor -------------//
  p_desc = tu_desc_next(p_desc);
 8005ff8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ffa:	f7ff fe37 	bl	8005c6c <tu_desc_next>
 8005ffe:	6278      	str	r0, [r7, #36]	; 0x24
  p_hid->hid_descriptor = (tusb_hid_descriptor_hid_t const *) p_desc;
 8006000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006004:	629a      	str	r2, [r3, #40]	; 0x28
  TU_ASSERT(HID_DESC_TYPE_HID == p_hid->hid_descriptor->bDescriptorType);
 8006006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800600a:	785b      	ldrb	r3, [r3, #1]
 800600c:	2b21      	cmp	r3, #33	; 0x21
 800600e:	d00a      	beq.n	8006026 <hidd_open+0xa2>
 8006010:	4b3a      	ldr	r3, [pc, #232]	; (80060fc <hidd_open+0x178>)
 8006012:	61bb      	str	r3, [r7, #24]
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f003 0301 	and.w	r3, r3, #1
 800601c:	2b00      	cmp	r3, #0
 800601e:	d000      	beq.n	8006022 <hidd_open+0x9e>
 8006020:	be00      	bkpt	0x0000
 8006022:	2300      	movs	r3, #0
 8006024:	e063      	b.n	80060ee <hidd_open+0x16a>

  //------------- Endpoint Descriptor -------------//
  p_desc = tu_desc_next(p_desc);
 8006026:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006028:	f7ff fe20 	bl	8005c6c <tu_desc_next>
 800602c:	6278      	str	r0, [r7, #36]	; 0x24
  TU_ASSERT(usbd_open_edpt_pair(rhport, p_desc, desc_itf->bNumEndpoints, TUSB_XFER_INTERRUPT, &p_hid->ep_out, &p_hid->ep_in));
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	7919      	ldrb	r1, [r3, #4]
 8006032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006034:	3302      	adds	r3, #2
 8006036:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006038:	3201      	adds	r2, #1
 800603a:	7bf8      	ldrb	r0, [r7, #15]
 800603c:	9201      	str	r2, [sp, #4]
 800603e:	9300      	str	r3, [sp, #0]
 8006040:	2303      	movs	r3, #3
 8006042:	460a      	mov	r2, r1
 8006044:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006046:	f002 fe43 	bl	8008cd0 <usbd_open_edpt_pair>
 800604a:	4603      	mov	r3, r0
 800604c:	f083 0301 	eor.w	r3, r3, #1
 8006050:	b2db      	uxtb	r3, r3
 8006052:	2b00      	cmp	r3, #0
 8006054:	d00a      	beq.n	800606c <hidd_open+0xe8>
 8006056:	4b29      	ldr	r3, [pc, #164]	; (80060fc <hidd_open+0x178>)
 8006058:	61fb      	str	r3, [r7, #28]
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 0301 	and.w	r3, r3, #1
 8006062:	2b00      	cmp	r3, #0
 8006064:	d000      	beq.n	8006068 <hidd_open+0xe4>
 8006066:	be00      	bkpt	0x0000
 8006068:	2300      	movs	r3, #0
 800606a:	e040      	b.n	80060ee <hidd_open+0x16a>

  if ( desc_itf->bInterfaceSubClass == HID_SUBCLASS_BOOT ) p_hid->boot_protocol = desc_itf->bInterfaceProtocol;
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	799b      	ldrb	r3, [r3, #6]
 8006070:	2b01      	cmp	r3, #1
 8006072:	d103      	bne.n	800607c <hidd_open+0xf8>
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	79da      	ldrb	r2, [r3, #7]
 8006078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800607a:	70da      	strb	r2, [r3, #3]

  p_hid->boot_mode = false; // default mode is REPORT
 800607c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800607e:	2200      	movs	r2, #0
 8006080:	711a      	strb	r2, [r3, #4]
  p_hid->itf_num   = desc_itf->bInterfaceNumber;
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	789a      	ldrb	r2, [r3, #2]
 8006086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006088:	701a      	strb	r2, [r3, #0]
  memcpy(&p_hid->report_desc_len, &(p_hid->hid_descriptor->wReportLength), 2);
 800608a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800608c:	3306      	adds	r3, #6
 800608e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006090:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006092:	3207      	adds	r2, #7
 8006094:	8812      	ldrh	r2, [r2, #0]
 8006096:	b292      	uxth	r2, r2
 8006098:	801a      	strh	r2, [r3, #0]

  *p_len = sizeof(tusb_desc_interface_t) + sizeof(tusb_hid_descriptor_hid_t) + desc_itf->bNumEndpoints*sizeof(tusb_desc_endpoint_t);
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	791b      	ldrb	r3, [r3, #4]
 800609e:	b29b      	uxth	r3, r3
 80060a0:	461a      	mov	r2, r3
 80060a2:	00d2      	lsls	r2, r2, #3
 80060a4:	1ad3      	subs	r3, r2, r3
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	3312      	adds	r3, #18
 80060aa:	b29a      	uxth	r2, r3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	801a      	strh	r2, [r3, #0]

  // Prepare for output endpoint
  if (p_hid->ep_out) TU_ASSERT(usbd_edpt_xfer(rhport, p_hid->ep_out, p_hid->epout_buf, sizeof(p_hid->epout_buf)));
 80060b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b2:	789b      	ldrb	r3, [r3, #2]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d019      	beq.n	80060ec <hidd_open+0x168>
 80060b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ba:	7899      	ldrb	r1, [r3, #2]
 80060bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060be:	f103 0218 	add.w	r2, r3, #24
 80060c2:	7bf8      	ldrb	r0, [r7, #15]
 80060c4:	2310      	movs	r3, #16
 80060c6:	f002 fe65 	bl	8008d94 <usbd_edpt_xfer>
 80060ca:	4603      	mov	r3, r0
 80060cc:	f083 0301 	eor.w	r3, r3, #1
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00a      	beq.n	80060ec <hidd_open+0x168>
 80060d6:	4b09      	ldr	r3, [pc, #36]	; (80060fc <hidd_open+0x178>)
 80060d8:	623b      	str	r3, [r7, #32]
 80060da:	6a3b      	ldr	r3, [r7, #32]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 0301 	and.w	r3, r3, #1
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d000      	beq.n	80060e8 <hidd_open+0x164>
 80060e6:	be00      	bkpt	0x0000
 80060e8:	2300      	movs	r3, #0
 80060ea:	e000      	b.n	80060ee <hidd_open+0x16a>

  return true;
 80060ec:	2301      	movs	r3, #1
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3730      	adds	r7, #48	; 0x30
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	20002304 	.word	0x20002304
 80060fc:	e000edf0 	.word	0xe000edf0

08006100 <hidd_control_request>:

// Handle class control request
// return false to stall control endpoint (e.g unsupported request)
bool hidd_control_request(uint8_t rhport, tusb_control_request_t const * request)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b08a      	sub	sp, #40	; 0x28
 8006104:	af00      	add	r7, sp, #0
 8006106:	4603      	mov	r3, r0
 8006108:	6039      	str	r1, [r7, #0]
 800610a:	71fb      	strb	r3, [r7, #7]
  TU_VERIFY(request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_INTERFACE);
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	f003 031f 	and.w	r3, r3, #31
 8006114:	b2db      	uxtb	r3, r3
 8006116:	2b01      	cmp	r3, #1
 8006118:	d001      	beq.n	800611e <hidd_control_request+0x1e>
 800611a:	2300      	movs	r3, #0
 800611c:	e126      	b.n	800636c <hidd_control_request+0x26c>

  hidd_interface_t* p_hid = get_interface_by_itfnum( (uint8_t) request->wIndex );
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	889b      	ldrh	r3, [r3, #4]
 8006122:	b29b      	uxth	r3, r3
 8006124:	b2db      	uxtb	r3, r3
 8006126:	4618      	mov	r0, r3
 8006128:	f7ff fe1e 	bl	8005d68 <get_interface_by_itfnum>
 800612c:	6278      	str	r0, [r7, #36]	; 0x24
  TU_ASSERT(p_hid);
 800612e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006130:	2b00      	cmp	r3, #0
 8006132:	d10a      	bne.n	800614a <hidd_control_request+0x4a>
 8006134:	4b8f      	ldr	r3, [pc, #572]	; (8006374 <hidd_control_request+0x274>)
 8006136:	613b      	str	r3, [r7, #16]
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f003 0301 	and.w	r3, r3, #1
 8006140:	2b00      	cmp	r3, #0
 8006142:	d000      	beq.n	8006146 <hidd_control_request+0x46>
 8006144:	be00      	bkpt	0x0000
 8006146:	2300      	movs	r3, #0
 8006148:	e110      	b.n	800636c <hidd_control_request+0x26c>

  if (request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD)
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006152:	b2db      	uxtb	r3, r3
 8006154:	2b00      	cmp	r3, #0
 8006156:	d143      	bne.n	80061e0 <hidd_control_request+0xe0>
  {
    //------------- STD Request -------------//
    uint8_t const desc_type  = tu_u16_high(request->wValue);
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	885b      	ldrh	r3, [r3, #2]
 800615c:	b29b      	uxth	r3, r3
 800615e:	4618      	mov	r0, r3
 8006160:	f7ff fd94 	bl	8005c8c <tu_u16_high>
 8006164:	4603      	mov	r3, r0
 8006166:	76fb      	strb	r3, [r7, #27]
    uint8_t const desc_index = tu_u16_low (request->wValue);
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	885b      	ldrh	r3, [r3, #2]
 800616c:	b29b      	uxth	r3, r3
 800616e:	4618      	mov	r0, r3
 8006170:	f7ff fd9a 	bl	8005ca8 <tu_u16_low>
 8006174:	4603      	mov	r3, r0
 8006176:	76bb      	strb	r3, [r7, #26]
    (void) desc_index;

    if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_HID)
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	785b      	ldrb	r3, [r3, #1]
 800617c:	2b06      	cmp	r3, #6
 800617e:	d11b      	bne.n	80061b8 <hidd_control_request+0xb8>
 8006180:	7efb      	ldrb	r3, [r7, #27]
 8006182:	2b21      	cmp	r3, #33	; 0x21
 8006184:	d118      	bne.n	80061b8 <hidd_control_request+0xb8>
    {
      TU_VERIFY(p_hid->hid_descriptor != NULL);
 8006186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618a:	2b00      	cmp	r3, #0
 800618c:	d101      	bne.n	8006192 <hidd_control_request+0x92>
 800618e:	2300      	movs	r3, #0
 8006190:	e0ec      	b.n	800636c <hidd_control_request+0x26c>
      TU_VERIFY(tud_control_xfer(rhport, request, (void*) p_hid->hid_descriptor, p_hid->hid_descriptor->bLength));
 8006192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006194:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	b29b      	uxth	r3, r3
 800619e:	79f8      	ldrb	r0, [r7, #7]
 80061a0:	6839      	ldr	r1, [r7, #0]
 80061a2:	f002 ff7f 	bl	80090a4 <tud_control_xfer>
 80061a6:	4603      	mov	r3, r0
 80061a8:	f083 0301 	eor.w	r3, r3, #1
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	f000 80db 	beq.w	800636a <hidd_control_request+0x26a>
 80061b4:	2300      	movs	r3, #0
 80061b6:	e0d9      	b.n	800636c <hidd_control_request+0x26c>
    }
    else if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_REPORT)
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	785b      	ldrb	r3, [r3, #1]
 80061bc:	2b06      	cmp	r3, #6
 80061be:	d10d      	bne.n	80061dc <hidd_control_request+0xdc>
 80061c0:	7efb      	ldrb	r3, [r7, #27]
 80061c2:	2b22      	cmp	r3, #34	; 0x22
 80061c4:	d10a      	bne.n	80061dc <hidd_control_request+0xdc>
    {
      uint8_t const * desc_report = tud_hid_descriptor_report_cb();
 80061c6:	f7fb f8f3 	bl	80013b0 <tud_hid_descriptor_report_cb>
 80061ca:	6178      	str	r0, [r7, #20]
      tud_control_xfer(rhport, request, (void*) desc_report, p_hid->report_desc_len);
 80061cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ce:	88db      	ldrh	r3, [r3, #6]
 80061d0:	79f8      	ldrb	r0, [r7, #7]
 80061d2:	697a      	ldr	r2, [r7, #20]
 80061d4:	6839      	ldr	r1, [r7, #0]
 80061d6:	f002 ff65 	bl	80090a4 <tud_control_xfer>
    {
 80061da:	e0c6      	b.n	800636a <hidd_control_request+0x26a>
    }
    else
    {
      return false; // stall unsupported request
 80061dc:	2300      	movs	r3, #0
 80061de:	e0c5      	b.n	800636c <hidd_control_request+0x26c>
    }
  }
  else if (request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS)
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	2b20      	cmp	r3, #32
 80061ec:	f040 80bb 	bne.w	8006366 <hidd_control_request+0x266>
  {
    //------------- Class Specific Request -------------//
    switch( request->bRequest )
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	785b      	ldrb	r3, [r3, #1]
 80061f4:	3b01      	subs	r3, #1
 80061f6:	2b0a      	cmp	r3, #10
 80061f8:	f200 80b3 	bhi.w	8006362 <hidd_control_request+0x262>
 80061fc:	a201      	add	r2, pc, #4	; (adr r2, 8006204 <hidd_control_request+0x104>)
 80061fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006202:	bf00      	nop
 8006204:	08006231 	.word	0x08006231
 8006208:	08006303 	.word	0x08006303
 800620c:	08006313 	.word	0x08006313
 8006210:	08006363 	.word	0x08006363
 8006214:	08006363 	.word	0x08006363
 8006218:	08006363 	.word	0x08006363
 800621c:	08006363 	.word	0x08006363
 8006220:	08006363 	.word	0x08006363
 8006224:	0800629f 	.word	0x0800629f
 8006228:	080062c3 	.word	0x080062c3
 800622c:	0800632f 	.word	0x0800632f
    {
      case HID_REQ_CONTROL_GET_REPORT:
      {
        // wValue = Report Type | Report ID
        uint8_t const report_type = tu_u16_high(request->wValue);
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	885b      	ldrh	r3, [r3, #2]
 8006234:	b29b      	uxth	r3, r3
 8006236:	4618      	mov	r0, r3
 8006238:	f7ff fd28 	bl	8005c8c <tu_u16_high>
 800623c:	4603      	mov	r3, r0
 800623e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        uint8_t const report_id   = tu_u16_low(request->wValue);
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	885b      	ldrh	r3, [r3, #2]
 8006246:	b29b      	uxth	r3, r3
 8006248:	4618      	mov	r0, r3
 800624a:	f7ff fd2d 	bl	8005ca8 <tu_u16_low>
 800624e:	4603      	mov	r3, r0
 8006250:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

        uint16_t xferlen  = tud_hid_get_report_cb(report_id, (hid_report_type_t) report_type, p_hid->epin_buf, request->wLength);
 8006254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006256:	f103 0208 	add.w	r2, r3, #8
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	88db      	ldrh	r3, [r3, #6]
 800625e:	b29b      	uxth	r3, r3
 8006260:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8006264:	f897 0022 	ldrb.w	r0, [r7, #34]	; 0x22
 8006268:	f7fa fd08 	bl	8000c7c <tud_hid_get_report_cb>
 800626c:	4603      	mov	r3, r0
 800626e:	843b      	strh	r3, [r7, #32]
        TU_ASSERT( xferlen > 0 );
 8006270:	8c3b      	ldrh	r3, [r7, #32]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d10a      	bne.n	800628c <hidd_control_request+0x18c>
 8006276:	4b3f      	ldr	r3, [pc, #252]	; (8006374 <hidd_control_request+0x274>)
 8006278:	61fb      	str	r3, [r7, #28]
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 0301 	and.w	r3, r3, #1
 8006282:	2b00      	cmp	r3, #0
 8006284:	d000      	beq.n	8006288 <hidd_control_request+0x188>
 8006286:	be00      	bkpt	0x0000
 8006288:	2300      	movs	r3, #0
 800628a:	e06f      	b.n	800636c <hidd_control_request+0x26c>

        tud_control_xfer(rhport, request, p_hid->epin_buf, xferlen);
 800628c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628e:	f103 0208 	add.w	r2, r3, #8
 8006292:	8c3b      	ldrh	r3, [r7, #32]
 8006294:	79f8      	ldrb	r0, [r7, #7]
 8006296:	6839      	ldr	r1, [r7, #0]
 8006298:	f002 ff04 	bl	80090a4 <tud_control_xfer>
      }
      break;
 800629c:	e065      	b.n	800636a <hidd_control_request+0x26a>

      case  HID_REQ_CONTROL_SET_REPORT:
        TU_VERIFY(request->wLength <= sizeof(p_hid->epout_buf));
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	88db      	ldrh	r3, [r3, #6]
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	2b10      	cmp	r3, #16
 80062a6:	d901      	bls.n	80062ac <hidd_control_request+0x1ac>
 80062a8:	2300      	movs	r3, #0
 80062aa:	e05f      	b.n	800636c <hidd_control_request+0x26c>
        tud_control_xfer(rhport, request, p_hid->epout_buf, request->wLength);
 80062ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ae:	f103 0218 	add.w	r2, r3, #24
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	88db      	ldrh	r3, [r3, #6]
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	79f8      	ldrb	r0, [r7, #7]
 80062ba:	6839      	ldr	r1, [r7, #0]
 80062bc:	f002 fef2 	bl	80090a4 <tud_control_xfer>
      break;
 80062c0:	e053      	b.n	800636a <hidd_control_request+0x26a>

      case HID_REQ_CONTROL_SET_IDLE:
        p_hid->idle_rate = tu_u16_high(request->wValue);
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	885b      	ldrh	r3, [r3, #2]
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	4618      	mov	r0, r3
 80062ca:	f7ff fcdf 	bl	8005c8c <tu_u16_high>
 80062ce:	4603      	mov	r3, r0
 80062d0:	461a      	mov	r2, r3
 80062d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d4:	715a      	strb	r2, [r3, #5]
        if ( tud_hid_set_idle_cb )
 80062d6:	4b28      	ldr	r3, [pc, #160]	; (8006378 <hidd_control_request+0x278>)
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d00c      	beq.n	80062f6 <hidd_control_request+0x1f6>
        {
          // stall request if callback return false
          if ( !tud_hid_set_idle_cb(p_hid->idle_rate) ) return false;
 80062dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062de:	795b      	ldrb	r3, [r3, #5]
 80062e0:	4618      	mov	r0, r3
 80062e2:	f3af 8000 	nop.w
 80062e6:	4603      	mov	r3, r0
 80062e8:	f083 0301 	eor.w	r3, r3, #1
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d001      	beq.n	80062f6 <hidd_control_request+0x1f6>
 80062f2:	2300      	movs	r3, #0
 80062f4:	e03a      	b.n	800636c <hidd_control_request+0x26c>
        }

        tud_control_status(rhport, request);
 80062f6:	79fb      	ldrb	r3, [r7, #7]
 80062f8:	6839      	ldr	r1, [r7, #0]
 80062fa:	4618      	mov	r0, r3
 80062fc:	f002 fe78 	bl	8008ff0 <tud_control_status>
      break;
 8006300:	e033      	b.n	800636a <hidd_control_request+0x26a>

      case HID_REQ_CONTROL_GET_IDLE:
        // TODO idle rate of report
        tud_control_xfer(rhport, request, &p_hid->idle_rate, 1);
 8006302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006304:	1d5a      	adds	r2, r3, #5
 8006306:	79f8      	ldrb	r0, [r7, #7]
 8006308:	2301      	movs	r3, #1
 800630a:	6839      	ldr	r1, [r7, #0]
 800630c:	f002 feca 	bl	80090a4 <tud_control_xfer>
      break;
 8006310:	e02b      	b.n	800636a <hidd_control_request+0x26a>

      case HID_REQ_CONTROL_GET_PROTOCOL:
      {
        uint8_t protocol = (uint8_t)(1-p_hid->boot_mode);   // 0 is Boot, 1 is Report protocol
 8006312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006314:	791b      	ldrb	r3, [r3, #4]
 8006316:	f1c3 0301 	rsb	r3, r3, #1
 800631a:	b2db      	uxtb	r3, r3
 800631c:	73fb      	strb	r3, [r7, #15]
        tud_control_xfer(rhport, request, &protocol, 1);
 800631e:	f107 020f 	add.w	r2, r7, #15
 8006322:	79f8      	ldrb	r0, [r7, #7]
 8006324:	2301      	movs	r3, #1
 8006326:	6839      	ldr	r1, [r7, #0]
 8006328:	f002 febc 	bl	80090a4 <tud_control_xfer>
      }
      break;
 800632c:	e01d      	b.n	800636a <hidd_control_request+0x26a>

      case HID_REQ_CONTROL_SET_PROTOCOL:
        p_hid->boot_mode = 1 - request->wValue; // 0 is Boot, 1 is Report protocol
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	885b      	ldrh	r3, [r3, #2]
 8006332:	b29b      	uxth	r3, r3
 8006334:	f1c3 0301 	rsb	r3, r3, #1
 8006338:	2b00      	cmp	r3, #0
 800633a:	bf14      	ite	ne
 800633c:	2301      	movne	r3, #1
 800633e:	2300      	moveq	r3, #0
 8006340:	b2da      	uxtb	r2, r3
 8006342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006344:	711a      	strb	r2, [r3, #4]

        if (tud_hid_boot_mode_cb) tud_hid_boot_mode_cb(p_hid->boot_mode);
 8006346:	4b0d      	ldr	r3, [pc, #52]	; (800637c <hidd_control_request+0x27c>)
 8006348:	2b00      	cmp	r3, #0
 800634a:	d004      	beq.n	8006356 <hidd_control_request+0x256>
 800634c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634e:	791b      	ldrb	r3, [r3, #4]
 8006350:	4618      	mov	r0, r3
 8006352:	f3af 8000 	nop.w

        tud_control_status(rhport, request);
 8006356:	79fb      	ldrb	r3, [r7, #7]
 8006358:	6839      	ldr	r1, [r7, #0]
 800635a:	4618      	mov	r0, r3
 800635c:	f002 fe48 	bl	8008ff0 <tud_control_status>
      break;
 8006360:	e003      	b.n	800636a <hidd_control_request+0x26a>

      default: return false; // stall unsupported request
 8006362:	2300      	movs	r3, #0
 8006364:	e002      	b.n	800636c <hidd_control_request+0x26c>
    }
  }else
  {
    return false; // stall unsupported request
 8006366:	2300      	movs	r3, #0
 8006368:	e000      	b.n	800636c <hidd_control_request+0x26c>
  }

  return true;
 800636a:	2301      	movs	r3, #1
}
 800636c:	4618      	mov	r0, r3
 800636e:	3728      	adds	r7, #40	; 0x28
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}
 8006374:	e000edf0 	.word	0xe000edf0
	...

08006380 <hidd_control_complete>:

// Invoked when class request DATA stage is finished.
// return false to stall control endpoint (e.g Host send non-sense DATA)
bool hidd_control_complete(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b086      	sub	sp, #24
 8006384:	af00      	add	r7, sp, #0
 8006386:	4603      	mov	r3, r0
 8006388:	6039      	str	r1, [r7, #0]
 800638a:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  hidd_interface_t* p_hid = get_interface_by_itfnum( (uint8_t) p_request->wIndex );
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	889b      	ldrh	r3, [r3, #4]
 8006390:	b29b      	uxth	r3, r3
 8006392:	b2db      	uxtb	r3, r3
 8006394:	4618      	mov	r0, r3
 8006396:	f7ff fce7 	bl	8005d68 <get_interface_by_itfnum>
 800639a:	6178      	str	r0, [r7, #20]
  TU_ASSERT(p_hid);
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d10a      	bne.n	80063b8 <hidd_control_complete+0x38>
 80063a2:	4b1a      	ldr	r3, [pc, #104]	; (800640c <hidd_control_complete+0x8c>)
 80063a4:	60fb      	str	r3, [r7, #12]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 0301 	and.w	r3, r3, #1
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d000      	beq.n	80063b4 <hidd_control_complete+0x34>
 80063b2:	be00      	bkpt	0x0000
 80063b4:	2300      	movs	r3, #0
 80063b6:	e025      	b.n	8006404 <hidd_control_complete+0x84>

  if (p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS &&
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	2b20      	cmp	r3, #32
 80063c4:	d11d      	bne.n	8006402 <hidd_control_complete+0x82>
      p_request->bRequest == HID_REQ_CONTROL_SET_REPORT)
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	785b      	ldrb	r3, [r3, #1]
  if (p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS &&
 80063ca:	2b09      	cmp	r3, #9
 80063cc:	d119      	bne.n	8006402 <hidd_control_complete+0x82>
  {
    // wValue = Report Type | Report ID
    uint8_t const report_type = tu_u16_high(p_request->wValue);
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	885b      	ldrh	r3, [r3, #2]
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	4618      	mov	r0, r3
 80063d6:	f7ff fc59 	bl	8005c8c <tu_u16_high>
 80063da:	4603      	mov	r3, r0
 80063dc:	74fb      	strb	r3, [r7, #19]
    uint8_t const report_id   = tu_u16_low(p_request->wValue);
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	885b      	ldrh	r3, [r3, #2]
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	4618      	mov	r0, r3
 80063e6:	f7ff fc5f 	bl	8005ca8 <tu_u16_low>
 80063ea:	4603      	mov	r3, r0
 80063ec:	74bb      	strb	r3, [r7, #18]

    tud_hid_set_report_cb(report_id, (hid_report_type_t) report_type, p_hid->epout_buf, p_request->wLength);
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	f103 0218 	add.w	r2, r3, #24
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	88db      	ldrh	r3, [r3, #6]
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	7cf9      	ldrb	r1, [r7, #19]
 80063fc:	7cb8      	ldrb	r0, [r7, #18]
 80063fe:	f7fa fc4e 	bl	8000c9e <tud_hid_set_report_cb>
  }

  return true;
 8006402:	2301      	movs	r3, #1
}
 8006404:	4618      	mov	r0, r3
 8006406:	3718      	adds	r7, #24
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}
 800640c:	e000edf0 	.word	0xe000edf0

08006410 <hidd_xfer_cb>:

bool hidd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b086      	sub	sp, #24
 8006414:	af00      	add	r7, sp, #0
 8006416:	603b      	str	r3, [r7, #0]
 8006418:	4603      	mov	r3, r0
 800641a:	71fb      	strb	r3, [r7, #7]
 800641c:	460b      	mov	r3, r1
 800641e:	71bb      	strb	r3, [r7, #6]
 8006420:	4613      	mov	r3, r2
 8006422:	717b      	strb	r3, [r7, #5]
  (void) result;

  uint8_t itf = 0;
 8006424:	2300      	movs	r3, #0
 8006426:	75fb      	strb	r3, [r7, #23]
  hidd_interface_t * p_hid = _hidd_itf;
 8006428:	4b20      	ldr	r3, [pc, #128]	; (80064ac <hidd_xfer_cb+0x9c>)
 800642a:	613b      	str	r3, [r7, #16]

  for ( ; ; itf++, p_hid++)
  {
    if (itf >= TU_ARRAY_SIZE(_hidd_itf)) return false;
 800642c:	7dfb      	ldrb	r3, [r7, #23]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d001      	beq.n	8006436 <hidd_xfer_cb+0x26>
 8006432:	2300      	movs	r3, #0
 8006434:	e035      	b.n	80064a2 <hidd_xfer_cb+0x92>

    if ( ep_addr == p_hid->ep_out ) break;
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	789b      	ldrb	r3, [r3, #2]
 800643a:	79ba      	ldrb	r2, [r7, #6]
 800643c:	429a      	cmp	r2, r3
 800643e:	d006      	beq.n	800644e <hidd_xfer_cb+0x3e>
  for ( ; ; itf++, p_hid++)
 8006440:	7dfb      	ldrb	r3, [r7, #23]
 8006442:	3301      	adds	r3, #1
 8006444:	75fb      	strb	r3, [r7, #23]
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	332c      	adds	r3, #44	; 0x2c
 800644a:	613b      	str	r3, [r7, #16]
    if (itf >= TU_ARRAY_SIZE(_hidd_itf)) return false;
 800644c:	e7ee      	b.n	800642c <hidd_xfer_cb+0x1c>
    if ( ep_addr == p_hid->ep_out ) break;
 800644e:	bf00      	nop
  }

  if (ep_addr == p_hid->ep_out)
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	789b      	ldrb	r3, [r3, #2]
 8006454:	79ba      	ldrb	r2, [r7, #6]
 8006456:	429a      	cmp	r2, r3
 8006458:	d122      	bne.n	80064a0 <hidd_xfer_cb+0x90>
  {
    tud_hid_set_report_cb(0, HID_REPORT_TYPE_INVALID, p_hid->epout_buf, xferred_bytes);
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	f103 0218 	add.w	r2, r3, #24
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	b29b      	uxth	r3, r3
 8006464:	2100      	movs	r1, #0
 8006466:	2000      	movs	r0, #0
 8006468:	f7fa fc19 	bl	8000c9e <tud_hid_set_report_cb>
    TU_ASSERT(usbd_edpt_xfer(rhport, p_hid->ep_out, p_hid->epout_buf, sizeof(p_hid->epout_buf)));
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	7899      	ldrb	r1, [r3, #2]
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	f103 0218 	add.w	r2, r3, #24
 8006476:	79f8      	ldrb	r0, [r7, #7]
 8006478:	2310      	movs	r3, #16
 800647a:	f002 fc8b 	bl	8008d94 <usbd_edpt_xfer>
 800647e:	4603      	mov	r3, r0
 8006480:	f083 0301 	eor.w	r3, r3, #1
 8006484:	b2db      	uxtb	r3, r3
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00a      	beq.n	80064a0 <hidd_xfer_cb+0x90>
 800648a:	4b09      	ldr	r3, [pc, #36]	; (80064b0 <hidd_xfer_cb+0xa0>)
 800648c:	60fb      	str	r3, [r7, #12]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 0301 	and.w	r3, r3, #1
 8006496:	2b00      	cmp	r3, #0
 8006498:	d000      	beq.n	800649c <hidd_xfer_cb+0x8c>
 800649a:	be00      	bkpt	0x0000
 800649c:	2300      	movs	r3, #0
 800649e:	e000      	b.n	80064a2 <hidd_xfer_cb+0x92>
  }

  return true;
 80064a0:	2301      	movs	r3, #1
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3718      	adds	r7, #24
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	20002304 	.word	0x20002304
 80064b0:	e000edf0 	.word	0xe000edf0

080064b4 <tu_edpt_dir>:
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	4603      	mov	r3, r0
 80064bc:	71fb      	strb	r3, [r7, #7]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80064be:	79fb      	ldrb	r3, [r7, #7]
 80064c0:	09db      	lsrs	r3, r3, #7
 80064c2:	b2db      	uxtb	r3, r3
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	370c      	adds	r7, #12
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bc80      	pop	{r7}
 80064cc:	4770      	bx	lr

080064ce <tu_desc_next>:
{
 80064ce:	b480      	push	{r7}
 80064d0:	b085      	sub	sp, #20
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	6078      	str	r0, [r7, #4]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	461a      	mov	r2, r3
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	4413      	add	r3, r2
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3714      	adds	r7, #20
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bc80      	pop	{r7}
 80064ec:	4770      	bx	lr

080064ee <tu_desc_len>:
{
 80064ee:	b480      	push	{r7}
 80064f0:	b083      	sub	sp, #12
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	781b      	ldrb	r3, [r3, #0]
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	370c      	adds	r7, #12
 80064fe:	46bd      	mov	sp, r7
 8006500:	bc80      	pop	{r7}
 8006502:	4770      	bx	lr

08006504 <midi_rx_done_cb>:
{
  (void) jack_id;
  tu_fifo_clear(&_midid_itf[itf].rx_ff);
}

void midi_rx_done_cb(midid_interface_t* midi, uint8_t const* buffer, uint32_t bufsize) {
 8006504:	b580      	push	{r7, lr}
 8006506:	b086      	sub	sp, #24
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	607a      	str	r2, [r7, #4]
  if (bufsize % 4 != 0) {
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f003 0303 	and.w	r3, r3, #3
 8006516:	2b00      	cmp	r3, #0
 8006518:	d136      	bne.n	8006588 <midi_rx_done_cb+0x84>
    return;
  }

  for(uint32_t i=0; i<bufsize; i += 4) {
 800651a:	2300      	movs	r3, #0
 800651c:	617b      	str	r3, [r7, #20]
 800651e:	e02e      	b.n	800657e <midi_rx_done_cb+0x7a>
    uint8_t header = buffer[i];
 8006520:	68ba      	ldr	r2, [r7, #8]
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	4413      	add	r3, r2
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	74bb      	strb	r3, [r7, #18]
    // uint8_t cable_number = (header & 0xf0) >> 4;
    uint8_t code_index = header & 0x0f;
 800652a:	7cbb      	ldrb	r3, [r7, #18]
 800652c:	f003 030f 	and.w	r3, r3, #15
 8006530:	747b      	strb	r3, [r7, #17]
    // We always copy over the first byte.
    uint8_t count = 1;
 8006532:	2301      	movs	r3, #1
 8006534:	74fb      	strb	r3, [r7, #19]
    // Ignore subsequent bytes based on the code.
    if (code_index != 0x5 && code_index != 0xf) {
 8006536:	7c7b      	ldrb	r3, [r7, #17]
 8006538:	2b05      	cmp	r3, #5
 800653a:	d012      	beq.n	8006562 <midi_rx_done_cb+0x5e>
 800653c:	7c7b      	ldrb	r3, [r7, #17]
 800653e:	2b0f      	cmp	r3, #15
 8006540:	d00f      	beq.n	8006562 <midi_rx_done_cb+0x5e>
      count = 2;
 8006542:	2302      	movs	r3, #2
 8006544:	74fb      	strb	r3, [r7, #19]
      if (code_index != 0x2 && code_index != 0x6 && code_index != 0xc && code_index != 0xd) {
 8006546:	7c7b      	ldrb	r3, [r7, #17]
 8006548:	2b02      	cmp	r3, #2
 800654a:	d00a      	beq.n	8006562 <midi_rx_done_cb+0x5e>
 800654c:	7c7b      	ldrb	r3, [r7, #17]
 800654e:	2b06      	cmp	r3, #6
 8006550:	d007      	beq.n	8006562 <midi_rx_done_cb+0x5e>
 8006552:	7c7b      	ldrb	r3, [r7, #17]
 8006554:	2b0c      	cmp	r3, #12
 8006556:	d004      	beq.n	8006562 <midi_rx_done_cb+0x5e>
 8006558:	7c7b      	ldrb	r3, [r7, #17]
 800655a:	2b0d      	cmp	r3, #13
 800655c:	d001      	beq.n	8006562 <midi_rx_done_cb+0x5e>
        count = 3;
 800655e:	2303      	movs	r3, #3
 8006560:	74fb      	strb	r3, [r7, #19]
      }
    }
    tu_fifo_write_n(&midi->rx_ff, &buffer[i + 1], count);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	1d18      	adds	r0, r3, #4
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	3301      	adds	r3, #1
 800656a:	68ba      	ldr	r2, [r7, #8]
 800656c:	4413      	add	r3, r2
 800656e:	7cfa      	ldrb	r2, [r7, #19]
 8006570:	b292      	uxth	r2, r2
 8006572:	4619      	mov	r1, r3
 8006574:	f001 fb5f 	bl	8007c36 <tu_fifo_write_n>
  for(uint32_t i=0; i<bufsize; i += 4) {
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	3304      	adds	r3, #4
 800657c:	617b      	str	r3, [r7, #20]
 800657e:	697a      	ldr	r2, [r7, #20]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	429a      	cmp	r2, r3
 8006584:	d3cc      	bcc.n	8006520 <midi_rx_done_cb+0x1c>
 8006586:	e000      	b.n	800658a <midi_rx_done_cb+0x86>
    return;
 8006588:	bf00      	nop
  }
}
 800658a:	3718      	adds	r7, #24
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <maybe_transmit>:
//--------------------------------------------------------------------+
// WRITE API
//--------------------------------------------------------------------+

static bool maybe_transmit(midid_interface_t* midi, uint8_t itf_index)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	460b      	mov	r3, r1
 800659a:	70fb      	strb	r3, [r7, #3]
  (void) itf_index;

  // skip if previous transfer not complete
  TU_VERIFY( !usbd_edpt_busy(TUD_OPT_RHPORT, midi->ep_in) );
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	785b      	ldrb	r3, [r3, #1]
 80065a0:	4619      	mov	r1, r3
 80065a2:	2000      	movs	r0, #0
 80065a4:	f002 fc2e 	bl	8008e04 <usbd_edpt_busy>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d001      	beq.n	80065b2 <maybe_transmit+0x22>
 80065ae:	2300      	movs	r3, #0
 80065b0:	e028      	b.n	8006604 <maybe_transmit+0x74>

  uint16_t count = tu_fifo_read_n(&midi->tx_ff, midi->epin_buf, CFG_TUD_MIDI_EPSIZE);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f103 0014 	add.w	r0, r3, #20
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	33ec      	adds	r3, #236	; 0xec
 80065bc:	2240      	movs	r2, #64	; 0x40
 80065be:	4619      	mov	r1, r3
 80065c0:	f001 fae9 	bl	8007b96 <tu_fifo_read_n>
 80065c4:	4603      	mov	r3, r0
 80065c6:	81fb      	strh	r3, [r7, #14]
  if (count > 0)
 80065c8:	89fb      	ldrh	r3, [r7, #14]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d019      	beq.n	8006602 <maybe_transmit+0x72>
  {
    TU_ASSERT( usbd_edpt_xfer(TUD_OPT_RHPORT, midi->ep_in, midi->epin_buf, count) );
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	7859      	ldrb	r1, [r3, #1]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 80065d8:	89fb      	ldrh	r3, [r7, #14]
 80065da:	2000      	movs	r0, #0
 80065dc:	f002 fbda 	bl	8008d94 <usbd_edpt_xfer>
 80065e0:	4603      	mov	r3, r0
 80065e2:	f083 0301 	eor.w	r3, r3, #1
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d00a      	beq.n	8006602 <maybe_transmit+0x72>
 80065ec:	4b07      	ldr	r3, [pc, #28]	; (800660c <maybe_transmit+0x7c>)
 80065ee:	60bb      	str	r3, [r7, #8]
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 0301 	and.w	r3, r3, #1
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d000      	beq.n	80065fe <maybe_transmit+0x6e>
 80065fc:	be00      	bkpt	0x0000
 80065fe:	2300      	movs	r3, #0
 8006600:	e000      	b.n	8006604 <maybe_transmit+0x74>
  }
  return true;
 8006602:	2301      	movs	r3, #1
}
 8006604:	4618      	mov	r0, r3
 8006606:	3710      	adds	r7, #16
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}
 800660c:	e000edf0 	.word	0xe000edf0

08006610 <tud_midi_n_write>:

uint32_t tud_midi_n_write(uint8_t itf, uint8_t jack_id, uint8_t const* buffer, uint32_t bufsize)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b088      	sub	sp, #32
 8006614:	af00      	add	r7, sp, #0
 8006616:	60ba      	str	r2, [r7, #8]
 8006618:	607b      	str	r3, [r7, #4]
 800661a:	4603      	mov	r3, r0
 800661c:	73fb      	strb	r3, [r7, #15]
 800661e:	460b      	mov	r3, r1
 8006620:	73bb      	strb	r3, [r7, #14]
  midid_interface_t* midi = &_midid_itf[itf];
 8006622:	7bfb      	ldrb	r3, [r7, #15]
 8006624:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006628:	fb02 f303 	mul.w	r3, r2, r3
 800662c:	4a89      	ldr	r2, [pc, #548]	; (8006854 <tud_midi_n_write+0x244>)
 800662e:	4413      	add	r3, r2
 8006630:	61bb      	str	r3, [r7, #24]
  if (midi->itf_num == 0) {
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d101      	bne.n	800663e <tud_midi_n_write+0x2e>
    return 0;
 800663a:	2300      	movs	r3, #0
 800663c:	e106      	b.n	800684c <tud_midi_n_write+0x23c>
  }

  uint32_t i = 0;
 800663e:	2300      	movs	r3, #0
 8006640:	61fb      	str	r3, [r7, #28]
  while (i < bufsize) {
 8006642:	e0f6      	b.n	8006832 <tud_midi_n_write+0x222>
    uint8_t data = buffer[i];
 8006644:	68ba      	ldr	r2, [r7, #8]
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	4413      	add	r3, r2
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	75fb      	strb	r3, [r7, #23]
    if (midi->message_buffer_length == 0) {
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8006654:	2b00      	cmp	r3, #0
 8006656:	f040 809a 	bne.w	800678e <tud_midi_n_write+0x17e>
        uint8_t msg = data >> 4;
 800665a:	7dfb      	ldrb	r3, [r7, #23]
 800665c:	091b      	lsrs	r3, r3, #4
 800665e:	75bb      	strb	r3, [r7, #22]
        midi->message_buffer[1] = data;
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	7dfa      	ldrb	r2, [r7, #23]
 8006664:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
        midi->message_buffer_length = 2;
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	2202      	movs	r2, #2
 800666c:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
        // Check to see if we're still in a SysEx transmit.
        if (midi->message_buffer[0] == 0x4) {
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8006676:	2b04      	cmp	r3, #4
 8006678:	d10c      	bne.n	8006694 <tud_midi_n_write+0x84>
            if (data == 0xf7) {
 800667a:	7dfb      	ldrb	r3, [r7, #23]
 800667c:	2bf7      	cmp	r3, #247	; 0xf7
 800667e:	d104      	bne.n	800668a <tud_midi_n_write+0x7a>
                midi->message_buffer[0] = 0x5;
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	2205      	movs	r2, #5
 8006684:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
 8006688:	e0a8      	b.n	80067dc <tud_midi_n_write+0x1cc>
            } else {
                midi->message_buffer_length = 4;
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	2204      	movs	r2, #4
 800668e:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
 8006692:	e0a3      	b.n	80067dc <tud_midi_n_write+0x1cc>
            }
        } else if ((msg >= 0x8 && msg <= 0xB) || msg == 0xE) {
 8006694:	7dbb      	ldrb	r3, [r7, #22]
 8006696:	2b07      	cmp	r3, #7
 8006698:	d902      	bls.n	80066a0 <tud_midi_n_write+0x90>
 800669a:	7dbb      	ldrb	r3, [r7, #22]
 800669c:	2b0b      	cmp	r3, #11
 800669e:	d902      	bls.n	80066a6 <tud_midi_n_write+0x96>
 80066a0:	7dbb      	ldrb	r3, [r7, #22]
 80066a2:	2b0e      	cmp	r3, #14
 80066a4:	d10f      	bne.n	80066c6 <tud_midi_n_write+0xb6>
            midi->message_buffer[0] = jack_id << 4 | msg;
 80066a6:	7bbb      	ldrb	r3, [r7, #14]
 80066a8:	011b      	lsls	r3, r3, #4
 80066aa:	b25a      	sxtb	r2, r3
 80066ac:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80066b0:	4313      	orrs	r3, r2
 80066b2:	b25b      	sxtb	r3, r3
 80066b4:	b2da      	uxtb	r2, r3
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
            midi->message_target_length = 4;
 80066bc:	69bb      	ldr	r3, [r7, #24]
 80066be:	2204      	movs	r2, #4
 80066c0:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
 80066c4:	e08a      	b.n	80067dc <tud_midi_n_write+0x1cc>
        } else if (msg == 0xC || msg == 0xD) {
 80066c6:	7dbb      	ldrb	r3, [r7, #22]
 80066c8:	2b0c      	cmp	r3, #12
 80066ca:	d002      	beq.n	80066d2 <tud_midi_n_write+0xc2>
 80066cc:	7dbb      	ldrb	r3, [r7, #22]
 80066ce:	2b0d      	cmp	r3, #13
 80066d0:	d10f      	bne.n	80066f2 <tud_midi_n_write+0xe2>
            midi->message_buffer[0] = jack_id << 4 | msg;
 80066d2:	7bbb      	ldrb	r3, [r7, #14]
 80066d4:	011b      	lsls	r3, r3, #4
 80066d6:	b25a      	sxtb	r2, r3
 80066d8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80066dc:	4313      	orrs	r3, r2
 80066de:	b25b      	sxtb	r3, r3
 80066e0:	b2da      	uxtb	r2, r3
 80066e2:	69bb      	ldr	r3, [r7, #24]
 80066e4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
            midi->message_target_length = 3;
 80066e8:	69bb      	ldr	r3, [r7, #24]
 80066ea:	2203      	movs	r2, #3
 80066ec:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
 80066f0:	e074      	b.n	80067dc <tud_midi_n_write+0x1cc>
        } else if (msg == 0xf) {
 80066f2:	7dbb      	ldrb	r3, [r7, #22]
 80066f4:	2b0f      	cmp	r3, #15
 80066f6:	d12f      	bne.n	8006758 <tud_midi_n_write+0x148>
            if (data == 0xf0) {
 80066f8:	7dfb      	ldrb	r3, [r7, #23]
 80066fa:	2bf0      	cmp	r3, #240	; 0xf0
 80066fc:	d108      	bne.n	8006710 <tud_midi_n_write+0x100>
                midi->message_buffer[0] = 0x4;
 80066fe:	69bb      	ldr	r3, [r7, #24]
 8006700:	2204      	movs	r2, #4
 8006702:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
                midi->message_target_length = 4;
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	2204      	movs	r2, #4
 800670a:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
 800670e:	e065      	b.n	80067dc <tud_midi_n_write+0x1cc>
            } else if (data == 0xf1 || data == 0xf3) {
 8006710:	7dfb      	ldrb	r3, [r7, #23]
 8006712:	2bf1      	cmp	r3, #241	; 0xf1
 8006714:	d002      	beq.n	800671c <tud_midi_n_write+0x10c>
 8006716:	7dfb      	ldrb	r3, [r7, #23]
 8006718:	2bf3      	cmp	r3, #243	; 0xf3
 800671a:	d108      	bne.n	800672e <tud_midi_n_write+0x11e>
                midi->message_buffer[0] = 0x2;
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	2202      	movs	r2, #2
 8006720:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
                midi->message_target_length = 3;
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	2203      	movs	r2, #3
 8006728:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
 800672c:	e056      	b.n	80067dc <tud_midi_n_write+0x1cc>
            } else if (data == 0xf2) {
 800672e:	7dfb      	ldrb	r3, [r7, #23]
 8006730:	2bf2      	cmp	r3, #242	; 0xf2
 8006732:	d108      	bne.n	8006746 <tud_midi_n_write+0x136>
                midi->message_buffer[0] = 0x3;
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	2203      	movs	r2, #3
 8006738:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
                midi->message_target_length = 4;
 800673c:	69bb      	ldr	r3, [r7, #24]
 800673e:	2204      	movs	r2, #4
 8006740:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
 8006744:	e04a      	b.n	80067dc <tud_midi_n_write+0x1cc>
            } else {
                midi->message_buffer[0] = 0x5;
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	2205      	movs	r2, #5
 800674a:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
                midi->message_target_length = 2;
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	2202      	movs	r2, #2
 8006752:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
 8006756:	e041      	b.n	80067dc <tud_midi_n_write+0x1cc>
            }
        } else {
            // Pack individual bytes if we don't support packing them into words.
            midi->message_buffer[0] = jack_id << 4 | 0xf;
 8006758:	7bbb      	ldrb	r3, [r7, #14]
 800675a:	011b      	lsls	r3, r3, #4
 800675c:	b25b      	sxtb	r3, r3
 800675e:	f043 030f 	orr.w	r3, r3, #15
 8006762:	b25b      	sxtb	r3, r3
 8006764:	b2da      	uxtb	r2, r3
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
            midi->message_buffer[2] = 0;
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	2200      	movs	r2, #0
 8006770:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
            midi->message_buffer[3] = 0;
 8006774:	69bb      	ldr	r3, [r7, #24]
 8006776:	2200      	movs	r2, #0
 8006778:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
            midi->message_buffer_length = 2;
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	2202      	movs	r2, #2
 8006780:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
            midi->message_target_length = 2;
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	2202      	movs	r2, #2
 8006788:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
 800678c:	e026      	b.n	80067dc <tud_midi_n_write+0x1cc>
        }
    } else {
        midi->message_buffer[midi->message_buffer_length] = data;
 800678e:	69bb      	ldr	r3, [r7, #24]
 8006790:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8006794:	461a      	mov	r2, r3
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	4413      	add	r3, r2
 800679a:	7dfa      	ldrb	r2, [r7, #23]
 800679c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
        midi->message_buffer_length += 1;
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 80067a6:	3301      	adds	r3, #1
 80067a8:	b2da      	uxtb	r2, r3
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
        // See if this byte ends a SysEx.
        if (midi->message_buffer[0] == 0x4 && data == 0xf7) {
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 80067b6:	2b04      	cmp	r3, #4
 80067b8:	d110      	bne.n	80067dc <tud_midi_n_write+0x1cc>
 80067ba:	7dfb      	ldrb	r3, [r7, #23]
 80067bc:	2bf7      	cmp	r3, #247	; 0xf7
 80067be:	d10d      	bne.n	80067dc <tud_midi_n_write+0x1cc>
            midi->message_buffer[0] = 0x4 + (midi->message_buffer_length - 1);
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 80067c6:	3303      	adds	r3, #3
 80067c8:	b2da      	uxtb	r2, r3
 80067ca:	69bb      	ldr	r3, [r7, #24]
 80067cc:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
            midi->message_target_length = midi->message_buffer_length;
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
        }
    }

    if (midi->message_buffer_length == midi->message_target_length) {
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 80067e2:	69bb      	ldr	r3, [r7, #24]
 80067e4:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d11f      	bne.n	800682c <tud_midi_n_write+0x21c>
        uint16_t written = tu_fifo_write_n(&midi->tx_ff, midi->message_buffer, 4);
 80067ec:	69bb      	ldr	r3, [r7, #24]
 80067ee:	f103 0014 	add.w	r0, r3, #20
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	33a4      	adds	r3, #164	; 0xa4
 80067f6:	2204      	movs	r2, #4
 80067f8:	4619      	mov	r1, r3
 80067fa:	f001 fa1c 	bl	8007c36 <tu_fifo_write_n>
 80067fe:	4603      	mov	r3, r0
 8006800:	82bb      	strh	r3, [r7, #20]
        if (written < 4) {
 8006802:	8abb      	ldrh	r3, [r7, #20]
 8006804:	2b03      	cmp	r3, #3
 8006806:	d80d      	bhi.n	8006824 <tud_midi_n_write+0x214>
            TU_ASSERT( written == 0 );
 8006808:	8abb      	ldrh	r3, [r7, #20]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d017      	beq.n	800683e <tud_midi_n_write+0x22e>
 800680e:	4b12      	ldr	r3, [pc, #72]	; (8006858 <tud_midi_n_write+0x248>)
 8006810:	613b      	str	r3, [r7, #16]
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f003 0301 	and.w	r3, r3, #1
 800681a:	2b00      	cmp	r3, #0
 800681c:	d000      	beq.n	8006820 <tud_midi_n_write+0x210>
 800681e:	be00      	bkpt	0x0000
 8006820:	2300      	movs	r3, #0
 8006822:	e013      	b.n	800684c <tud_midi_n_write+0x23c>
            break;
        }
        midi->message_buffer_length = 0;
 8006824:	69bb      	ldr	r3, [r7, #24]
 8006826:	2200      	movs	r2, #0
 8006828:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
    }
    i++;
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	3301      	adds	r3, #1
 8006830:	61fb      	str	r3, [r7, #28]
  while (i < bufsize) {
 8006832:	69fa      	ldr	r2, [r7, #28]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	429a      	cmp	r2, r3
 8006838:	f4ff af04 	bcc.w	8006644 <tud_midi_n_write+0x34>
 800683c:	e000      	b.n	8006840 <tud_midi_n_write+0x230>
            break;
 800683e:	bf00      	nop
  }
  maybe_transmit(midi, itf);
 8006840:	7bfb      	ldrb	r3, [r7, #15]
 8006842:	4619      	mov	r1, r3
 8006844:	69b8      	ldr	r0, [r7, #24]
 8006846:	f7ff fea3 	bl	8006590 <maybe_transmit>

  return i;
 800684a:	69fb      	ldr	r3, [r7, #28]
}
 800684c:	4618      	mov	r0, r3
 800684e:	3720      	adds	r7, #32
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}
 8006854:	20002ac0 	.word	0x20002ac0
 8006858:	e000edf0 	.word	0xe000edf0

0800685c <midid_init>:

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void midid_init(void)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af02      	add	r7, sp, #8
  tu_memclr(_midid_itf, sizeof(_midid_itf));
 8006862:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006866:	2100      	movs	r1, #0
 8006868:	4817      	ldr	r0, [pc, #92]	; (80068c8 <midid_init+0x6c>)
 800686a:	f003 fec3 	bl	800a5f4 <memset>

  for(uint8_t i=0; i<CFG_TUD_MIDI; i++)
 800686e:	2300      	movs	r3, #0
 8006870:	71fb      	strb	r3, [r7, #7]
 8006872:	e021      	b.n	80068b8 <midid_init+0x5c>
  {
    midid_interface_t* midi = &_midid_itf[i];
 8006874:	79fb      	ldrb	r3, [r7, #7]
 8006876:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800687a:	fb02 f303 	mul.w	r3, r2, r3
 800687e:	4a12      	ldr	r2, [pc, #72]	; (80068c8 <midid_init+0x6c>)
 8006880:	4413      	add	r3, r2
 8006882:	603b      	str	r3, [r7, #0]

    // config fifo
    tu_fifo_config(&midi->rx_ff, midi->rx_ff_buf, CFG_TUD_MIDI_RX_BUFSIZE, 1, true);
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	1d18      	adds	r0, r3, #4
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800688e:	2301      	movs	r3, #1
 8006890:	9300      	str	r3, [sp, #0]
 8006892:	2301      	movs	r3, #1
 8006894:	2240      	movs	r2, #64	; 0x40
 8006896:	f001 f8d8 	bl	8007a4a <tu_fifo_config>
    tu_fifo_config(&midi->tx_ff, midi->tx_ff_buf, CFG_TUD_MIDI_TX_BUFSIZE, 1, true);
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	f103 0014 	add.w	r0, r3, #20
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	f103 0164 	add.w	r1, r3, #100	; 0x64
 80068a6:	2301      	movs	r3, #1
 80068a8:	9300      	str	r3, [sp, #0]
 80068aa:	2301      	movs	r3, #1
 80068ac:	2240      	movs	r2, #64	; 0x40
 80068ae:	f001 f8cc 	bl	8007a4a <tu_fifo_config>
  for(uint8_t i=0; i<CFG_TUD_MIDI; i++)
 80068b2:	79fb      	ldrb	r3, [r7, #7]
 80068b4:	3301      	adds	r3, #1
 80068b6:	71fb      	strb	r3, [r7, #7]
 80068b8:	79fb      	ldrb	r3, [r7, #7]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d0da      	beq.n	8006874 <midid_init+0x18>
    #if CFG_FIFO_MUTEX
    tu_fifo_config_mutex(&midi->rx_ff, osal_mutex_create(&midi->rx_ff_mutex));
    tu_fifo_config_mutex(&midi->tx_ff, osal_mutex_create(&midi->tx_ff_mutex));
    #endif
  }
}
 80068be:	bf00      	nop
 80068c0:	3708      	adds	r7, #8
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	20002ac0 	.word	0x20002ac0

080068cc <midid_reset>:

void midid_reset(uint8_t rhport)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	4603      	mov	r3, r0
 80068d4:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  for(uint8_t i=0; i<CFG_TUD_MIDI; i++)
 80068d6:	2300      	movs	r3, #0
 80068d8:	73fb      	strb	r3, [r7, #15]
 80068da:	e019      	b.n	8006910 <midid_reset+0x44>
  {
    midid_interface_t* midi = &_midid_itf[i];
 80068dc:	7bfb      	ldrb	r3, [r7, #15]
 80068de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80068e2:	fb02 f303 	mul.w	r3, r2, r3
 80068e6:	4a0e      	ldr	r2, [pc, #56]	; (8006920 <midid_reset+0x54>)
 80068e8:	4413      	add	r3, r2
 80068ea:	60bb      	str	r3, [r7, #8]
    tu_memclr(midi, ITF_MEM_RESET_SIZE);
 80068ec:	2204      	movs	r2, #4
 80068ee:	2100      	movs	r1, #0
 80068f0:	68b8      	ldr	r0, [r7, #8]
 80068f2:	f003 fe7f 	bl	800a5f4 <memset>
    tu_fifo_clear(&midi->rx_ff);
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	3304      	adds	r3, #4
 80068fa:	4618      	mov	r0, r3
 80068fc:	f001 f9d5 	bl	8007caa <tu_fifo_clear>
    tu_fifo_clear(&midi->tx_ff);
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	3314      	adds	r3, #20
 8006904:	4618      	mov	r0, r3
 8006906:	f001 f9d0 	bl	8007caa <tu_fifo_clear>
  for(uint8_t i=0; i<CFG_TUD_MIDI; i++)
 800690a:	7bfb      	ldrb	r3, [r7, #15]
 800690c:	3301      	adds	r3, #1
 800690e:	73fb      	strb	r3, [r7, #15]
 8006910:	7bfb      	ldrb	r3, [r7, #15]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d0e2      	beq.n	80068dc <midid_reset+0x10>
  }
}
 8006916:	bf00      	nop
 8006918:	3710      	adds	r7, #16
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop
 8006920:	20002ac0 	.word	0x20002ac0

08006924 <midid_open>:

bool midid_open(uint8_t rhport, tusb_desc_interface_t const * p_interface_desc, uint16_t *p_length)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b08c      	sub	sp, #48	; 0x30
 8006928:	af00      	add	r7, sp, #0
 800692a:	4603      	mov	r3, r0
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	607a      	str	r2, [r7, #4]
 8006930:	73fb      	strb	r3, [r7, #15]
  // For now handle the audio control interface as well.
  if ( AUDIO_SUBCLASS_CONTROL == p_interface_desc->bInterfaceSubClass) {
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	799b      	ldrb	r3, [r3, #6]
 8006936:	2b01      	cmp	r3, #1
 8006938:	d118      	bne.n	800696c <midid_open+0x48>
    uint8_t const * p_desc = tu_desc_next ( (uint8_t const *) p_interface_desc );
 800693a:	68b8      	ldr	r0, [r7, #8]
 800693c:	f7ff fdc7 	bl	80064ce <tu_desc_next>
 8006940:	6138      	str	r0, [r7, #16]
    (*p_length) = sizeof(tusb_desc_interface_t);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2209      	movs	r2, #9
 8006946:	801a      	strh	r2, [r3, #0]

    // Skip over the class specific descriptor.
    (*p_length) += tu_desc_len(p_desc);
 8006948:	6938      	ldr	r0, [r7, #16]
 800694a:	f7ff fdd0 	bl	80064ee <tu_desc_len>
 800694e:	4603      	mov	r3, r0
 8006950:	4619      	mov	r1, r3
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	881a      	ldrh	r2, [r3, #0]
 8006956:	b28b      	uxth	r3, r1
 8006958:	4413      	add	r3, r2
 800695a:	b29a      	uxth	r2, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	801a      	strh	r2, [r3, #0]
    p_desc = tu_desc_next(p_desc);
 8006960:	6938      	ldr	r0, [r7, #16]
 8006962:	f7ff fdb4 	bl	80064ce <tu_desc_next>
 8006966:	6138      	str	r0, [r7, #16]
    return true;
 8006968:	2301      	movs	r3, #1
 800696a:	e0b5      	b.n	8006ad8 <midid_open+0x1b4>
  }

  TU_VERIFY(AUDIO_SUBCLASS_MIDI_STREAMING == p_interface_desc->bInterfaceSubClass &&
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	799b      	ldrb	r3, [r3, #6]
 8006970:	2b03      	cmp	r3, #3
 8006972:	d103      	bne.n	800697c <midid_open+0x58>
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	79db      	ldrb	r3, [r3, #7]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d001      	beq.n	8006980 <midid_open+0x5c>
 800697c:	2300      	movs	r3, #0
 800697e:	e0ab      	b.n	8006ad8 <midid_open+0x1b4>
            AUDIO_PROTOCOL_V1 == p_interface_desc->bInterfaceProtocol );

  // Find available interface
  midid_interface_t * p_midi = NULL;
 8006980:	2300      	movs	r3, #0
 8006982:	62fb      	str	r3, [r7, #44]	; 0x2c
  for(uint8_t i=0; i<CFG_TUD_MIDI; i++)
 8006984:	2300      	movs	r3, #0
 8006986:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800698a:	e026      	b.n	80069da <midid_open+0xb6>
  {
    if ( _midid_itf[i].ep_in == 0 && _midid_itf[i].ep_out == 0 )
 800698c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006990:	4a53      	ldr	r2, [pc, #332]	; (8006ae0 <midid_open+0x1bc>)
 8006992:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006996:	fb01 f303 	mul.w	r3, r1, r3
 800699a:	4413      	add	r3, r2
 800699c:	3301      	adds	r3, #1
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d115      	bne.n	80069d0 <midid_open+0xac>
 80069a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80069a8:	4a4d      	ldr	r2, [pc, #308]	; (8006ae0 <midid_open+0x1bc>)
 80069aa:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80069ae:	fb01 f303 	mul.w	r3, r1, r3
 80069b2:	4413      	add	r3, r2
 80069b4:	3302      	adds	r3, #2
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d109      	bne.n	80069d0 <midid_open+0xac>
    {
      p_midi = &_midid_itf[i];
 80069bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80069c0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80069c4:	fb02 f303 	mul.w	r3, r2, r3
 80069c8:	4a45      	ldr	r2, [pc, #276]	; (8006ae0 <midid_open+0x1bc>)
 80069ca:	4413      	add	r3, r2
 80069cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 80069ce:	e008      	b.n	80069e2 <midid_open+0xbe>
  for(uint8_t i=0; i<CFG_TUD_MIDI; i++)
 80069d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80069d4:	3301      	adds	r3, #1
 80069d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d0d4      	beq.n	800698c <midid_open+0x68>
    }
  }

  p_midi->itf_num  = p_interface_desc->bInterfaceNumber;
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	789a      	ldrb	r2, [r3, #2]
 80069e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e8:	701a      	strb	r2, [r3, #0]

  uint8_t const * p_desc = tu_desc_next( (uint8_t const *) p_interface_desc );
 80069ea:	68b8      	ldr	r0, [r7, #8]
 80069ec:	f7ff fd6f 	bl	80064ce <tu_desc_next>
 80069f0:	6278      	str	r0, [r7, #36]	; 0x24
  (*p_length) = sizeof(tusb_desc_interface_t);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2209      	movs	r2, #9
 80069f6:	801a      	strh	r2, [r3, #0]

  uint8_t found_endpoints = 0;
 80069f8:	2300      	movs	r3, #0
 80069fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  while (found_endpoints < p_interface_desc->bNumEndpoints)
 80069fe:	e04a      	b.n	8006a96 <midid_open+0x172>
  {
    if ( TUSB_DESC_ENDPOINT == p_desc[DESC_OFFSET_TYPE])
 8006a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a02:	3301      	adds	r3, #1
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	2b05      	cmp	r3, #5
 8006a08:	d138      	bne.n	8006a7c <midid_open+0x158>
    {
        TU_ASSERT( dcd_edpt_open(rhport, (tusb_desc_endpoint_t const *) p_desc), false);
 8006a0a:	7bfb      	ldrb	r3, [r7, #15]
 8006a0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f003 fb12 	bl	800a038 <dcd_edpt_open>
 8006a14:	4603      	mov	r3, r0
 8006a16:	f083 0301 	eor.w	r3, r3, #1
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d00a      	beq.n	8006a36 <midid_open+0x112>
 8006a20:	4b30      	ldr	r3, [pc, #192]	; (8006ae4 <midid_open+0x1c0>)
 8006a22:	617b      	str	r3, [r7, #20]
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f003 0301 	and.w	r3, r3, #1
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d000      	beq.n	8006a32 <midid_open+0x10e>
 8006a30:	be00      	bkpt	0x0000
 8006a32:	2300      	movs	r3, #0
 8006a34:	e050      	b.n	8006ad8 <midid_open+0x1b4>
        uint8_t ep_addr = ((tusb_desc_endpoint_t const *) p_desc)->bEndpointAddress;
 8006a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a38:	789b      	ldrb	r3, [r3, #2]
 8006a3a:	76fb      	strb	r3, [r7, #27]
        if (tu_edpt_dir(ep_addr) == TUSB_DIR_IN) {
 8006a3c:	7efb      	ldrb	r3, [r7, #27]
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f7ff fd38 	bl	80064b4 <tu_edpt_dir>
 8006a44:	4603      	mov	r3, r0
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d103      	bne.n	8006a52 <midid_open+0x12e>
            p_midi->ep_in = ep_addr;
 8006a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a4c:	7efa      	ldrb	r2, [r7, #27]
 8006a4e:	705a      	strb	r2, [r3, #1]
 8006a50:	e002      	b.n	8006a58 <midid_open+0x134>
        } else {
            p_midi->ep_out = ep_addr;
 8006a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a54:	7efa      	ldrb	r2, [r7, #27]
 8006a56:	709a      	strb	r2, [r3, #2]
        }

        (*p_length) += p_desc[DESC_OFFSET_LEN];
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	881a      	ldrh	r2, [r3, #0]
 8006a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	4413      	add	r3, r2
 8006a64:	b29a      	uxth	r2, r3
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	801a      	strh	r2, [r3, #0]
        p_desc = tu_desc_next(p_desc);
 8006a6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a6c:	f7ff fd2f 	bl	80064ce <tu_desc_next>
 8006a70:	6278      	str	r0, [r7, #36]	; 0x24
        found_endpoints += 1;
 8006a72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a76:	3301      	adds	r3, #1
 8006a78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    }
    (*p_length) += p_desc[DESC_OFFSET_LEN];
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	881a      	ldrh	r2, [r3, #0]
 8006a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	4413      	add	r3, r2
 8006a88:	b29a      	uxth	r2, r3
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	801a      	strh	r2, [r3, #0]
    p_desc = tu_desc_next(p_desc);
 8006a8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a90:	f7ff fd1d 	bl	80064ce <tu_desc_next>
 8006a94:	6278      	str	r0, [r7, #36]	; 0x24
  while (found_endpoints < p_interface_desc->bNumEndpoints)
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	791b      	ldrb	r3, [r3, #4]
 8006a9a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d3ae      	bcc.n	8006a00 <midid_open+0xdc>
  }

  // Prepare for incoming data
  TU_ASSERT( usbd_edpt_xfer(rhport, p_midi->ep_out, p_midi->epout_buf, CFG_TUD_MIDI_EPSIZE), false);
 8006aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aa4:	7899      	ldrb	r1, [r3, #2]
 8006aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aa8:	f103 02ac 	add.w	r2, r3, #172	; 0xac
 8006aac:	7bf8      	ldrb	r0, [r7, #15]
 8006aae:	2340      	movs	r3, #64	; 0x40
 8006ab0:	f002 f970 	bl	8008d94 <usbd_edpt_xfer>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	f083 0301 	eor.w	r3, r3, #1
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d00a      	beq.n	8006ad6 <midid_open+0x1b2>
 8006ac0:	4b08      	ldr	r3, [pc, #32]	; (8006ae4 <midid_open+0x1c0>)
 8006ac2:	61fb      	str	r3, [r7, #28]
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 0301 	and.w	r3, r3, #1
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d000      	beq.n	8006ad2 <midid_open+0x1ae>
 8006ad0:	be00      	bkpt	0x0000
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	e000      	b.n	8006ad8 <midid_open+0x1b4>

  return true;
 8006ad6:	2301      	movs	r3, #1
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3730      	adds	r7, #48	; 0x30
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	20002ac0 	.word	0x20002ac0
 8006ae4:	e000edf0 	.word	0xe000edf0

08006ae8 <midid_control_complete>:

bool midid_control_complete(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	4603      	mov	r3, r0
 8006af0:	6039      	str	r1, [r7, #0]
 8006af2:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  (void) p_request;
  return true;
 8006af4:	2301      	movs	r3, #1
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	370c      	adds	r7, #12
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bc80      	pop	{r7}
 8006afe:	4770      	bx	lr

08006b00 <midid_control_request>:

bool midid_control_request(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	4603      	mov	r3, r0
 8006b08:	6039      	str	r1, [r7, #0]
 8006b0a:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  (void) p_request;

  // driver doesn't support any request yet
  return false;
 8006b0c:	2300      	movs	r3, #0
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	370c      	adds	r7, #12
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bc80      	pop	{r7}
 8006b16:	4770      	bx	lr

08006b18 <midid_xfer_cb>:

bool midid_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b086      	sub	sp, #24
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	603b      	str	r3, [r7, #0]
 8006b20:	4603      	mov	r3, r0
 8006b22:	71fb      	strb	r3, [r7, #7]
 8006b24:	460b      	mov	r3, r1
 8006b26:	71bb      	strb	r3, [r7, #6]
 8006b28:	4613      	mov	r3, r2
 8006b2a:	717b      	strb	r3, [r7, #5]
  (void) result;

  uint8_t itf = 0;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	75fb      	strb	r3, [r7, #23]
  midid_interface_t* p_midi = _midid_itf;
 8006b30:	4b24      	ldr	r3, [pc, #144]	; (8006bc4 <midid_xfer_cb+0xac>)
 8006b32:	613b      	str	r3, [r7, #16]

  for ( ; ; itf++, p_midi++)
  {
    if (itf >= TU_ARRAY_SIZE(_midid_itf)) return false;
 8006b34:	7dfb      	ldrb	r3, [r7, #23]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d001      	beq.n	8006b3e <midid_xfer_cb+0x26>
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	e03e      	b.n	8006bbc <midid_xfer_cb+0xa4>

    if ( ep_addr == p_midi->ep_out ) break;
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	789b      	ldrb	r3, [r3, #2]
 8006b42:	79ba      	ldrb	r2, [r7, #6]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d007      	beq.n	8006b58 <midid_xfer_cb+0x40>
  for ( ; ; itf++, p_midi++)
 8006b48:	7dfb      	ldrb	r3, [r7, #23]
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	75fb      	strb	r3, [r7, #23]
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8006b54:	613b      	str	r3, [r7, #16]
    if (itf >= TU_ARRAY_SIZE(_midid_itf)) return false;
 8006b56:	e7ed      	b.n	8006b34 <midid_xfer_cb+0x1c>
    if ( ep_addr == p_midi->ep_out ) break;
 8006b58:	bf00      	nop
  }

  // receive new data
  if ( ep_addr == p_midi->ep_out )
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	789b      	ldrb	r3, [r3, #2]
 8006b5e:	79ba      	ldrb	r2, [r7, #6]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d120      	bne.n	8006ba6 <midid_xfer_cb+0x8e>
  {
    midi_rx_done_cb(p_midi, p_midi->epout_buf, xferred_bytes);
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	33ac      	adds	r3, #172	; 0xac
 8006b68:	683a      	ldr	r2, [r7, #0]
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	6938      	ldr	r0, [r7, #16]
 8006b6e:	f7ff fcc9 	bl	8006504 <midi_rx_done_cb>

    // prepare for next
    TU_ASSERT( usbd_edpt_xfer(rhport, p_midi->ep_out, p_midi->epout_buf, CFG_TUD_MIDI_EPSIZE), false );
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	7899      	ldrb	r1, [r3, #2]
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	f103 02ac 	add.w	r2, r3, #172	; 0xac
 8006b7c:	79f8      	ldrb	r0, [r7, #7]
 8006b7e:	2340      	movs	r3, #64	; 0x40
 8006b80:	f002 f908 	bl	8008d94 <usbd_edpt_xfer>
 8006b84:	4603      	mov	r3, r0
 8006b86:	f083 0301 	eor.w	r3, r3, #1
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d014      	beq.n	8006bba <midid_xfer_cb+0xa2>
 8006b90:	4b0d      	ldr	r3, [pc, #52]	; (8006bc8 <midid_xfer_cb+0xb0>)
 8006b92:	60fb      	str	r3, [r7, #12]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f003 0301 	and.w	r3, r3, #1
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d000      	beq.n	8006ba2 <midid_xfer_cb+0x8a>
 8006ba0:	be00      	bkpt	0x0000
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	e00a      	b.n	8006bbc <midid_xfer_cb+0xa4>
  } else if ( ep_addr == p_midi->ep_in ) {
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	785b      	ldrb	r3, [r3, #1]
 8006baa:	79ba      	ldrb	r2, [r7, #6]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d104      	bne.n	8006bba <midid_xfer_cb+0xa2>
    maybe_transmit(p_midi, itf);
 8006bb0:	7dfb      	ldrb	r3, [r7, #23]
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	6938      	ldr	r0, [r7, #16]
 8006bb6:	f7ff fceb 	bl	8006590 <maybe_transmit>
  }

  // nothing to do with in and notif endpoint

  return true;
 8006bba:	2301      	movs	r3, #1
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3718      	adds	r7, #24
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	20002ac0 	.word	0x20002ac0
 8006bc8:	e000edf0 	.word	0xe000edf0

08006bcc <tu_desc_next>:
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b085      	sub	sp, #20
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	461a      	mov	r2, r3
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	4413      	add	r3, r2
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3714      	adds	r7, #20
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bc80      	pop	{r7}
 8006bea:	4770      	bx	lr

08006bec <tu_min32>:
static inline uint32_t tu_min32 (uint32_t x, uint32_t y) { return (x < y) ? x : y; }
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
 8006bf6:	683a      	ldr	r2, [r7, #0]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	bf28      	it	cs
 8006bfe:	4613      	movcs	r3, r2
 8006c00:	4618      	mov	r0, r3
 8006c02:	370c      	adds	r7, #12
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bc80      	pop	{r7}
 8006c08:	4770      	bx	lr

08006c0a <tu_bit_test>:
static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8006c0a:	b480      	push	{r7}
 8006c0c:	b083      	sub	sp, #12
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
 8006c12:	460b      	mov	r3, r1
 8006c14:	70fb      	strb	r3, [r7, #3]
 8006c16:	78fb      	ldrb	r3, [r7, #3]
 8006c18:	2201      	movs	r2, #1
 8006c1a:	409a      	lsls	r2, r3
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	4013      	ands	r3, r2
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	bf14      	ite	ne
 8006c24:	2301      	movne	r3, #1
 8006c26:	2300      	moveq	r3, #0
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	370c      	adds	r7, #12
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bc80      	pop	{r7}
 8006c32:	4770      	bx	lr

08006c34 <rdwr10_get_lba>:
//--------------------------------------------------------------------+
static void proc_read10_cmd(uint8_t rhport, mscd_interface_t* p_msc);
static void proc_write10_cmd(uint8_t rhport, mscd_interface_t* p_msc);

static inline uint32_t rdwr10_get_lba(uint8_t const command[])
{
 8006c34:	b480      	push	{r7}
 8006c36:	b085      	sub	sp, #20
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  // read10 & write10 has the same format
  scsi_write10_t* p_rdwr10 = (scsi_write10_t*) command;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	60fb      	str	r3, [r7, #12]

  // copy first to prevent mis-aligned access
  uint32_t lba;
  memcpy(&lba, &p_rdwr10->lba, 4);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	3302      	adds	r3, #2
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	60bb      	str	r3, [r7, #8]

  // lba is in Big Endian format
  return tu_ntohl(lba);
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	ba1b      	rev	r3, r3
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3714      	adds	r7, #20
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bc80      	pop	{r7}
 8006c54:	4770      	bx	lr

08006c56 <rdwr10_get_blockcount>:

static inline uint16_t rdwr10_get_blockcount(uint8_t const command[])
{
 8006c56:	b480      	push	{r7}
 8006c58:	b085      	sub	sp, #20
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
  // read10 & write10 has the same format
  scsi_write10_t* p_rdwr10 = (scsi_write10_t*) command;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	60fb      	str	r3, [r7, #12]

  // copy first to prevent mis-aligned access
  uint16_t block_count;
  memcpy(&block_count, &p_rdwr10->block_count, 2);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	3307      	adds	r3, #7
 8006c66:	881b      	ldrh	r3, [r3, #0]
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	817b      	strh	r3, [r7, #10]

  return tu_ntohs(block_count);
 8006c6c:	897b      	ldrh	r3, [r7, #10]
 8006c6e:	ba5b      	rev16	r3, r3
 8006c70:	b29b      	uxth	r3, r3
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3714      	adds	r7, #20
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bc80      	pop	{r7}
 8006c7a:	4770      	bx	lr

08006c7c <tud_msc_set_sense>:

//--------------------------------------------------------------------+
// APPLICATION API
//--------------------------------------------------------------------+
bool tud_msc_set_sense(uint8_t lun, uint8_t sense_key, uint8_t add_sense_code, uint8_t add_sense_qualifier)
{
 8006c7c:	b490      	push	{r4, r7}
 8006c7e:	b082      	sub	sp, #8
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	4604      	mov	r4, r0
 8006c84:	4608      	mov	r0, r1
 8006c86:	4611      	mov	r1, r2
 8006c88:	461a      	mov	r2, r3
 8006c8a:	4623      	mov	r3, r4
 8006c8c:	71fb      	strb	r3, [r7, #7]
 8006c8e:	4603      	mov	r3, r0
 8006c90:	71bb      	strb	r3, [r7, #6]
 8006c92:	460b      	mov	r3, r1
 8006c94:	717b      	strb	r3, [r7, #5]
 8006c96:	4613      	mov	r3, r2
 8006c98:	713b      	strb	r3, [r7, #4]
  (void) lun;

  _mscd_itf.sense_key           = sense_key;
 8006c9a:	4a09      	ldr	r2, [pc, #36]	; (8006cc0 <tud_msc_set_sense+0x44>)
 8006c9c:	79bb      	ldrb	r3, [r7, #6]
 8006c9e:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
  _mscd_itf.add_sense_code      = add_sense_code;
 8006ca2:	4a07      	ldr	r2, [pc, #28]	; (8006cc0 <tud_msc_set_sense+0x44>)
 8006ca4:	797b      	ldrb	r3, [r7, #5]
 8006ca6:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  _mscd_itf.add_sense_qualifier = add_sense_qualifier;
 8006caa:	4a05      	ldr	r2, [pc, #20]	; (8006cc0 <tud_msc_set_sense+0x44>)
 8006cac:	793b      	ldrb	r3, [r7, #4]
 8006cae:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e

  return true;
 8006cb2:	2301      	movs	r3, #1
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3708      	adds	r7, #8
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bc90      	pop	{r4, r7}
 8006cbc:	4770      	bx	lr
 8006cbe:	bf00      	nop
 8006cc0:	20002330 	.word	0x20002330

08006cc4 <mscd_init>:

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void mscd_init(void)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	af00      	add	r7, sp, #0
  tu_memclr(&_mscd_itf, sizeof(mscd_interface_t));
 8006cc8:	2240      	movs	r2, #64	; 0x40
 8006cca:	2100      	movs	r1, #0
 8006ccc:	4802      	ldr	r0, [pc, #8]	; (8006cd8 <mscd_init+0x14>)
 8006cce:	f003 fc91 	bl	800a5f4 <memset>
}
 8006cd2:	bf00      	nop
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	20002330 	.word	0x20002330

08006cdc <mscd_reset>:

void mscd_reset(uint8_t rhport)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  tu_memclr(&_mscd_itf, sizeof(mscd_interface_t));
 8006ce6:	2240      	movs	r2, #64	; 0x40
 8006ce8:	2100      	movs	r1, #0
 8006cea:	4803      	ldr	r0, [pc, #12]	; (8006cf8 <mscd_reset+0x1c>)
 8006cec:	f003 fc82 	bl	800a5f4 <memset>
}
 8006cf0:	bf00      	nop
 8006cf2:	3708      	adds	r7, #8
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	20002330 	.word	0x20002330

08006cfc <mscd_open>:

bool mscd_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t *p_len)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b08a      	sub	sp, #40	; 0x28
 8006d00:	af02      	add	r7, sp, #8
 8006d02:	4603      	mov	r3, r0
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	607a      	str	r2, [r7, #4]
 8006d08:	73fb      	strb	r3, [r7, #15]
  // only support SCSI's BOT protocol
  TU_ASSERT(MSC_SUBCLASS_SCSI == itf_desc->bInterfaceSubClass &&
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	799b      	ldrb	r3, [r3, #6]
 8006d0e:	2b06      	cmp	r3, #6
 8006d10:	d103      	bne.n	8006d1a <mscd_open+0x1e>
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	79db      	ldrb	r3, [r3, #7]
 8006d16:	2b50      	cmp	r3, #80	; 0x50
 8006d18:	d00a      	beq.n	8006d30 <mscd_open+0x34>
 8006d1a:	4b29      	ldr	r3, [pc, #164]	; (8006dc0 <mscd_open+0xc4>)
 8006d1c:	613b      	str	r3, [r7, #16]
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f003 0301 	and.w	r3, r3, #1
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d000      	beq.n	8006d2c <mscd_open+0x30>
 8006d2a:	be00      	bkpt	0x0000
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	e043      	b.n	8006db8 <mscd_open+0xbc>
            MSC_PROTOCOL_BOT  == itf_desc->bInterfaceProtocol);

  mscd_interface_t * p_msc = &_mscd_itf;
 8006d30:	4b24      	ldr	r3, [pc, #144]	; (8006dc4 <mscd_open+0xc8>)
 8006d32:	61fb      	str	r3, [r7, #28]

  // Open endpoint pair
  TU_ASSERT( usbd_open_edpt_pair(rhport, tu_desc_next(itf_desc), 2, TUSB_XFER_BULK, &p_msc->ep_out, &p_msc->ep_in) );
 8006d34:	68b8      	ldr	r0, [r7, #8]
 8006d36:	f7ff ff49 	bl	8006bcc <tu_desc_next>
 8006d3a:	4601      	mov	r1, r0
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	332f      	adds	r3, #47	; 0x2f
 8006d40:	69fa      	ldr	r2, [r7, #28]
 8006d42:	322e      	adds	r2, #46	; 0x2e
 8006d44:	7bf8      	ldrb	r0, [r7, #15]
 8006d46:	9201      	str	r2, [sp, #4]
 8006d48:	9300      	str	r3, [sp, #0]
 8006d4a:	2302      	movs	r3, #2
 8006d4c:	2202      	movs	r2, #2
 8006d4e:	f001 ffbf 	bl	8008cd0 <usbd_open_edpt_pair>
 8006d52:	4603      	mov	r3, r0
 8006d54:	f083 0301 	eor.w	r3, r3, #1
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d00a      	beq.n	8006d74 <mscd_open+0x78>
 8006d5e:	4b18      	ldr	r3, [pc, #96]	; (8006dc0 <mscd_open+0xc4>)
 8006d60:	617b      	str	r3, [r7, #20]
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f003 0301 	and.w	r3, r3, #1
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d000      	beq.n	8006d70 <mscd_open+0x74>
 8006d6e:	be00      	bkpt	0x0000
 8006d70:	2300      	movs	r3, #0
 8006d72:	e021      	b.n	8006db8 <mscd_open+0xbc>

  p_msc->itf_num = itf_desc->bInterfaceNumber;
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	789a      	ldrb	r2, [r3, #2]
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  (*p_len) = sizeof(tusb_desc_interface_t) + 2*sizeof(tusb_desc_endpoint_t);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2217      	movs	r2, #23
 8006d82:	801a      	strh	r2, [r3, #0]

  // Prepare for Command Block Wrapper
  TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_out, (uint8_t*) &p_msc->cbw, sizeof(msc_cbw_t)) );
 8006d84:	69fb      	ldr	r3, [r7, #28]
 8006d86:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 8006d8a:	69fa      	ldr	r2, [r7, #28]
 8006d8c:	7bf8      	ldrb	r0, [r7, #15]
 8006d8e:	231f      	movs	r3, #31
 8006d90:	f002 f800 	bl	8008d94 <usbd_edpt_xfer>
 8006d94:	4603      	mov	r3, r0
 8006d96:	f083 0301 	eor.w	r3, r3, #1
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d00a      	beq.n	8006db6 <mscd_open+0xba>
 8006da0:	4b07      	ldr	r3, [pc, #28]	; (8006dc0 <mscd_open+0xc4>)
 8006da2:	61bb      	str	r3, [r7, #24]
 8006da4:	69bb      	ldr	r3, [r7, #24]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f003 0301 	and.w	r3, r3, #1
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d000      	beq.n	8006db2 <mscd_open+0xb6>
 8006db0:	be00      	bkpt	0x0000
 8006db2:	2300      	movs	r3, #0
 8006db4:	e000      	b.n	8006db8 <mscd_open+0xbc>

  return true;
 8006db6:	2301      	movs	r3, #1
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3720      	adds	r7, #32
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	e000edf0 	.word	0xe000edf0
 8006dc4:	20002330 	.word	0x20002330

08006dc8 <mscd_control_request>:

// Handle class control request
// return false to stall control endpoint (e.g unsupported request)
bool mscd_control_request(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b084      	sub	sp, #16
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	4603      	mov	r3, r0
 8006dd0:	6039      	str	r1, [r7, #0]
 8006dd2:	71fb      	strb	r3, [r7, #7]
  // Handle class request only
  TU_VERIFY(p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	2b20      	cmp	r3, #32
 8006de0:	d001      	beq.n	8006de6 <mscd_control_request+0x1e>
 8006de2:	2300      	movs	r3, #0
 8006de4:	e028      	b.n	8006e38 <mscd_control_request+0x70>

  switch ( p_request->bRequest )
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	785b      	ldrb	r3, [r3, #1]
 8006dea:	2bfe      	cmp	r3, #254	; 0xfe
 8006dec:	d007      	beq.n	8006dfe <mscd_control_request+0x36>
 8006dee:	2bff      	cmp	r3, #255	; 0xff
 8006df0:	d11f      	bne.n	8006e32 <mscd_control_request+0x6a>
  {
    case MSC_REQ_RESET:
      // TODO: Actually reset interface.
      tud_control_status(rhport, p_request);
 8006df2:	79fb      	ldrb	r3, [r7, #7]
 8006df4:	6839      	ldr	r1, [r7, #0]
 8006df6:	4618      	mov	r0, r3
 8006df8:	f002 f8fa 	bl	8008ff0 <tud_control_status>
    break;
 8006dfc:	e01b      	b.n	8006e36 <mscd_control_request+0x6e>

    case MSC_REQ_GET_MAX_LUN:
    {
      uint8_t maxlun = 1;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	73fb      	strb	r3, [r7, #15]
      if (tud_msc_get_maxlun_cb) maxlun = tud_msc_get_maxlun_cb();
 8006e02:	4b0f      	ldr	r3, [pc, #60]	; (8006e40 <mscd_control_request+0x78>)
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d003      	beq.n	8006e10 <mscd_control_request+0x48>
 8006e08:	f3af 8000 	nop.w
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	73fb      	strb	r3, [r7, #15]
      TU_VERIFY(maxlun);
 8006e10:	7bfb      	ldrb	r3, [r7, #15]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d101      	bne.n	8006e1a <mscd_control_request+0x52>
 8006e16:	2300      	movs	r3, #0
 8006e18:	e00e      	b.n	8006e38 <mscd_control_request+0x70>

      // MAX LUN is minus 1 by specs
      maxlun--;
 8006e1a:	7bfb      	ldrb	r3, [r7, #15]
 8006e1c:	3b01      	subs	r3, #1
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	73fb      	strb	r3, [r7, #15]

      tud_control_xfer(rhport, p_request, &maxlun, 1);
 8006e22:	f107 020f 	add.w	r2, r7, #15
 8006e26:	79f8      	ldrb	r0, [r7, #7]
 8006e28:	2301      	movs	r3, #1
 8006e2a:	6839      	ldr	r1, [r7, #0]
 8006e2c:	f002 f93a 	bl	80090a4 <tud_control_xfer>
    }
    break;
 8006e30:	e001      	b.n	8006e36 <mscd_control_request+0x6e>

    default: return false; // stall unsupported request
 8006e32:	2300      	movs	r3, #0
 8006e34:	e000      	b.n	8006e38 <mscd_control_request+0x70>
  }

  return true;
 8006e36:	2301      	movs	r3, #1
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3710      	adds	r7, #16
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	00000000 	.word	0x00000000

08006e44 <mscd_control_complete>:

// Invoked when class request DATA stage is finished.
// return false to stall control endpoint (e.g Host send non-sense DATA)
bool mscd_control_complete(uint8_t rhport, tusb_control_request_t const * request)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	6039      	str	r1, [r7, #0]
 8006e4e:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  (void) request;

  // nothing to do
  return true;
 8006e50:	2301      	movs	r3, #1
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	370c      	adds	r7, #12
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bc80      	pop	{r7}
 8006e5a:	4770      	bx	lr

08006e5c <proc_builtin_scsi>:

// return response's length (copied to buffer). Negative if it is not an built-in command or indicate Failed status (CSW)
// In case of a failed status, sense key must be set for reason of failure
int32_t proc_builtin_scsi(uint8_t lun, uint8_t const scsi_cmd[16], uint8_t* buffer, uint32_t bufsize)
{
 8006e5c:	b590      	push	{r4, r7, lr}
 8006e5e:	b0a1      	sub	sp, #132	; 0x84
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	60b9      	str	r1, [r7, #8]
 8006e64:	607a      	str	r2, [r7, #4]
 8006e66:	603b      	str	r3, [r7, #0]
 8006e68:	4603      	mov	r3, r0
 8006e6a:	73fb      	strb	r3, [r7, #15]
  (void) bufsize; // TODO refractor later
  int32_t resplen;

  switch ( scsi_cmd[0] )
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	2b25      	cmp	r3, #37	; 0x25
 8006e72:	f200 81d9 	bhi.w	8007228 <proc_builtin_scsi+0x3cc>
 8006e76:	a201      	add	r2, pc, #4	; (adr r2, 8006e7c <proc_builtin_scsi+0x20>)
 8006e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e7c:	08006f15 	.word	0x08006f15
 8006e80:	08007229 	.word	0x08007229
 8006e84:	08007229 	.word	0x08007229
 8006e88:	080071ad 	.word	0x080071ad
 8006e8c:	08007229 	.word	0x08007229
 8006e90:	08007229 	.word	0x08007229
 8006e94:	08007229 	.word	0x08007229
 8006e98:	08007229 	.word	0x08007229
 8006e9c:	08007229 	.word	0x08007229
 8006ea0:	08007229 	.word	0x08007229
 8006ea4:	08007229 	.word	0x08007229
 8006ea8:	08007229 	.word	0x08007229
 8006eac:	08007229 	.word	0x08007229
 8006eb0:	08007229 	.word	0x08007229
 8006eb4:	08007229 	.word	0x08007229
 8006eb8:	08007229 	.word	0x08007229
 8006ebc:	08007229 	.word	0x08007229
 8006ec0:	08007229 	.word	0x08007229
 8006ec4:	080070a7 	.word	0x080070a7
 8006ec8:	08007229 	.word	0x08007229
 8006ecc:	08007229 	.word	0x08007229
 8006ed0:	08007229 	.word	0x08007229
 8006ed4:	08007229 	.word	0x08007229
 8006ed8:	08007229 	.word	0x08007229
 8006edc:	08007229 	.word	0x08007229
 8006ee0:	08007229 	.word	0x08007229
 8006ee4:	0800712f 	.word	0x0800712f
 8006ee8:	08006f4f 	.word	0x08006f4f
 8006eec:	08007229 	.word	0x08007229
 8006ef0:	08007229 	.word	0x08007229
 8006ef4:	08007229 	.word	0x08007229
 8006ef8:	08007229 	.word	0x08007229
 8006efc:	08007229 	.word	0x08007229
 8006f00:	08007229 	.word	0x08007229
 8006f04:	08007229 	.word	0x08007229
 8006f08:	0800702b 	.word	0x0800702b
 8006f0c:	08007229 	.word	0x08007229
 8006f10:	08006fc7 	.word	0x08006fc7
  {
    case SCSI_CMD_TEST_UNIT_READY:
      resplen = 0;
 8006f14:	2300      	movs	r3, #0
 8006f16:	67fb      	str	r3, [r7, #124]	; 0x7c
      if ( !tud_msc_test_unit_ready_cb(lun) )
 8006f18:	7bfb      	ldrb	r3, [r7, #15]
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f7f9 ff90 	bl	8000e40 <tud_msc_test_unit_ready_cb>
 8006f20:	4603      	mov	r3, r0
 8006f22:	f083 0301 	eor.w	r3, r3, #1
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	f000 8181 	beq.w	8007230 <proc_builtin_scsi+0x3d4>
      {
        // Failed status response
        resplen = - 1;
 8006f2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f32:	67fb      	str	r3, [r7, #124]	; 0x7c

        // If sense key is not set by callback, default to Logical Unit Not Ready, Cause Not Reportable
        if ( _mscd_itf.sense_key == 0 ) tud_msc_set_sense(lun, SCSI_SENSE_NOT_READY, 0x04, 0x00);
 8006f34:	4bc2      	ldr	r3, [pc, #776]	; (8007240 <proc_builtin_scsi+0x3e4>)
 8006f36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	f040 8178 	bne.w	8007230 <proc_builtin_scsi+0x3d4>
 8006f40:	7bf8      	ldrb	r0, [r7, #15]
 8006f42:	2300      	movs	r3, #0
 8006f44:	2204      	movs	r2, #4
 8006f46:	2102      	movs	r1, #2
 8006f48:	f7ff fe98 	bl	8006c7c <tud_msc_set_sense>
      }
    break;
 8006f4c:	e170      	b.n	8007230 <proc_builtin_scsi+0x3d4>

    case SCSI_CMD_START_STOP_UNIT:
      resplen = 0;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	67fb      	str	r3, [r7, #124]	; 0x7c

      if (tud_msc_start_stop_cb)
 8006f52:	4bbc      	ldr	r3, [pc, #752]	; (8007244 <proc_builtin_scsi+0x3e8>)
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f000 816d 	beq.w	8007234 <proc_builtin_scsi+0x3d8>
      {
        scsi_start_stop_unit_t const * start_stop = (scsi_start_stop_unit_t const *) scsi_cmd;
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	673b      	str	r3, [r7, #112]	; 0x70
        if ( !tud_msc_start_stop_cb(lun, start_stop->power_condition, start_stop->start, start_stop->load_eject) )
 8006f5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f60:	791b      	ldrb	r3, [r3, #4]
 8006f62:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	4619      	mov	r1, r3
 8006f6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f6c:	791b      	ldrb	r3, [r3, #4]
 8006f6e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006f72:	b2db      	uxtb	r3, r3
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	bf14      	ite	ne
 8006f78:	2301      	movne	r3, #1
 8006f7a:	2300      	moveq	r3, #0
 8006f7c:	b2da      	uxtb	r2, r3
 8006f7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f80:	791b      	ldrb	r3, [r3, #4]
 8006f82:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	bf14      	ite	ne
 8006f8c:	2301      	movne	r3, #1
 8006f8e:	2300      	moveq	r3, #0
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	7bf8      	ldrb	r0, [r7, #15]
 8006f94:	f7f9 ff72 	bl	8000e7c <tud_msc_start_stop_cb>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	f083 0301 	eor.w	r3, r3, #1
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	f000 8147 	beq.w	8007234 <proc_builtin_scsi+0x3d8>
        {
          // Failed status response
          resplen = - 1;
 8006fa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006faa:	67fb      	str	r3, [r7, #124]	; 0x7c

          // If sense key is not set by callback, default to Logical Unit Not Ready, Cause Not Reportable
          if ( _mscd_itf.sense_key == 0 ) tud_msc_set_sense(lun, SCSI_SENSE_NOT_READY, 0x04, 0x00);
 8006fac:	4ba4      	ldr	r3, [pc, #656]	; (8007240 <proc_builtin_scsi+0x3e4>)
 8006fae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	f040 813e 	bne.w	8007234 <proc_builtin_scsi+0x3d8>
 8006fb8:	7bf8      	ldrb	r0, [r7, #15]
 8006fba:	2300      	movs	r3, #0
 8006fbc:	2204      	movs	r2, #4
 8006fbe:	2102      	movs	r1, #2
 8006fc0:	f7ff fe5c 	bl	8006c7c <tud_msc_set_sense>
        }
      }
    break;
 8006fc4:	e136      	b.n	8007234 <proc_builtin_scsi+0x3d8>
    {
      uint32_t block_count;
      uint32_t block_size;
      uint16_t block_size_u16;

      tud_msc_capacity_cb(lun, &block_count, &block_size_u16);
 8006fc6:	f107 026a 	add.w	r2, r7, #106	; 0x6a
 8006fca:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8006fce:	7bfb      	ldrb	r3, [r7, #15]
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f7f9 ff40 	bl	8000e56 <tud_msc_capacity_cb>
      block_size = (uint32_t) block_size_u16;
 8006fd6:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8006fda:	677b      	str	r3, [r7, #116]	; 0x74

      // Invalid block size/count from callback, possibly unit is not ready
      // stall this request, set sense key to NOT READY
      if (block_count == 0 || block_size == 0)
 8006fdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d002      	beq.n	8006fe8 <proc_builtin_scsi+0x18c>
 8006fe2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d10e      	bne.n	8007006 <proc_builtin_scsi+0x1aa>
      {
        resplen = -1;
 8006fe8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006fec:	67fb      	str	r3, [r7, #124]	; 0x7c

        // If sense key is not set by callback, default to Logical Unit Not Ready, Cause Not Reportable
        if ( _mscd_itf.sense_key == 0 ) tud_msc_set_sense(lun, SCSI_SENSE_NOT_READY, 0x04, 0x00);
 8006fee:	4b94      	ldr	r3, [pc, #592]	; (8007240 <proc_builtin_scsi+0x3e4>)
 8006ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d117      	bne.n	8007028 <proc_builtin_scsi+0x1cc>
 8006ff8:	7bf8      	ldrb	r0, [r7, #15]
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	2204      	movs	r2, #4
 8006ffe:	2102      	movs	r1, #2
 8007000:	f7ff fe3c 	bl	8006c7c <tud_msc_set_sense>
 8007004:	e010      	b.n	8007028 <proc_builtin_scsi+0x1cc>
      }else
      {
        scsi_read_capacity10_resp_t read_capa10;

        read_capa10.last_lba = tu_htonl(block_count-1);
 8007006:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007008:	3b01      	subs	r3, #1
 800700a:	ba1b      	rev	r3, r3
 800700c:	663b      	str	r3, [r7, #96]	; 0x60
        read_capa10.block_size = tu_htonl(block_size);
 800700e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007010:	ba1b      	rev	r3, r3
 8007012:	667b      	str	r3, [r7, #100]	; 0x64

        resplen = sizeof(read_capa10);
 8007014:	2308      	movs	r3, #8
 8007016:	67fb      	str	r3, [r7, #124]	; 0x7c
        memcpy(buffer, &read_capa10, resplen);
 8007018:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800701a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800701e:	4619      	mov	r1, r3
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f003 fac3 	bl	800a5ac <memcpy>
      }
    }
    break;
 8007026:	e106      	b.n	8007236 <proc_builtin_scsi+0x3da>
 8007028:	e105      	b.n	8007236 <proc_builtin_scsi+0x3da>

    case SCSI_CMD_READ_FORMAT_CAPACITY:
    {
      scsi_read_format_capacity_data_t read_fmt_capa =
 800702a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800702e:	2200      	movs	r2, #0
 8007030:	601a      	str	r2, [r3, #0]
 8007032:	605a      	str	r2, [r3, #4]
 8007034:	609a      	str	r2, [r3, #8]
 8007036:	2308      	movs	r3, #8
 8007038:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800703c:	2302      	movs	r3, #2
 800703e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
      };

      uint32_t block_count;
      uint16_t block_size;

      tud_msc_capacity_cb(lun, &block_count, &block_size);
 8007042:	f107 024e 	add.w	r2, r7, #78	; 0x4e
 8007046:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800704a:	7bfb      	ldrb	r3, [r7, #15]
 800704c:	4618      	mov	r0, r3
 800704e:	f7f9 ff02 	bl	8000e56 <tud_msc_capacity_cb>

      // Invalid block size/count from callback, possibly unit is not ready
      // stall this request, set sense key to NOT READY
      if (block_count == 0 || block_size == 0)
 8007052:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007054:	2b00      	cmp	r3, #0
 8007056:	d003      	beq.n	8007060 <proc_builtin_scsi+0x204>
 8007058:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800705c:	2b00      	cmp	r3, #0
 800705e:	d10e      	bne.n	800707e <proc_builtin_scsi+0x222>
      {
        resplen = -1;
 8007060:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007064:	67fb      	str	r3, [r7, #124]	; 0x7c

        // If sense key is not set by callback, default to Logical Unit Not Ready, Cause Not Reportable
        if ( _mscd_itf.sense_key == 0 ) tud_msc_set_sense(lun, SCSI_SENSE_NOT_READY, 0x04, 0x00);
 8007066:	4b76      	ldr	r3, [pc, #472]	; (8007240 <proc_builtin_scsi+0x3e4>)
 8007068:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800706c:	2b00      	cmp	r3, #0
 800706e:	d119      	bne.n	80070a4 <proc_builtin_scsi+0x248>
 8007070:	7bf8      	ldrb	r0, [r7, #15]
 8007072:	2300      	movs	r3, #0
 8007074:	2204      	movs	r2, #4
 8007076:	2102      	movs	r1, #2
 8007078:	f7ff fe00 	bl	8006c7c <tud_msc_set_sense>
 800707c:	e012      	b.n	80070a4 <proc_builtin_scsi+0x248>
      }else
      {
        read_fmt_capa.block_num = tu_htonl(block_count);
 800707e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007080:	ba1b      	rev	r3, r3
 8007082:	65bb      	str	r3, [r7, #88]	; 0x58
        read_fmt_capa.block_size_u16 = tu_htons(block_size);
 8007084:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007088:	ba5b      	rev16	r3, r3
 800708a:	b29b      	uxth	r3, r3
 800708c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

        resplen = sizeof(read_fmt_capa);
 8007090:	230c      	movs	r3, #12
 8007092:	67fb      	str	r3, [r7, #124]	; 0x7c
        memcpy(buffer, &read_fmt_capa, resplen);
 8007094:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007096:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800709a:	4619      	mov	r1, r3
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f003 fa85 	bl	800a5ac <memcpy>
      }
    }
    break;
 80070a2:	e0c8      	b.n	8007236 <proc_builtin_scsi+0x3da>
 80070a4:	e0c7      	b.n	8007236 <proc_builtin_scsi+0x3da>

    case SCSI_CMD_INQUIRY:
    {
      scsi_inquiry_resp_t inquiry_rsp =
 80070a6:	f107 0310 	add.w	r3, r7, #16
 80070aa:	2224      	movs	r2, #36	; 0x24
 80070ac:	2100      	movs	r1, #0
 80070ae:	4618      	mov	r0, r3
 80070b0:	f003 faa0 	bl	800a5f4 <memset>
 80070b4:	7c7b      	ldrb	r3, [r7, #17]
 80070b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070ba:	747b      	strb	r3, [r7, #17]
 80070bc:	2302      	movs	r3, #2
 80070be:	74bb      	strb	r3, [r7, #18]
 80070c0:	7cfb      	ldrb	r3, [r7, #19]
 80070c2:	2202      	movs	r2, #2
 80070c4:	f362 0303 	bfi	r3, r2, #0, #4
 80070c8:	74fb      	strb	r3, [r7, #19]
          .version              = 2,
          .response_data_format = 2,
      };

      // vendor_id, product_id, product_rev is space padded string
      memset(inquiry_rsp.vendor_id  , ' ', sizeof(inquiry_rsp.vendor_id));
 80070ca:	f107 0310 	add.w	r3, r7, #16
 80070ce:	3308      	adds	r3, #8
 80070d0:	2208      	movs	r2, #8
 80070d2:	2120      	movs	r1, #32
 80070d4:	4618      	mov	r0, r3
 80070d6:	f003 fa8d 	bl	800a5f4 <memset>
      memset(inquiry_rsp.product_id , ' ', sizeof(inquiry_rsp.product_id));
 80070da:	f107 0310 	add.w	r3, r7, #16
 80070de:	3310      	adds	r3, #16
 80070e0:	2210      	movs	r2, #16
 80070e2:	2120      	movs	r1, #32
 80070e4:	4618      	mov	r0, r3
 80070e6:	f003 fa85 	bl	800a5f4 <memset>
      memset(inquiry_rsp.product_rev, ' ', sizeof(inquiry_rsp.product_rev));
 80070ea:	f107 0310 	add.w	r3, r7, #16
 80070ee:	3320      	adds	r3, #32
 80070f0:	2204      	movs	r2, #4
 80070f2:	2120      	movs	r1, #32
 80070f4:	4618      	mov	r0, r3
 80070f6:	f003 fa7d 	bl	800a5f4 <memset>

      tud_msc_inquiry_cb(lun, inquiry_rsp.vendor_id, inquiry_rsp.product_id, inquiry_rsp.product_rev);
 80070fa:	f107 0310 	add.w	r3, r7, #16
 80070fe:	f103 0420 	add.w	r4, r3, #32
 8007102:	f107 0310 	add.w	r3, r7, #16
 8007106:	f103 0210 	add.w	r2, r3, #16
 800710a:	f107 0310 	add.w	r3, r7, #16
 800710e:	f103 0108 	add.w	r1, r3, #8
 8007112:	7bf8      	ldrb	r0, [r7, #15]
 8007114:	4623      	mov	r3, r4
 8007116:	f7f9 fe4d 	bl	8000db4 <tud_msc_inquiry_cb>

      resplen = sizeof(inquiry_rsp);
 800711a:	2324      	movs	r3, #36	; 0x24
 800711c:	67fb      	str	r3, [r7, #124]	; 0x7c
      memcpy(buffer, &inquiry_rsp, resplen);
 800711e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007120:	f107 0310 	add.w	r3, r7, #16
 8007124:	4619      	mov	r1, r3
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f003 fa40 	bl	800a5ac <memcpy>
    }
    break;
 800712c:	e083      	b.n	8007236 <proc_builtin_scsi+0x3da>

    case SCSI_CMD_MODE_SENSE_6:
    {
      scsi_mode_sense6_resp_t mode_resp =
 800712e:	2303      	movs	r3, #3
 8007130:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
 8007134:	2300      	movs	r3, #0
 8007136:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 800713a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800713e:	f36f 0306 	bfc	r3, #0, #7
 8007142:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8007146:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800714a:	f36f 13c7 	bfc	r3, #7, #1
 800714e:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8007152:	2300      	movs	r3, #0
 8007154:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
          .write_protected = false,
          .reserved = 0,
          .block_descriptor_len = 0  // no block descriptor are included
      };

      bool writable = true;
 8007158:	2301      	movs	r3, #1
 800715a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
      if (tud_msc_is_writable_cb) {
 800715e:	4b3a      	ldr	r3, [pc, #232]	; (8007248 <proc_builtin_scsi+0x3ec>)
 8007160:	2b00      	cmp	r3, #0
 8007162:	d006      	beq.n	8007172 <proc_builtin_scsi+0x316>
          writable = tud_msc_is_writable_cb(lun);
 8007164:	7bfb      	ldrb	r3, [r7, #15]
 8007166:	4618      	mov	r0, r3
 8007168:	f3af 8000 	nop.w
 800716c:	4603      	mov	r3, r0
 800716e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
      }
      mode_resp.write_protected = !writable;
 8007172:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8007176:	2b00      	cmp	r3, #0
 8007178:	bf14      	ite	ne
 800717a:	2301      	movne	r3, #1
 800717c:	2300      	moveq	r3, #0
 800717e:	b2db      	uxtb	r3, r3
 8007180:	f083 0301 	eor.w	r3, r3, #1
 8007184:	b2db      	uxtb	r3, r3
 8007186:	f003 0301 	and.w	r3, r3, #1
 800718a:	b2da      	uxtb	r2, r3
 800718c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8007190:	f362 13c7 	bfi	r3, r2, #7, #1
 8007194:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

      resplen = sizeof(mode_resp);
 8007198:	2304      	movs	r3, #4
 800719a:	67fb      	str	r3, [r7, #124]	; 0x7c
      memcpy(buffer, &mode_resp, resplen);
 800719c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800719e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80071a2:	4619      	mov	r1, r3
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f003 fa01 	bl	800a5ac <memcpy>
    }
    break;
 80071aa:	e044      	b.n	8007236 <proc_builtin_scsi+0x3da>

    case SCSI_CMD_REQUEST_SENSE:
    {
      scsi_sense_fixed_resp_t sense_rsp =
 80071ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80071b0:	2200      	movs	r2, #0
 80071b2:	601a      	str	r2, [r3, #0]
 80071b4:	605a      	str	r2, [r3, #4]
 80071b6:	609a      	str	r2, [r3, #8]
 80071b8:	60da      	str	r2, [r3, #12]
 80071ba:	821a      	strh	r2, [r3, #16]
 80071bc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80071c0:	2270      	movs	r2, #112	; 0x70
 80071c2:	f362 0306 	bfi	r3, r2, #0, #7
 80071c6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80071ca:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80071ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071d2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
      {
          .response_code = 0x70,
          .valid         = 1
      };

      sense_rsp.add_sense_len = sizeof(scsi_sense_fixed_resp_t) - 8;
 80071d6:	230a      	movs	r3, #10
 80071d8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

      sense_rsp.sense_key           = _mscd_itf.sense_key;
 80071dc:	4b18      	ldr	r3, [pc, #96]	; (8007240 <proc_builtin_scsi+0x3e4>)
 80071de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071e2:	f003 030f 	and.w	r3, r3, #15
 80071e6:	b2da      	uxtb	r2, r3
 80071e8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80071ec:	f362 0303 	bfi	r3, r2, #0, #4
 80071f0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
      sense_rsp.add_sense_code      = _mscd_itf.add_sense_code;
 80071f4:	4b12      	ldr	r3, [pc, #72]	; (8007240 <proc_builtin_scsi+0x3e4>)
 80071f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071fa:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
      sense_rsp.add_sense_qualifier = _mscd_itf.add_sense_qualifier;
 80071fe:	4b10      	ldr	r3, [pc, #64]	; (8007240 <proc_builtin_scsi+0x3e4>)
 8007200:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007204:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

      resplen = sizeof(sense_rsp);
 8007208:	2312      	movs	r3, #18
 800720a:	67fb      	str	r3, [r7, #124]	; 0x7c
      memcpy(buffer, &sense_rsp, resplen);
 800720c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800720e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007212:	4619      	mov	r1, r3
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f003 f9c9 	bl	800a5ac <memcpy>

      // Clear sense data after copy
      tud_msc_set_sense(lun, 0, 0, 0);
 800721a:	7bf8      	ldrb	r0, [r7, #15]
 800721c:	2300      	movs	r3, #0
 800721e:	2200      	movs	r2, #0
 8007220:	2100      	movs	r1, #0
 8007222:	f7ff fd2b 	bl	8006c7c <tud_msc_set_sense>
    }
    break;
 8007226:	e006      	b.n	8007236 <proc_builtin_scsi+0x3da>

    default: resplen = -1; break;
 8007228:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800722c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800722e:	e002      	b.n	8007236 <proc_builtin_scsi+0x3da>
    break;
 8007230:	bf00      	nop
 8007232:	e000      	b.n	8007236 <proc_builtin_scsi+0x3da>
    break;
 8007234:	bf00      	nop
  }

  return resplen;
 8007236:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
}
 8007238:	4618      	mov	r0, r3
 800723a:	3784      	adds	r7, #132	; 0x84
 800723c:	46bd      	mov	sp, r7
 800723e:	bd90      	pop	{r4, r7, pc}
 8007240:	20002330 	.word	0x20002330
 8007244:	08000e7d 	.word	0x08000e7d
 8007248:	00000000 	.word	0x00000000

0800724c <mscd_xfer_cb>:

bool mscd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t event, uint32_t xferred_bytes)
{
 800724c:	b590      	push	{r4, r7, lr}
 800724e:	b095      	sub	sp, #84	; 0x54
 8007250:	af02      	add	r7, sp, #8
 8007252:	603b      	str	r3, [r7, #0]
 8007254:	4603      	mov	r3, r0
 8007256:	71fb      	strb	r3, [r7, #7]
 8007258:	460b      	mov	r3, r1
 800725a:	71bb      	strb	r3, [r7, #6]
 800725c:	4613      	mov	r3, r2
 800725e:	717b      	strb	r3, [r7, #5]
  mscd_interface_t* p_msc = &_mscd_itf;
 8007260:	4ba8      	ldr	r3, [pc, #672]	; (8007504 <mscd_xfer_cb+0x2b8>)
 8007262:	643b      	str	r3, [r7, #64]	; 0x40
  msc_cbw_t const * p_cbw = &p_msc->cbw;
 8007264:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007266:	63fb      	str	r3, [r7, #60]	; 0x3c
  msc_csw_t       * p_csw = &p_msc->csw;
 8007268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800726a:	3320      	adds	r3, #32
 800726c:	63bb      	str	r3, [r7, #56]	; 0x38

  switch (p_msc->stage)
 800726e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007270:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007274:	2b03      	cmp	r3, #3
 8007276:	f200 8209 	bhi.w	800768c <mscd_xfer_cb+0x440>
 800727a:	a201      	add	r2, pc, #4	; (adr r2, 8007280 <mscd_xfer_cb+0x34>)
 800727c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007280:	08007291 	.word	0x08007291
 8007284:	080074a5 	.word	0x080074a5
 8007288:	0800768d 	.word	0x0800768d
 800728c:	08007641 	.word	0x08007641
  {
    case MSC_STAGE_CMD:
      //------------- new CBW received -------------//
      // Complete IN while waiting for CMD is usually Status of previous SCSI op, ignore it
      if(ep_addr != p_msc->ep_out) return true;
 8007290:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007292:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007296:	79ba      	ldrb	r2, [r7, #6]
 8007298:	429a      	cmp	r2, r3
 800729a:	d001      	beq.n	80072a0 <mscd_xfer_cb+0x54>
 800729c:	2301      	movs	r3, #1
 800729e:	e26c      	b.n	800777a <mscd_xfer_cb+0x52e>

      TU_ASSERT( event == XFER_RESULT_SUCCESS &&
 80072a0:	797b      	ldrb	r3, [r7, #5]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d107      	bne.n	80072b6 <mscd_xfer_cb+0x6a>
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	2b1f      	cmp	r3, #31
 80072aa:	d104      	bne.n	80072b6 <mscd_xfer_cb+0x6a>
 80072ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a95      	ldr	r2, [pc, #596]	; (8007508 <mscd_xfer_cb+0x2bc>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d00a      	beq.n	80072cc <mscd_xfer_cb+0x80>
 80072b6:	4b95      	ldr	r3, [pc, #596]	; (800750c <mscd_xfer_cb+0x2c0>)
 80072b8:	613b      	str	r3, [r7, #16]
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f003 0301 	and.w	r3, r3, #1
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d000      	beq.n	80072c8 <mscd_xfer_cb+0x7c>
 80072c6:	be00      	bkpt	0x0000
 80072c8:	2300      	movs	r3, #0
 80072ca:	e256      	b.n	800777a <mscd_xfer_cb+0x52e>
                 xferred_bytes == sizeof(msc_cbw_t) && p_cbw->signature == MSC_CBW_SIGNATURE );

      TU_LOG2("  SCSI Command: %s\n", lookup_find(&_msc_scsi_cmd_table, p_cbw->command[0]));
      // TU_LOG2_MEM(p_cbw, xferred_bytes, 2);

      p_csw->signature    = MSC_CSW_SIGNATURE;
 80072cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ce:	2200      	movs	r2, #0
 80072d0:	f042 0255 	orr.w	r2, r2, #85	; 0x55
 80072d4:	701a      	strb	r2, [r3, #0]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 80072dc:	705a      	strb	r2, [r3, #1]
 80072de:	2200      	movs	r2, #0
 80072e0:	f042 0242 	orr.w	r2, r2, #66	; 0x42
 80072e4:	709a      	strb	r2, [r3, #2]
 80072e6:	2200      	movs	r2, #0
 80072e8:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 80072ec:	70da      	strb	r2, [r3, #3]
      p_csw->tag          = p_cbw->tag;
 80072ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072f0:	685a      	ldr	r2, [r3, #4]
 80072f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f4:	605a      	str	r2, [r3, #4]
      p_csw->data_residue = 0;
 80072f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f8:	2200      	movs	r2, #0
 80072fa:	721a      	strb	r2, [r3, #8]
 80072fc:	2200      	movs	r2, #0
 80072fe:	725a      	strb	r2, [r3, #9]
 8007300:	2200      	movs	r2, #0
 8007302:	729a      	strb	r2, [r3, #10]
 8007304:	2200      	movs	r2, #0
 8007306:	72da      	strb	r2, [r3, #11]

      /*------------- Parse command and prepare DATA -------------*/
      p_msc->stage = MSC_STAGE_DATA;
 8007308:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800730a:	2201      	movs	r2, #1
 800730c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      p_msc->total_len = p_cbw->total_bytes;
 8007310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007312:	689a      	ldr	r2, [r3, #8]
 8007314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007316:	635a      	str	r2, [r3, #52]	; 0x34
      p_msc->xferred_len = 0;
 8007318:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800731a:	2200      	movs	r2, #0
 800731c:	639a      	str	r2, [r3, #56]	; 0x38

      if (SCSI_CMD_READ_10 == p_cbw->command[0])
 800731e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007320:	7bdb      	ldrb	r3, [r3, #15]
 8007322:	2b28      	cmp	r3, #40	; 0x28
 8007324:	d105      	bne.n	8007332 <mscd_xfer_cb+0xe6>
      {
        proc_read10_cmd(rhport, p_msc);
 8007326:	79fb      	ldrb	r3, [r7, #7]
 8007328:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800732a:	4618      	mov	r0, r3
 800732c:	f000 fa34 	bl	8007798 <proc_read10_cmd>
              p_msc->stage = MSC_STAGE_STATUS;
            }
          }
        }
      }
    break;
 8007330:	e1ae      	b.n	8007690 <mscd_xfer_cb+0x444>
      else if (SCSI_CMD_WRITE_10 == p_cbw->command[0])
 8007332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007334:	7bdb      	ldrb	r3, [r3, #15]
 8007336:	2b2a      	cmp	r3, #42	; 0x2a
 8007338:	d105      	bne.n	8007346 <mscd_xfer_cb+0xfa>
        proc_write10_cmd(rhport, p_msc);
 800733a:	79fb      	ldrb	r3, [r7, #7]
 800733c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800733e:	4618      	mov	r0, r3
 8007340:	f000 fad8 	bl	80078f4 <proc_write10_cmd>
    break;
 8007344:	e1a4      	b.n	8007690 <mscd_xfer_cb+0x444>
        if ( (p_cbw->total_bytes > 0 ) && !tu_bit_test(p_cbw->dir, 7) )
 8007346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007348:	689b      	ldr	r3, [r3, #8]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d027      	beq.n	800739e <mscd_xfer_cb+0x152>
 800734e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007350:	7b1b      	ldrb	r3, [r3, #12]
 8007352:	2107      	movs	r1, #7
 8007354:	4618      	mov	r0, r3
 8007356:	f7ff fc58 	bl	8006c0a <tu_bit_test>
 800735a:	4603      	mov	r3, r0
 800735c:	f083 0301 	eor.w	r3, r3, #1
 8007360:	b2db      	uxtb	r3, r3
 8007362:	2b00      	cmp	r3, #0
 8007364:	d01b      	beq.n	800739e <mscd_xfer_cb+0x152>
          TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_out, _mscd_buf, p_msc->total_len) );
 8007366:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007368:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 800736c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800736e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007370:	b29b      	uxth	r3, r3
 8007372:	79f8      	ldrb	r0, [r7, #7]
 8007374:	4a66      	ldr	r2, [pc, #408]	; (8007510 <mscd_xfer_cb+0x2c4>)
 8007376:	f001 fd0d 	bl	8008d94 <usbd_edpt_xfer>
 800737a:	4603      	mov	r3, r0
 800737c:	f083 0301 	eor.w	r3, r3, #1
 8007380:	b2db      	uxtb	r3, r3
 8007382:	2b00      	cmp	r3, #0
 8007384:	f000 808d 	beq.w	80074a2 <mscd_xfer_cb+0x256>
 8007388:	4b60      	ldr	r3, [pc, #384]	; (800750c <mscd_xfer_cb+0x2c0>)
 800738a:	61fb      	str	r3, [r7, #28]
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f003 0301 	and.w	r3, r3, #1
 8007394:	2b00      	cmp	r3, #0
 8007396:	d000      	beq.n	800739a <mscd_xfer_cb+0x14e>
 8007398:	be00      	bkpt	0x0000
 800739a:	2300      	movs	r3, #0
 800739c:	e1ed      	b.n	800777a <mscd_xfer_cb+0x52e>
          resplen = proc_builtin_scsi(p_cbw->lun, p_cbw->command, _mscd_buf, sizeof(_mscd_buf));
 800739e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073a0:	7b58      	ldrb	r0, [r3, #13]
 80073a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073a4:	f103 010f 	add.w	r1, r3, #15
 80073a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073ac:	4a58      	ldr	r2, [pc, #352]	; (8007510 <mscd_xfer_cb+0x2c4>)
 80073ae:	f7ff fd55 	bl	8006e5c <proc_builtin_scsi>
 80073b2:	6478      	str	r0, [r7, #68]	; 0x44
          if ( (resplen < 0) && (p_msc->sense_key == 0) )
 80073b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	da10      	bge.n	80073dc <mscd_xfer_cb+0x190>
 80073ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d10b      	bne.n	80073dc <mscd_xfer_cb+0x190>
            resplen = tud_msc_scsi_cb(p_cbw->lun, p_cbw->command, _mscd_buf, p_msc->total_len);
 80073c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073c6:	7b58      	ldrb	r0, [r3, #13]
 80073c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073ca:	f103 010f 	add.w	r1, r3, #15
 80073ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	4a4e      	ldr	r2, [pc, #312]	; (8007510 <mscd_xfer_cb+0x2c4>)
 80073d6:	f7f9 fd9f 	bl	8000f18 <tud_msc_scsi_cb>
 80073da:	6478      	str	r0, [r7, #68]	; 0x44
          if ( resplen < 0 )
 80073dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073de:	2b00      	cmp	r3, #0
 80073e0:	da23      	bge.n	800742a <mscd_xfer_cb+0x1de>
            p_msc->total_len = 0;
 80073e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073e4:	2200      	movs	r2, #0
 80073e6:	635a      	str	r2, [r3, #52]	; 0x34
            p_csw->status = MSC_CSW_STATUS_FAILED;
 80073e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ea:	2201      	movs	r2, #1
 80073ec:	731a      	strb	r2, [r3, #12]
            p_msc->stage = MSC_STAGE_STATUS;
 80073ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073f0:	2202      	movs	r2, #2
 80073f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
            if ( p_msc->sense_key == 0 ) tud_msc_set_sense(p_cbw->lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00);
 80073f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d106      	bne.n	800740e <mscd_xfer_cb+0x1c2>
 8007400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007402:	7b58      	ldrb	r0, [r3, #13]
 8007404:	2300      	movs	r3, #0
 8007406:	2220      	movs	r2, #32
 8007408:	2105      	movs	r1, #5
 800740a:	f7ff fc37 	bl	8006c7c <tud_msc_set_sense>
            if (p_cbw->total_bytes) usbd_edpt_stall(rhport, p_msc->ep_in);
 800740e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	2b00      	cmp	r3, #0
 8007414:	f000 813c 	beq.w	8007690 <mscd_xfer_cb+0x444>
 8007418:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800741a:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800741e:	79fb      	ldrb	r3, [r7, #7]
 8007420:	4611      	mov	r1, r2
 8007422:	4618      	mov	r0, r3
 8007424:	f001 fd14 	bl	8008e50 <usbd_edpt_stall>
    break;
 8007428:	e132      	b.n	8007690 <mscd_xfer_cb+0x444>
            p_msc->total_len = (uint32_t) resplen;
 800742a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800742c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800742e:	635a      	str	r2, [r3, #52]	; 0x34
            p_csw->status = MSC_CSW_STATUS_PASSED;
 8007430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007432:	2200      	movs	r2, #0
 8007434:	731a      	strb	r2, [r3, #12]
            if (p_msc->total_len)
 8007436:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800743a:	2b00      	cmp	r3, #0
 800743c:	d02c      	beq.n	8007498 <mscd_xfer_cb+0x24c>
              TU_ASSERT( p_cbw->total_bytes >= p_msc->total_len ); // cannot return more than host expect
 800743e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007440:	689a      	ldr	r2, [r3, #8]
 8007442:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007446:	429a      	cmp	r2, r3
 8007448:	d20a      	bcs.n	8007460 <mscd_xfer_cb+0x214>
 800744a:	4b30      	ldr	r3, [pc, #192]	; (800750c <mscd_xfer_cb+0x2c0>)
 800744c:	617b      	str	r3, [r7, #20]
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f003 0301 	and.w	r3, r3, #1
 8007456:	2b00      	cmp	r3, #0
 8007458:	d000      	beq.n	800745c <mscd_xfer_cb+0x210>
 800745a:	be00      	bkpt	0x0000
 800745c:	2300      	movs	r3, #0
 800745e:	e18c      	b.n	800777a <mscd_xfer_cb+0x52e>
              TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_in, _mscd_buf, p_msc->total_len) );
 8007460:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007462:	f893 102e 	ldrb.w	r1, [r3, #46]	; 0x2e
 8007466:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800746a:	b29b      	uxth	r3, r3
 800746c:	79f8      	ldrb	r0, [r7, #7]
 800746e:	4a28      	ldr	r2, [pc, #160]	; (8007510 <mscd_xfer_cb+0x2c4>)
 8007470:	f001 fc90 	bl	8008d94 <usbd_edpt_xfer>
 8007474:	4603      	mov	r3, r0
 8007476:	f083 0301 	eor.w	r3, r3, #1
 800747a:	b2db      	uxtb	r3, r3
 800747c:	2b00      	cmp	r3, #0
 800747e:	f000 8107 	beq.w	8007690 <mscd_xfer_cb+0x444>
 8007482:	4b22      	ldr	r3, [pc, #136]	; (800750c <mscd_xfer_cb+0x2c0>)
 8007484:	61bb      	str	r3, [r7, #24]
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f003 0301 	and.w	r3, r3, #1
 800748e:	2b00      	cmp	r3, #0
 8007490:	d000      	beq.n	8007494 <mscd_xfer_cb+0x248>
 8007492:	be00      	bkpt	0x0000
 8007494:	2300      	movs	r3, #0
 8007496:	e170      	b.n	800777a <mscd_xfer_cb+0x52e>
              p_msc->stage = MSC_STAGE_STATUS;
 8007498:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800749a:	2202      	movs	r2, #2
 800749c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    break;
 80074a0:	e0f6      	b.n	8007690 <mscd_xfer_cb+0x444>
 80074a2:	e0f5      	b.n	8007690 <mscd_xfer_cb+0x444>
    case MSC_STAGE_DATA:
      TU_LOG2("  SCSI Data\n");
      //TU_LOG2_MEM(_mscd_buf, xferred_bytes, 2);

      // OUT transfer, invoke callback if needed
      if ( !tu_bit_test(p_cbw->dir, 7) )
 80074a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074a6:	7b1b      	ldrb	r3, [r3, #12]
 80074a8:	2107      	movs	r1, #7
 80074aa:	4618      	mov	r0, r3
 80074ac:	f7ff fbad 	bl	8006c0a <tu_bit_test>
 80074b0:	4603      	mov	r3, r0
 80074b2:	f083 0301 	eor.w	r3, r3, #1
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	f000 8092 	beq.w	80075e2 <mscd_xfer_cb+0x396>
      {
        if ( SCSI_CMD_WRITE_10 != p_cbw->command[0] )
 80074be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074c0:	7bdb      	ldrb	r3, [r3, #15]
 80074c2:	2b2a      	cmp	r3, #42	; 0x2a
 80074c4:	d026      	beq.n	8007514 <mscd_xfer_cb+0x2c8>
        {
          int32_t cb_result = tud_msc_scsi_cb(p_cbw->lun, p_cbw->command, _mscd_buf, p_msc->total_len);
 80074c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074c8:	7b58      	ldrb	r0, [r3, #13]
 80074ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074cc:	f103 010f 	add.w	r1, r3, #15
 80074d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	4a0e      	ldr	r2, [pc, #56]	; (8007510 <mscd_xfer_cb+0x2c4>)
 80074d8:	f7f9 fd1e 	bl	8000f18 <tud_msc_scsi_cb>
 80074dc:	6278      	str	r0, [r7, #36]	; 0x24

          if ( cb_result < 0 )
 80074de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	da0a      	bge.n	80074fa <mscd_xfer_cb+0x2ae>
          {
            p_csw->status = MSC_CSW_STATUS_FAILED;
 80074e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e6:	2201      	movs	r2, #1
 80074e8:	731a      	strb	r2, [r3, #12]
            tud_msc_set_sense(p_cbw->lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00); // Sense = Invalid Command Operation
 80074ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074ec:	7b58      	ldrb	r0, [r3, #13]
 80074ee:	2300      	movs	r3, #0
 80074f0:	2220      	movs	r2, #32
 80074f2:	2105      	movs	r1, #5
 80074f4:	f7ff fbc2 	bl	8006c7c <tud_msc_set_sense>
 80074f8:	e073      	b.n	80075e2 <mscd_xfer_cb+0x396>
          }else
          {
            p_csw->status = MSC_CSW_STATUS_PASSED;
 80074fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074fc:	2200      	movs	r2, #0
 80074fe:	731a      	strb	r2, [r3, #12]
 8007500:	e06f      	b.n	80075e2 <mscd_xfer_cb+0x396>
 8007502:	bf00      	nop
 8007504:	20002330 	.word	0x20002330
 8007508:	43425355 	.word	0x43425355
 800750c:	e000edf0 	.word	0xe000edf0
 8007510:	20002370 	.word	0x20002370
          }
        }
        else
        {
          uint16_t const block_sz = p_cbw->total_bytes / rdwr10_get_blockcount(p_cbw->command);
 8007514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007516:	689c      	ldr	r4, [r3, #8]
 8007518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800751a:	330f      	adds	r3, #15
 800751c:	4618      	mov	r0, r3
 800751e:	f7ff fb9a 	bl	8006c56 <rdwr10_get_blockcount>
 8007522:	4603      	mov	r3, r0
 8007524:	fbb4 f3f3 	udiv	r3, r4, r3
 8007528:	867b      	strh	r3, [r7, #50]	; 0x32

          // Adjust lba with transferred bytes
          uint32_t const lba = rdwr10_get_lba(p_cbw->command) + (p_msc->xferred_len / block_sz);
 800752a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800752c:	330f      	adds	r3, #15
 800752e:	4618      	mov	r0, r3
 8007530:	f7ff fb80 	bl	8006c34 <rdwr10_get_lba>
 8007534:	4601      	mov	r1, r0
 8007536:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007538:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800753a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800753c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007540:	440b      	add	r3, r1
 8007542:	62fb      	str	r3, [r7, #44]	; 0x2c

          // Application can consume smaller bytes
          int32_t nbytes = tud_msc_write10_cb(p_cbw->lun, lba, p_msc->xferred_len % block_sz, _mscd_buf, xferred_bytes);
 8007544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007546:	7b58      	ldrb	r0, [r3, #13]
 8007548:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800754a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800754c:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800754e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007552:	fb02 f201 	mul.w	r2, r2, r1
 8007556:	1a9a      	subs	r2, r3, r2
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	9300      	str	r3, [sp, #0]
 800755c:	4b89      	ldr	r3, [pc, #548]	; (8007784 <mscd_xfer_cb+0x538>)
 800755e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007560:	f7f9 fcbe 	bl	8000ee0 <tud_msc_write10_cb>
 8007564:	62b8      	str	r0, [r7, #40]	; 0x28

          if ( nbytes < 0 )
 8007566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007568:	2b00      	cmp	r3, #0
 800756a:	da15      	bge.n	8007598 <mscd_xfer_cb+0x34c>
          {
            // negative means error -> skip to status phase, status in CSW set to failed
            p_csw->data_residue = p_cbw->total_bytes - p_msc->xferred_len;
 800756c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800756e:	689a      	ldr	r2, [r3, #8]
 8007570:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007574:	1ad2      	subs	r2, r2, r3
 8007576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007578:	609a      	str	r2, [r3, #8]
            p_csw->status       = MSC_CSW_STATUS_FAILED;
 800757a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800757c:	2201      	movs	r2, #1
 800757e:	731a      	strb	r2, [r3, #12]
            p_msc->stage        = MSC_STAGE_STATUS;
 8007580:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007582:	2202      	movs	r2, #2
 8007584:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

            tud_msc_set_sense(p_cbw->lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00); // Sense = Invalid Command Operation
 8007588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800758a:	7b58      	ldrb	r0, [r3, #13]
 800758c:	2300      	movs	r3, #0
 800758e:	2220      	movs	r2, #32
 8007590:	2105      	movs	r1, #5
 8007592:	f7ff fb73 	bl	8006c7c <tud_msc_set_sense>
            break;
 8007596:	e080      	b.n	800769a <mscd_xfer_cb+0x44e>
          }else
          {
            // Application consume less than what we got (including zero)
            if ( nbytes < (int32_t) xferred_bytes )
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800759c:	429a      	cmp	r2, r3
 800759e:	da20      	bge.n	80075e2 <mscd_xfer_cb+0x396>
            {
              if ( nbytes > 0 )
 80075a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	dd0f      	ble.n	80075c6 <mscd_xfer_cb+0x37a>
              {
                p_msc->xferred_len += nbytes;
 80075a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ac:	441a      	add	r2, r3
 80075ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075b0:	639a      	str	r2, [r3, #56]	; 0x38
                memmove(_mscd_buf, _mscd_buf+nbytes, xferred_bytes-nbytes);
 80075b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b4:	4a73      	ldr	r2, [pc, #460]	; (8007784 <mscd_xfer_cb+0x538>)
 80075b6:	1899      	adds	r1, r3, r2
 80075b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ba:	683a      	ldr	r2, [r7, #0]
 80075bc:	1ad3      	subs	r3, r2, r3
 80075be:	461a      	mov	r2, r3
 80075c0:	4870      	ldr	r0, [pc, #448]	; (8007784 <mscd_xfer_cb+0x538>)
 80075c2:	f002 fffe 	bl	800a5c2 <memmove>
              }

              // simulate an transfer complete with adjusted parameters --> this driver callback will fired again
              dcd_event_xfer_complete(rhport, p_msc->ep_out, xferred_bytes-nbytes, XFER_RESULT_SUCCESS, false);
 80075c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075c8:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 80075cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ce:	683a      	ldr	r2, [r7, #0]
 80075d0:	1ad2      	subs	r2, r2, r3
 80075d2:	79f8      	ldrb	r0, [r7, #7]
 80075d4:	2300      	movs	r3, #0
 80075d6:	9300      	str	r3, [sp, #0]
 80075d8:	2300      	movs	r3, #0
 80075da:	f001 fb52 	bl	8008c82 <dcd_event_xfer_complete>

              return true; // skip the rest
 80075de:	2301      	movs	r3, #1
 80075e0:	e0cb      	b.n	800777a <mscd_xfer_cb+0x52e>
          }
        }
      }

      // Accumulate data so far
      p_msc->xferred_len += xferred_bytes;
 80075e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	441a      	add	r2, r3
 80075ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075ec:	639a      	str	r2, [r3, #56]	; 0x38

      if ( p_msc->xferred_len >= p_msc->total_len )
 80075ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d304      	bcc.n	8007604 <mscd_xfer_cb+0x3b8>
      {
        // Data Stage is complete
        p_msc->stage = MSC_STAGE_STATUS;
 80075fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075fc:	2202      	movs	r2, #2
 80075fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        {
          // No other command take more than one transfer yet -> unlikely error
          TU_BREAKPOINT();
        }
      }
    break;
 8007602:	e047      	b.n	8007694 <mscd_xfer_cb+0x448>
        if (SCSI_CMD_READ_10 == p_cbw->command[0])
 8007604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007606:	7bdb      	ldrb	r3, [r3, #15]
 8007608:	2b28      	cmp	r3, #40	; 0x28
 800760a:	d105      	bne.n	8007618 <mscd_xfer_cb+0x3cc>
          proc_read10_cmd(rhport, p_msc);
 800760c:	79fb      	ldrb	r3, [r7, #7]
 800760e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007610:	4618      	mov	r0, r3
 8007612:	f000 f8c1 	bl	8007798 <proc_read10_cmd>
    break;
 8007616:	e03d      	b.n	8007694 <mscd_xfer_cb+0x448>
        else if (SCSI_CMD_WRITE_10 == p_cbw->command[0])
 8007618:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800761a:	7bdb      	ldrb	r3, [r3, #15]
 800761c:	2b2a      	cmp	r3, #42	; 0x2a
 800761e:	d105      	bne.n	800762c <mscd_xfer_cb+0x3e0>
          proc_write10_cmd(rhport, p_msc);
 8007620:	79fb      	ldrb	r3, [r7, #7]
 8007622:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007624:	4618      	mov	r0, r3
 8007626:	f000 f965 	bl	80078f4 <proc_write10_cmd>
    break;
 800762a:	e033      	b.n	8007694 <mscd_xfer_cb+0x448>
          TU_BREAKPOINT();
 800762c:	4b56      	ldr	r3, [pc, #344]	; (8007788 <mscd_xfer_cb+0x53c>)
 800762e:	623b      	str	r3, [r7, #32]
 8007630:	6a3b      	ldr	r3, [r7, #32]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f003 0301 	and.w	r3, r3, #1
 8007638:	2b00      	cmp	r3, #0
 800763a:	d02b      	beq.n	8007694 <mscd_xfer_cb+0x448>
 800763c:	be00      	bkpt	0x0000
    break;
 800763e:	e029      	b.n	8007694 <mscd_xfer_cb+0x448>
      // processed immediately after this switch, supposedly to be empty
    break;

    case MSC_STAGE_STATUS_SENT:
      // Wait for the Status phase to complete
      if( (ep_addr == p_msc->ep_in) && (xferred_bytes == sizeof(msc_csw_t)) )
 8007640:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007642:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8007646:	79ba      	ldrb	r2, [r7, #6]
 8007648:	429a      	cmp	r2, r3
 800764a:	d125      	bne.n	8007698 <mscd_xfer_cb+0x44c>
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	2b0d      	cmp	r3, #13
 8007650:	d122      	bne.n	8007698 <mscd_xfer_cb+0x44c>
      {
        TU_LOG2("  SCSI Status: %u\n", p_csw->status);
        // TU_LOG2_MEM(p_csw, xferred_bytes, 2);

        // Move to default CMD stage
        p_msc->stage = MSC_STAGE_CMD;
 8007652:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007654:	2200      	movs	r2, #0
 8007656:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

        // Queue for the next CBW
        TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_out, (uint8_t*) &p_msc->cbw, sizeof(msc_cbw_t)) );
 800765a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800765c:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 8007660:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007662:	79f8      	ldrb	r0, [r7, #7]
 8007664:	231f      	movs	r3, #31
 8007666:	f001 fb95 	bl	8008d94 <usbd_edpt_xfer>
 800766a:	4603      	mov	r3, r0
 800766c:	f083 0301 	eor.w	r3, r3, #1
 8007670:	b2db      	uxtb	r3, r3
 8007672:	2b00      	cmp	r3, #0
 8007674:	d010      	beq.n	8007698 <mscd_xfer_cb+0x44c>
 8007676:	4b44      	ldr	r3, [pc, #272]	; (8007788 <mscd_xfer_cb+0x53c>)
 8007678:	637b      	str	r3, [r7, #52]	; 0x34
 800767a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f003 0301 	and.w	r3, r3, #1
 8007682:	2b00      	cmp	r3, #0
 8007684:	d000      	beq.n	8007688 <mscd_xfer_cb+0x43c>
 8007686:	be00      	bkpt	0x0000
 8007688:	2300      	movs	r3, #0
 800768a:	e076      	b.n	800777a <mscd_xfer_cb+0x52e>
      }
    break;

    default : break;
 800768c:	bf00      	nop
 800768e:	e004      	b.n	800769a <mscd_xfer_cb+0x44e>
    break;
 8007690:	bf00      	nop
 8007692:	e002      	b.n	800769a <mscd_xfer_cb+0x44e>
    break;
 8007694:	bf00      	nop
 8007696:	e000      	b.n	800769a <mscd_xfer_cb+0x44e>
    break;
 8007698:	bf00      	nop
  }

  if ( p_msc->stage == MSC_STAGE_STATUS )
 800769a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800769c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80076a0:	2b02      	cmp	r3, #2
 80076a2:	d169      	bne.n	8007778 <mscd_xfer_cb+0x52c>
  {
    // Either endpoints is stalled, need to wait until it is cleared by host
    if ( usbd_edpt_stalled(rhport,  p_msc->ep_in) || usbd_edpt_stalled(rhport,  p_msc->ep_out) )
 80076a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076a6:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80076aa:	79fb      	ldrb	r3, [r7, #7]
 80076ac:	4611      	mov	r1, r2
 80076ae:	4618      	mov	r0, r3
 80076b0:	f001 fc3e 	bl	8008f30 <usbd_edpt_stalled>
 80076b4:	4603      	mov	r3, r0
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d10a      	bne.n	80076d0 <mscd_xfer_cb+0x484>
 80076ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076bc:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80076c0:	79fb      	ldrb	r3, [r7, #7]
 80076c2:	4611      	mov	r1, r2
 80076c4:	4618      	mov	r0, r3
 80076c6:	f001 fc33 	bl	8008f30 <usbd_edpt_stalled>
 80076ca:	4603      	mov	r3, r0
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00a      	beq.n	80076e6 <mscd_xfer_cb+0x49a>
    {
      // simulate an transfer complete with adjusted parameters --> this driver callback will fired again
      // and response with status phase after halted endpoints are cleared.
      // note: use ep_out to prevent confusing with STATUS complete
      dcd_event_xfer_complete(rhport, p_msc->ep_out, 0, XFER_RESULT_SUCCESS, false);
 80076d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076d2:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 80076d6:	79f8      	ldrb	r0, [r7, #7]
 80076d8:	2300      	movs	r3, #0
 80076da:	9300      	str	r3, [sp, #0]
 80076dc:	2300      	movs	r3, #0
 80076de:	2200      	movs	r2, #0
 80076e0:	f001 facf 	bl	8008c82 <dcd_event_xfer_complete>
 80076e4:	e048      	b.n	8007778 <mscd_xfer_cb+0x52c>
    }
    else
    {
      // Invoke complete callback if defined
      switch(p_cbw->command[0])
 80076e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076e8:	7bdb      	ldrb	r3, [r3, #15]
 80076ea:	2b28      	cmp	r3, #40	; 0x28
 80076ec:	d002      	beq.n	80076f4 <mscd_xfer_cb+0x4a8>
 80076ee:	2b2a      	cmp	r3, #42	; 0x2a
 80076f0:	d009      	beq.n	8007706 <mscd_xfer_cb+0x4ba>
 80076f2:	e011      	b.n	8007718 <mscd_xfer_cb+0x4cc>
      {
        case SCSI_CMD_READ_10:
          if ( tud_msc_read10_complete_cb ) tud_msc_read10_complete_cb(p_cbw->lun);
 80076f4:	4b25      	ldr	r3, [pc, #148]	; (800778c <mscd_xfer_cb+0x540>)
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d01a      	beq.n	8007730 <mscd_xfer_cb+0x4e4>
 80076fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076fc:	7b5b      	ldrb	r3, [r3, #13]
 80076fe:	4618      	mov	r0, r3
 8007700:	f3af 8000 	nop.w
        break;
 8007704:	e014      	b.n	8007730 <mscd_xfer_cb+0x4e4>

        case SCSI_CMD_WRITE_10:
          if ( tud_msc_write10_complete_cb ) tud_msc_write10_complete_cb(p_cbw->lun);
 8007706:	4b22      	ldr	r3, [pc, #136]	; (8007790 <mscd_xfer_cb+0x544>)
 8007708:	2b00      	cmp	r3, #0
 800770a:	d013      	beq.n	8007734 <mscd_xfer_cb+0x4e8>
 800770c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800770e:	7b5b      	ldrb	r3, [r3, #13]
 8007710:	4618      	mov	r0, r3
 8007712:	f3af 8000 	nop.w
        break;
 8007716:	e00d      	b.n	8007734 <mscd_xfer_cb+0x4e8>

        default:
          if ( tud_msc_scsi_complete_cb ) tud_msc_scsi_complete_cb(p_cbw->lun, p_cbw->command);
 8007718:	4b1e      	ldr	r3, [pc, #120]	; (8007794 <mscd_xfer_cb+0x548>)
 800771a:	2b00      	cmp	r3, #0
 800771c:	d00c      	beq.n	8007738 <mscd_xfer_cb+0x4ec>
 800771e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007720:	7b5a      	ldrb	r2, [r3, #13]
 8007722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007724:	330f      	adds	r3, #15
 8007726:	4619      	mov	r1, r3
 8007728:	4610      	mov	r0, r2
 800772a:	f3af 8000 	nop.w
        break;
 800772e:	e003      	b.n	8007738 <mscd_xfer_cb+0x4ec>
        break;
 8007730:	bf00      	nop
 8007732:	e002      	b.n	800773a <mscd_xfer_cb+0x4ee>
        break;
 8007734:	bf00      	nop
 8007736:	e000      	b.n	800773a <mscd_xfer_cb+0x4ee>
        break;
 8007738:	bf00      	nop
      }

      // Move to Status Sent stage
      p_msc->stage = MSC_STAGE_STATUS_SENT;
 800773a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800773c:	2203      	movs	r2, #3
 800773e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

      // Send SCSI Status
      TU_ASSERT(usbd_edpt_xfer(rhport, p_msc->ep_in , (uint8_t*) &p_msc->csw, sizeof(msc_csw_t)));
 8007742:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007744:	f893 102e 	ldrb.w	r1, [r3, #46]	; 0x2e
 8007748:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800774a:	f103 0220 	add.w	r2, r3, #32
 800774e:	79f8      	ldrb	r0, [r7, #7]
 8007750:	230d      	movs	r3, #13
 8007752:	f001 fb1f 	bl	8008d94 <usbd_edpt_xfer>
 8007756:	4603      	mov	r3, r0
 8007758:	f083 0301 	eor.w	r3, r3, #1
 800775c:	b2db      	uxtb	r3, r3
 800775e:	2b00      	cmp	r3, #0
 8007760:	d00a      	beq.n	8007778 <mscd_xfer_cb+0x52c>
 8007762:	4b09      	ldr	r3, [pc, #36]	; (8007788 <mscd_xfer_cb+0x53c>)
 8007764:	60fb      	str	r3, [r7, #12]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f003 0301 	and.w	r3, r3, #1
 800776e:	2b00      	cmp	r3, #0
 8007770:	d000      	beq.n	8007774 <mscd_xfer_cb+0x528>
 8007772:	be00      	bkpt	0x0000
 8007774:	2300      	movs	r3, #0
 8007776:	e000      	b.n	800777a <mscd_xfer_cb+0x52e>
    }
  }

  return true;
 8007778:	2301      	movs	r3, #1
}
 800777a:	4618      	mov	r0, r3
 800777c:	374c      	adds	r7, #76	; 0x4c
 800777e:	46bd      	mov	sp, r7
 8007780:	bd90      	pop	{r4, r7, pc}
 8007782:	bf00      	nop
 8007784:	20002370 	.word	0x20002370
 8007788:	e000edf0 	.word	0xe000edf0
	...

08007798 <proc_read10_cmd>:

/*------------------------------------------------------------------*/
/* SCSI Command Process
 *------------------------------------------------------------------*/
static void proc_read10_cmd(uint8_t rhport, mscd_interface_t* p_msc)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b08c      	sub	sp, #48	; 0x30
 800779c:	af02      	add	r7, sp, #8
 800779e:	4603      	mov	r3, r0
 80077a0:	6039      	str	r1, [r7, #0]
 80077a2:	71fb      	strb	r3, [r7, #7]
  msc_cbw_t const * p_cbw = &p_msc->cbw;
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	627b      	str	r3, [r7, #36]	; 0x24
  msc_csw_t       * p_csw = &p_msc->csw;
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	3320      	adds	r3, #32
 80077ac:	623b      	str	r3, [r7, #32]

  uint16_t const block_cnt = rdwr10_get_blockcount(p_cbw->command);
 80077ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b0:	330f      	adds	r3, #15
 80077b2:	4618      	mov	r0, r3
 80077b4:	f7ff fa4f 	bl	8006c56 <rdwr10_get_blockcount>
 80077b8:	4603      	mov	r3, r0
 80077ba:	83fb      	strh	r3, [r7, #30]
  TU_ASSERT(block_cnt, ); // prevent div by zero
 80077bc:	8bfb      	ldrh	r3, [r7, #30]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d10a      	bne.n	80077d8 <proc_read10_cmd+0x40>
 80077c2:	4b4a      	ldr	r3, [pc, #296]	; (80078ec <proc_read10_cmd+0x154>)
 80077c4:	60bb      	str	r3, [r7, #8]
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f003 0301 	and.w	r3, r3, #1
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	f000 8084 	beq.w	80078dc <proc_read10_cmd+0x144>
 80077d4:	be00      	bkpt	0x0000
 80077d6:	e081      	b.n	80078dc <proc_read10_cmd+0x144>

  uint16_t const block_sz = p_cbw->total_bytes / block_cnt;
 80077d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077da:	689a      	ldr	r2, [r3, #8]
 80077dc:	8bfb      	ldrh	r3, [r7, #30]
 80077de:	fbb2 f3f3 	udiv	r3, r2, r3
 80077e2:	83bb      	strh	r3, [r7, #28]
  TU_ASSERT(block_sz, ); // prevent div by zero
 80077e4:	8bbb      	ldrh	r3, [r7, #28]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d109      	bne.n	80077fe <proc_read10_cmd+0x66>
 80077ea:	4b40      	ldr	r3, [pc, #256]	; (80078ec <proc_read10_cmd+0x154>)
 80077ec:	60fb      	str	r3, [r7, #12]
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f003 0301 	and.w	r3, r3, #1
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d072      	beq.n	80078e0 <proc_read10_cmd+0x148>
 80077fa:	be00      	bkpt	0x0000
 80077fc:	e070      	b.n	80078e0 <proc_read10_cmd+0x148>

  // Adjust lba with transferred bytes
  uint32_t const lba = rdwr10_get_lba(p_cbw->command) + (p_msc->xferred_len / block_sz);
 80077fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007800:	330f      	adds	r3, #15
 8007802:	4618      	mov	r0, r3
 8007804:	f7ff fa16 	bl	8006c34 <rdwr10_get_lba>
 8007808:	4601      	mov	r1, r0
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800780e:	8bbb      	ldrh	r3, [r7, #28]
 8007810:	fbb2 f3f3 	udiv	r3, r2, r3
 8007814:	440b      	add	r3, r1
 8007816:	61bb      	str	r3, [r7, #24]

  // remaining bytes capped at class buffer
  int32_t nbytes = (int32_t) tu_min32(sizeof(_mscd_buf), p_cbw->total_bytes-p_msc->xferred_len);
 8007818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781a:	689a      	ldr	r2, [r3, #8]
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007820:	1ad3      	subs	r3, r2, r3
 8007822:	4619      	mov	r1, r3
 8007824:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007828:	f7ff f9e0 	bl	8006bec <tu_min32>
 800782c:	4603      	mov	r3, r0
 800782e:	617b      	str	r3, [r7, #20]

  // Application can consume smaller bytes
  nbytes = tud_msc_read10_cb(p_cbw->lun, lba, p_msc->xferred_len % block_sz, _mscd_buf, (uint32_t) nbytes);
 8007830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007832:	7b58      	ldrb	r0, [r3, #13]
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007838:	8bba      	ldrh	r2, [r7, #28]
 800783a:	fbb3 f1f2 	udiv	r1, r3, r2
 800783e:	fb02 f201 	mul.w	r2, r2, r1
 8007842:	1a9a      	subs	r2, r3, r2
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	9300      	str	r3, [sp, #0]
 8007848:	4b29      	ldr	r3, [pc, #164]	; (80078f0 <proc_read10_cmd+0x158>)
 800784a:	69b9      	ldr	r1, [r7, #24]
 800784c:	f7f9 fb2c 	bl	8000ea8 <tud_msc_read10_cb>
 8007850:	6178      	str	r0, [r7, #20]

  if ( nbytes < 0 )
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	2b00      	cmp	r3, #0
 8007856:	da19      	bge.n	800788c <proc_read10_cmd+0xf4>
  {
    // negative means error -> pipe is stalled & status in CSW set to failed
    p_csw->data_residue = p_cbw->total_bytes - p_msc->xferred_len;
 8007858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785a:	689a      	ldr	r2, [r3, #8]
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007860:	1ad2      	subs	r2, r2, r3
 8007862:	6a3b      	ldr	r3, [r7, #32]
 8007864:	609a      	str	r2, [r3, #8]
    p_csw->status       = MSC_CSW_STATUS_FAILED;
 8007866:	6a3b      	ldr	r3, [r7, #32]
 8007868:	2201      	movs	r2, #1
 800786a:	731a      	strb	r2, [r3, #12]

    tud_msc_set_sense(p_cbw->lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00); // Sense = Invalid Command Operation
 800786c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786e:	7b58      	ldrb	r0, [r3, #13]
 8007870:	2300      	movs	r3, #0
 8007872:	2220      	movs	r2, #32
 8007874:	2105      	movs	r1, #5
 8007876:	f7ff fa01 	bl	8006c7c <tud_msc_set_sense>
    usbd_edpt_stall(rhport, p_msc->ep_in);
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8007880:	79fb      	ldrb	r3, [r7, #7]
 8007882:	4611      	mov	r1, r2
 8007884:	4618      	mov	r0, r3
 8007886:	f001 fae3 	bl	8008e50 <usbd_edpt_stall>
 800788a:	e02c      	b.n	80078e6 <proc_read10_cmd+0x14e>
  }
  else if ( nbytes == 0 )
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d10a      	bne.n	80078a8 <proc_read10_cmd+0x110>
  {
    // zero means not ready -> simulate an transfer complete so that this driver callback will fired again
    dcd_event_xfer_complete(rhport, p_msc->ep_in, 0, XFER_RESULT_SUCCESS, false);
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	f893 102e 	ldrb.w	r1, [r3, #46]	; 0x2e
 8007898:	79f8      	ldrb	r0, [r7, #7]
 800789a:	2300      	movs	r3, #0
 800789c:	9300      	str	r3, [sp, #0]
 800789e:	2300      	movs	r3, #0
 80078a0:	2200      	movs	r2, #0
 80078a2:	f001 f9ee 	bl	8008c82 <dcd_event_xfer_complete>
 80078a6:	e01e      	b.n	80078e6 <proc_read10_cmd+0x14e>
  }
  else
  {
    TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_in, _mscd_buf, nbytes), );
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	f893 102e 	ldrb.w	r1, [r3, #46]	; 0x2e
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	79f8      	ldrb	r0, [r7, #7]
 80078b4:	4a0e      	ldr	r2, [pc, #56]	; (80078f0 <proc_read10_cmd+0x158>)
 80078b6:	f001 fa6d 	bl	8008d94 <usbd_edpt_xfer>
 80078ba:	4603      	mov	r3, r0
 80078bc:	f083 0301 	eor.w	r3, r3, #1
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d00f      	beq.n	80078e6 <proc_read10_cmd+0x14e>
 80078c6:	4b09      	ldr	r3, [pc, #36]	; (80078ec <proc_read10_cmd+0x154>)
 80078c8:	613b      	str	r3, [r7, #16]
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f003 0301 	and.w	r3, r3, #1
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d006      	beq.n	80078e4 <proc_read10_cmd+0x14c>
 80078d6:	be00      	bkpt	0x0000
 80078d8:	bf00      	nop
 80078da:	e003      	b.n	80078e4 <proc_read10_cmd+0x14c>
  TU_ASSERT(block_cnt, ); // prevent div by zero
 80078dc:	bf00      	nop
 80078de:	e002      	b.n	80078e6 <proc_read10_cmd+0x14e>
  TU_ASSERT(block_sz, ); // prevent div by zero
 80078e0:	bf00      	nop
 80078e2:	e000      	b.n	80078e6 <proc_read10_cmd+0x14e>
    TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_in, _mscd_buf, nbytes), );
 80078e4:	bf00      	nop
  }
}
 80078e6:	3728      	adds	r7, #40	; 0x28
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}
 80078ec:	e000edf0 	.word	0xe000edf0
 80078f0:	20002370 	.word	0x20002370

080078f4 <proc_write10_cmd>:

static void proc_write10_cmd(uint8_t rhport, mscd_interface_t* p_msc)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b088      	sub	sp, #32
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	4603      	mov	r3, r0
 80078fc:	6039      	str	r1, [r7, #0]
 80078fe:	71fb      	strb	r3, [r7, #7]
  msc_cbw_t const * p_cbw = &p_msc->cbw;
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	61bb      	str	r3, [r7, #24]
  bool writable = true;
 8007904:	2301      	movs	r3, #1
 8007906:	77fb      	strb	r3, [r7, #31]
  if (tud_msc_is_writable_cb) {
 8007908:	4b29      	ldr	r3, [pc, #164]	; (80079b0 <proc_write10_cmd+0xbc>)
 800790a:	2b00      	cmp	r3, #0
 800790c:	d006      	beq.n	800791c <proc_write10_cmd+0x28>
    writable = tud_msc_is_writable_cb(p_cbw->lun);
 800790e:	69bb      	ldr	r3, [r7, #24]
 8007910:	7b5b      	ldrb	r3, [r3, #13]
 8007912:	4618      	mov	r0, r3
 8007914:	f3af 8000 	nop.w
 8007918:	4603      	mov	r3, r0
 800791a:	77fb      	strb	r3, [r7, #31]
  }
  if (!writable) {
 800791c:	7ffb      	ldrb	r3, [r7, #31]
 800791e:	f083 0301 	eor.w	r3, r3, #1
 8007922:	b2db      	uxtb	r3, r3
 8007924:	2b00      	cmp	r3, #0
 8007926:	d019      	beq.n	800795c <proc_write10_cmd+0x68>
    msc_csw_t* p_csw = &p_msc->csw;
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	3320      	adds	r3, #32
 800792c:	60fb      	str	r3, [r7, #12]
    p_csw->data_residue = p_cbw->total_bytes;
 800792e:	69bb      	ldr	r3, [r7, #24]
 8007930:	689a      	ldr	r2, [r3, #8]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	609a      	str	r2, [r3, #8]
    p_csw->status       = MSC_CSW_STATUS_FAILED;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2201      	movs	r2, #1
 800793a:	731a      	strb	r2, [r3, #12]

    tud_msc_set_sense(p_cbw->lun, SCSI_SENSE_DATA_PROTECT, 0x27, 0x00); // Sense = Write protected
 800793c:	69bb      	ldr	r3, [r7, #24]
 800793e:	7b58      	ldrb	r0, [r3, #13]
 8007940:	2300      	movs	r3, #0
 8007942:	2227      	movs	r2, #39	; 0x27
 8007944:	2107      	movs	r1, #7
 8007946:	f7ff f999 	bl	8006c7c <tud_msc_set_sense>
    usbd_edpt_stall(rhport, p_msc->ep_out);
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8007950:	79fb      	ldrb	r3, [r7, #7]
 8007952:	4611      	mov	r1, r2
 8007954:	4618      	mov	r0, r3
 8007956:	f001 fa7b 	bl	8008e50 <usbd_edpt_stall>
    return;
 800795a:	e025      	b.n	80079a8 <proc_write10_cmd+0xb4>
  }

  // remaining bytes capped at class buffer
  int32_t nbytes = (int32_t) tu_min32(sizeof(_mscd_buf), p_cbw->total_bytes-p_msc->xferred_len);
 800795c:	69bb      	ldr	r3, [r7, #24]
 800795e:	689a      	ldr	r2, [r3, #8]
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007964:	1ad3      	subs	r3, r2, r3
 8007966:	4619      	mov	r1, r3
 8007968:	f44f 7000 	mov.w	r0, #512	; 0x200
 800796c:	f7ff f93e 	bl	8006bec <tu_min32>
 8007970:	4603      	mov	r3, r0
 8007972:	617b      	str	r3, [r7, #20]

  // Write10 callback will be called later when usb transfer complete
  TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_out, _mscd_buf, nbytes), );
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	b29b      	uxth	r3, r3
 800797e:	79f8      	ldrb	r0, [r7, #7]
 8007980:	4a0c      	ldr	r2, [pc, #48]	; (80079b4 <proc_write10_cmd+0xc0>)
 8007982:	f001 fa07 	bl	8008d94 <usbd_edpt_xfer>
 8007986:	4603      	mov	r3, r0
 8007988:	f083 0301 	eor.w	r3, r3, #1
 800798c:	b2db      	uxtb	r3, r3
 800798e:	2b00      	cmp	r3, #0
 8007990:	d00a      	beq.n	80079a8 <proc_write10_cmd+0xb4>
 8007992:	4b09      	ldr	r3, [pc, #36]	; (80079b8 <proc_write10_cmd+0xc4>)
 8007994:	613b      	str	r3, [r7, #16]
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f003 0301 	and.w	r3, r3, #1
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d001      	beq.n	80079a6 <proc_write10_cmd+0xb2>
 80079a2:	be00      	bkpt	0x0000
 80079a4:	bf00      	nop
 80079a6:	bf00      	nop
}
 80079a8:	3720      	adds	r7, #32
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	bf00      	nop
 80079b0:	00000000 	.word	0x00000000
 80079b4:	20002370 	.word	0x20002370
 80079b8:	e000edf0 	.word	0xe000edf0

080079bc <tu_min16>:
static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80079bc:	b480      	push	{r7}
 80079be:	b083      	sub	sp, #12
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	4603      	mov	r3, r0
 80079c4:	460a      	mov	r2, r1
 80079c6:	80fb      	strh	r3, [r7, #6]
 80079c8:	4613      	mov	r3, r2
 80079ca:	80bb      	strh	r3, [r7, #4]
 80079cc:	88ba      	ldrh	r2, [r7, #4]
 80079ce:	88fb      	ldrh	r3, [r7, #6]
 80079d0:	4293      	cmp	r3, r2
 80079d2:	bf28      	it	cs
 80079d4:	4613      	movcs	r3, r2
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	4618      	mov	r0, r3
 80079da:	370c      	adds	r7, #12
 80079dc:	46bd      	mov	sp, r7
 80079de:	bc80      	pop	{r7}
 80079e0:	4770      	bx	lr

080079e2 <tu_fifo_empty>:
{
 80079e2:	b480      	push	{r7}
 80079e4:	b083      	sub	sp, #12
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
  return (f->count == 0);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	895b      	ldrh	r3, [r3, #10]
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	bf0c      	ite	eq
 80079f4:	2301      	moveq	r3, #1
 80079f6:	2300      	movne	r3, #0
 80079f8:	b2db      	uxtb	r3, r3
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	370c      	adds	r7, #12
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bc80      	pop	{r7}
 8007a02:	4770      	bx	lr

08007a04 <tu_fifo_full>:
{
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  return (f->count == f->depth);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	895b      	ldrh	r3, [r3, #10]
 8007a10:	b29a      	uxth	r2, r3
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	889b      	ldrh	r3, [r3, #4]
 8007a16:	429a      	cmp	r2, r3
 8007a18:	bf0c      	ite	eq
 8007a1a:	2301      	moveq	r3, #1
 8007a1c:	2300      	movne	r3, #0
 8007a1e:	b2db      	uxtb	r3, r3
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	370c      	adds	r7, #12
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bc80      	pop	{r7}
 8007a28:	4770      	bx	lr

08007a2a <tu_fifo_remaining>:
{
 8007a2a:	b480      	push	{r7}
 8007a2c:	b083      	sub	sp, #12
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	6078      	str	r0, [r7, #4]
  return f->depth - f->count;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	889a      	ldrh	r2, [r3, #4]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	895b      	ldrh	r3, [r3, #10]
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	1ad3      	subs	r3, r2, r3
 8007a3e:	b29b      	uxth	r3, r3
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	370c      	adds	r7, #12
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bc80      	pop	{r7}
 8007a48:	4770      	bx	lr

08007a4a <tu_fifo_config>:
#define tu_fifo_unlock(_ff)

#endif

bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
 8007a4a:	b480      	push	{r7}
 8007a4c:	b085      	sub	sp, #20
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	60f8      	str	r0, [r7, #12]
 8007a52:	60b9      	str	r1, [r7, #8]
 8007a54:	4611      	mov	r1, r2
 8007a56:	461a      	mov	r2, r3
 8007a58:	460b      	mov	r3, r1
 8007a5a:	80fb      	strh	r3, [r7, #6]
 8007a5c:	4613      	mov	r3, r2
 8007a5e:	80bb      	strh	r3, [r7, #4]
  tu_fifo_lock(f);

  f->buffer = (uint8_t*) buffer;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	68ba      	ldr	r2, [r7, #8]
 8007a64:	601a      	str	r2, [r3, #0]
  f->depth  = depth;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	88fa      	ldrh	r2, [r7, #6]
 8007a6a:	809a      	strh	r2, [r3, #4]
  f->item_size = item_size;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	88ba      	ldrh	r2, [r7, #4]
 8007a70:	80da      	strh	r2, [r3, #6]
  f->overwritable = overwritable;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	7e3a      	ldrb	r2, [r7, #24]
 8007a76:	721a      	strb	r2, [r3, #8]

  f->rd_idx = f->wr_idx = f->count = 0;
 8007a78:	2200      	movs	r2, #0
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	4611      	mov	r1, r2
 8007a7e:	8159      	strh	r1, [r3, #10]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	4611      	mov	r1, r2
 8007a84:	8199      	strh	r1, [r3, #12]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	81da      	strh	r2, [r3, #14]

  tu_fifo_unlock(f);

  return true;
 8007a8a:	2301      	movs	r3, #1
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3714      	adds	r7, #20
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bc80      	pop	{r7}
 8007a94:	4770      	bx	lr

08007a96 <_tu_ff_pull>:

// retrieve data from fifo
static void _tu_ff_pull(tu_fifo_t* f, void * buffer)
{
 8007a96:	b580      	push	{r7, lr}
 8007a98:	b082      	sub	sp, #8
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
 8007a9e:	6039      	str	r1, [r7, #0]
  memcpy(buffer,
         f->buffer + (f->rd_idx * f->item_size),
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	89d2      	ldrh	r2, [r2, #14]
 8007aa8:	b292      	uxth	r2, r2
 8007aaa:	4611      	mov	r1, r2
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	88d2      	ldrh	r2, [r2, #6]
 8007ab0:	fb02 f201 	mul.w	r2, r2, r1
 8007ab4:	1899      	adds	r1, r3, r2
         f->item_size);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	88db      	ldrh	r3, [r3, #6]
  memcpy(buffer,
 8007aba:	461a      	mov	r2, r3
 8007abc:	6838      	ldr	r0, [r7, #0]
 8007abe:	f002 fd75 	bl	800a5ac <memcpy>

  f->rd_idx = (f->rd_idx + 1) % f->depth;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	89db      	ldrh	r3, [r3, #14]
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	3301      	adds	r3, #1
 8007aca:	687a      	ldr	r2, [r7, #4]
 8007acc:	8892      	ldrh	r2, [r2, #4]
 8007ace:	fb93 f1f2 	sdiv	r1, r3, r2
 8007ad2:	fb02 f201 	mul.w	r2, r2, r1
 8007ad6:	1a9b      	subs	r3, r3, r2
 8007ad8:	b29a      	uxth	r2, r3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	81da      	strh	r2, [r3, #14]
  f->count--;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	895b      	ldrh	r3, [r3, #10]
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	3b01      	subs	r3, #1
 8007ae6:	b29a      	uxth	r2, r3
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	815a      	strh	r2, [r3, #10]
}
 8007aec:	bf00      	nop
 8007aee:	3708      	adds	r7, #8
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <_tu_ff_push>:

// send data to fifo
static void _tu_ff_push(tu_fifo_t* f, void const * data)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b082      	sub	sp, #8
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	6039      	str	r1, [r7, #0]
  memcpy( f->buffer + (f->wr_idx * f->item_size),
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	8992      	ldrh	r2, [r2, #12]
 8007b06:	b292      	uxth	r2, r2
 8007b08:	4611      	mov	r1, r2
 8007b0a:	687a      	ldr	r2, [r7, #4]
 8007b0c:	88d2      	ldrh	r2, [r2, #6]
 8007b0e:	fb02 f201 	mul.w	r2, r2, r1
 8007b12:	1898      	adds	r0, r3, r2
          data,
          f->item_size);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	88db      	ldrh	r3, [r3, #6]
  memcpy( f->buffer + (f->wr_idx * f->item_size),
 8007b18:	461a      	mov	r2, r3
 8007b1a:	6839      	ldr	r1, [r7, #0]
 8007b1c:	f002 fd46 	bl	800a5ac <memcpy>

  f->wr_idx = (f->wr_idx + 1) % f->depth;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	899b      	ldrh	r3, [r3, #12]
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	3301      	adds	r3, #1
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	8892      	ldrh	r2, [r2, #4]
 8007b2c:	fb93 f1f2 	sdiv	r1, r3, r2
 8007b30:	fb02 f201 	mul.w	r2, r2, r1
 8007b34:	1a9b      	subs	r3, r3, r2
 8007b36:	b29a      	uxth	r2, r3
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	819a      	strh	r2, [r3, #12]

  if (tu_fifo_full(f))
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f7ff ff61 	bl	8007a04 <tu_fifo_full>
 8007b42:	4603      	mov	r3, r0
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d005      	beq.n	8007b54 <_tu_ff_push+0x60>
  {
    f->rd_idx = f->wr_idx; // keep the full state (rd == wr && len = size)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	899b      	ldrh	r3, [r3, #12]
 8007b4c:	b29a      	uxth	r2, r3
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	81da      	strh	r2, [r3, #14]
  }
  else
  {
    f->count++;
  }
}
 8007b52:	e006      	b.n	8007b62 <_tu_ff_push+0x6e>
    f->count++;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	895b      	ldrh	r3, [r3, #10]
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	b29a      	uxth	r2, r3
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	815a      	strh	r2, [r3, #10]
}
 8007b62:	bf00      	nop
 8007b64:	3708      	adds	r7, #8
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}

08007b6a <tu_fifo_read>:

    @returns TRUE if the queue is not empty
*/
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
 8007b6a:	b580      	push	{r7, lr}
 8007b6c:	b082      	sub	sp, #8
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
 8007b72:	6039      	str	r1, [r7, #0]
  if( tu_fifo_empty(f) ) return false;
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f7ff ff34 	bl	80079e2 <tu_fifo_empty>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d001      	beq.n	8007b84 <tu_fifo_read+0x1a>
 8007b80:	2300      	movs	r3, #0
 8007b82:	e004      	b.n	8007b8e <tu_fifo_read+0x24>

  tu_fifo_lock(f);

  _tu_ff_pull(f, buffer);
 8007b84:	6839      	ldr	r1, [r7, #0]
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f7ff ff85 	bl	8007a96 <_tu_ff_pull>

  tu_fifo_unlock(f);

  return true;
 8007b8c:	2301      	movs	r3, #1
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3708      	adds	r7, #8
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}

08007b96 <tu_fifo_read_n>:

    @returns number of items read from the FIFO
*/
/******************************************************************************/
uint16_t tu_fifo_read_n (tu_fifo_t* f, void * buffer, uint16_t count)
{
 8007b96:	b580      	push	{r7, lr}
 8007b98:	b086      	sub	sp, #24
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	60f8      	str	r0, [r7, #12]
 8007b9e:	60b9      	str	r1, [r7, #8]
 8007ba0:	4613      	mov	r3, r2
 8007ba2:	80fb      	strh	r3, [r7, #6]
  if( tu_fifo_empty(f) ) return 0;
 8007ba4:	68f8      	ldr	r0, [r7, #12]
 8007ba6:	f7ff ff1c 	bl	80079e2 <tu_fifo_empty>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d001      	beq.n	8007bb4 <tu_fifo_read_n+0x1e>
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	e01f      	b.n	8007bf4 <tu_fifo_read_n+0x5e>

  tu_fifo_lock(f);

  /* Limit up to fifo's count */
  if ( count > f->count ) count = f->count;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	895b      	ldrh	r3, [r3, #10]
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	88fa      	ldrh	r2, [r7, #6]
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d902      	bls.n	8007bc6 <tu_fifo_read_n+0x30>
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	895b      	ldrh	r3, [r3, #10]
 8007bc4:	80fb      	strh	r3, [r7, #6]

  uint8_t* buf8 = (uint8_t*) buffer;
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	617b      	str	r3, [r7, #20]
  uint16_t len = 0;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	827b      	strh	r3, [r7, #18]

  while (len < count)
 8007bce:	e00c      	b.n	8007bea <tu_fifo_read_n+0x54>
  {
    _tu_ff_pull(f, buf8);
 8007bd0:	6979      	ldr	r1, [r7, #20]
 8007bd2:	68f8      	ldr	r0, [r7, #12]
 8007bd4:	f7ff ff5f 	bl	8007a96 <_tu_ff_pull>

    len++;
 8007bd8:	8a7b      	ldrh	r3, [r7, #18]
 8007bda:	3301      	adds	r3, #1
 8007bdc:	827b      	strh	r3, [r7, #18]
    buf8 += f->item_size;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	88db      	ldrh	r3, [r3, #6]
 8007be2:	461a      	mov	r2, r3
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	4413      	add	r3, r2
 8007be8:	617b      	str	r3, [r7, #20]
  while (len < count)
 8007bea:	8a7a      	ldrh	r2, [r7, #18]
 8007bec:	88fb      	ldrh	r3, [r7, #6]
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d3ee      	bcc.n	8007bd0 <tu_fifo_read_n+0x3a>
  }

  tu_fifo_unlock(f);

  return len;
 8007bf2:	8a7b      	ldrh	r3, [r7, #18]
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3718      	adds	r7, #24
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
*/
/******************************************************************************/
bool tu_fifo_write (tu_fifo_t* f, const void * data)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b082      	sub	sp, #8
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
  if ( tu_fifo_full(f) && !f->overwritable ) return false;
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f7ff fefc 	bl	8007a04 <tu_fifo_full>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d008      	beq.n	8007c24 <tu_fifo_write+0x28>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	7a1b      	ldrb	r3, [r3, #8]
 8007c16:	f083 0301 	eor.w	r3, r3, #1
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d001      	beq.n	8007c24 <tu_fifo_write+0x28>
 8007c20:	2300      	movs	r3, #0
 8007c22:	e004      	b.n	8007c2e <tu_fifo_write+0x32>

  tu_fifo_lock(f);

  _tu_ff_push(f, data);
 8007c24:	6839      	ldr	r1, [r7, #0]
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f7ff ff64 	bl	8007af4 <_tu_ff_push>

  tu_fifo_unlock(f);

  return true;
 8007c2c:	2301      	movs	r3, #1
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3708      	adds	r7, #8
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}

08007c36 <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
*/
/******************************************************************************/
uint16_t tu_fifo_write_n (tu_fifo_t* f, const void * data, uint16_t count)
{
 8007c36:	b580      	push	{r7, lr}
 8007c38:	b086      	sub	sp, #24
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	60f8      	str	r0, [r7, #12]
 8007c3e:	60b9      	str	r1, [r7, #8]
 8007c40:	4613      	mov	r3, r2
 8007c42:	80fb      	strh	r3, [r7, #6]
  if ( count == 0 ) return 0;
 8007c44:	88fb      	ldrh	r3, [r7, #6]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d101      	bne.n	8007c4e <tu_fifo_write_n+0x18>
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	e029      	b.n	8007ca2 <tu_fifo_write_n+0x6c>

  tu_fifo_lock(f);

  // Not overwritable limit up to full
  if (!f->overwritable) count = tu_min16(count, tu_fifo_remaining(f));
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	7a1b      	ldrb	r3, [r3, #8]
 8007c52:	f083 0301 	eor.w	r3, r3, #1
 8007c56:	b2db      	uxtb	r3, r3
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d00b      	beq.n	8007c74 <tu_fifo_write_n+0x3e>
 8007c5c:	68f8      	ldr	r0, [r7, #12]
 8007c5e:	f7ff fee4 	bl	8007a2a <tu_fifo_remaining>
 8007c62:	4603      	mov	r3, r0
 8007c64:	461a      	mov	r2, r3
 8007c66:	88fb      	ldrh	r3, [r7, #6]
 8007c68:	4611      	mov	r1, r2
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f7ff fea6 	bl	80079bc <tu_min16>
 8007c70:	4603      	mov	r3, r0
 8007c72:	80fb      	strh	r3, [r7, #6]

  uint8_t const* buf8 = (uint8_t const*) data;
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	617b      	str	r3, [r7, #20]
  uint16_t len = 0;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	827b      	strh	r3, [r7, #18]

  while (len < count)
 8007c7c:	e00c      	b.n	8007c98 <tu_fifo_write_n+0x62>
  {
    _tu_ff_push(f, buf8);
 8007c7e:	6979      	ldr	r1, [r7, #20]
 8007c80:	68f8      	ldr	r0, [r7, #12]
 8007c82:	f7ff ff37 	bl	8007af4 <_tu_ff_push>

    len++;
 8007c86:	8a7b      	ldrh	r3, [r7, #18]
 8007c88:	3301      	adds	r3, #1
 8007c8a:	827b      	strh	r3, [r7, #18]
    buf8 += f->item_size;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	88db      	ldrh	r3, [r3, #6]
 8007c90:	461a      	mov	r2, r3
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	4413      	add	r3, r2
 8007c96:	617b      	str	r3, [r7, #20]
  while (len < count)
 8007c98:	8a7a      	ldrh	r2, [r7, #18]
 8007c9a:	88fb      	ldrh	r3, [r7, #6]
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d3ee      	bcc.n	8007c7e <tu_fifo_write_n+0x48>
  }

  tu_fifo_unlock(f);

  return len;
 8007ca0:	8a7b      	ldrh	r3, [r7, #18]
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3718      	adds	r7, #24
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}

08007caa <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
*/
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
 8007caa:	b480      	push	{r7}
 8007cac:	b083      	sub	sp, #12
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
  tu_fifo_lock(f);

  f->rd_idx = f->wr_idx = f->count = 0;
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	4611      	mov	r1, r2
 8007cb8:	8159      	strh	r1, [r3, #10]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	4611      	mov	r1, r2
 8007cbe:	8199      	strh	r1, [r3, #12]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	81da      	strh	r2, [r3, #14]

  tu_fifo_unlock(f);

  return true;
 8007cc4:	2301      	movs	r3, #1
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	370c      	adds	r7, #12
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bc80      	pop	{r7}
 8007cce:	4770      	bx	lr

08007cd0 <tu_edpt_dir>:
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b083      	sub	sp, #12
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	71fb      	strb	r3, [r7, #7]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8007cda:	79fb      	ldrb	r3, [r7, #7]
 8007cdc:	09db      	lsrs	r3, r3, #7
 8007cde:	b2db      	uxtb	r3, r3
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	370c      	adds	r7, #12
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bc80      	pop	{r7}
 8007ce8:	4770      	bx	lr

08007cea <tu_edpt_number>:
{
 8007cea:	b480      	push	{r7}
 8007cec:	b083      	sub	sp, #12
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	71fb      	strb	r3, [r7, #7]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8007cf4:	79fb      	ldrb	r3, [r7, #7]
 8007cf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cfa:	b2db      	uxtb	r3, r3
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	370c      	adds	r7, #12
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bc80      	pop	{r7}
 8007d04:	4770      	bx	lr

08007d06 <tu_desc_next>:
{
 8007d06:	b480      	push	{r7}
 8007d08:	b085      	sub	sp, #20
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	461a      	mov	r2, r3
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	4413      	add	r3, r2
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3714      	adds	r7, #20
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bc80      	pop	{r7}
 8007d24:	4770      	bx	lr

08007d26 <tu_desc_type>:
{
 8007d26:	b480      	push	{r7}
 8007d28:	b083      	sub	sp, #12
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	3301      	adds	r3, #1
 8007d32:	781b      	ldrb	r3, [r3, #0]
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	370c      	adds	r7, #12
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bc80      	pop	{r7}
 8007d3c:	4770      	bx	lr

08007d3e <tu_desc_len>:
{
 8007d3e:	b480      	push	{r7}
 8007d40:	b083      	sub	sp, #12
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6078      	str	r0, [r7, #4]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	781b      	ldrb	r3, [r3, #0]
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	370c      	adds	r7, #12
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bc80      	pop	{r7}
 8007d52:	4770      	bx	lr

08007d54 <tu_u16_high>:
static inline uint8_t tu_u16_high(uint16_t u16) { return (uint8_t) (((uint16_t) (u16 >> 8)) & 0x00ff); }
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	80fb      	strh	r3, [r7, #6]
 8007d5e:	88fb      	ldrh	r3, [r7, #6]
 8007d60:	0a1b      	lsrs	r3, r3, #8
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	b2db      	uxtb	r3, r3
 8007d66:	4618      	mov	r0, r3
 8007d68:	370c      	adds	r7, #12
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bc80      	pop	{r7}
 8007d6e:	4770      	bx	lr

08007d70 <tu_u16_low>:
static inline uint8_t tu_u16_low (uint16_t u16) { return (uint8_t) (u16 & 0x00ff); }
 8007d70:	b480      	push	{r7}
 8007d72:	b083      	sub	sp, #12
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	4603      	mov	r3, r0
 8007d78:	80fb      	strh	r3, [r7, #6]
 8007d7a:	88fb      	ldrh	r3, [r7, #6]
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	4618      	mov	r0, r3
 8007d80:	370c      	adds	r7, #12
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bc80      	pop	{r7}
 8007d86:	4770      	bx	lr

08007d88 <_osal_q_lock>:
    }\
  }

// lock queue by disable usb isr
static inline void _osal_q_lock(osal_queue_t qhdl)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b082      	sub	sp, #8
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  (void) qhdl;

#if TUSB_OPT_DEVICE_ENABLED
  if (qhdl->role == OPT_MODE_DEVICE) dcd_int_disable(TUD_OPT_RHPORT);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d102      	bne.n	8007d9e <_osal_q_lock+0x16>
 8007d98:	2000      	movs	r0, #0
 8007d9a:	f001 fe59 	bl	8009a50 <dcd_int_disable>
#endif

#if TUSB_OPT_HOST_ENABLED
  if (qhdl->role == OPT_MODE_HOST) hcd_int_disable(TUH_OPT_RHPORT);
#endif
}
 8007d9e:	bf00      	nop
 8007da0:	3708      	adds	r7, #8
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}

08007da6 <_osal_q_unlock>:

// unlock queue
static inline void _osal_q_unlock(osal_queue_t qhdl)
{
 8007da6:	b580      	push	{r7, lr}
 8007da8:	b082      	sub	sp, #8
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
  (void) qhdl;

#if TUSB_OPT_DEVICE_ENABLED
  if (qhdl->role == OPT_MODE_DEVICE) dcd_int_enable(TUD_OPT_RHPORT);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d102      	bne.n	8007dbc <_osal_q_unlock+0x16>
 8007db6:	2000      	movs	r0, #0
 8007db8:	f001 fe34 	bl	8009a24 <dcd_int_enable>
#endif

#if TUSB_OPT_HOST_ENABLED
  if (qhdl->role == OPT_MODE_HOST) hcd_int_enable(TUH_OPT_RHPORT);
#endif
}
 8007dbc:	bf00      	nop
 8007dbe:	3708      	adds	r7, #8
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <osal_queue_create>:

static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b082      	sub	sp, #8
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  tu_fifo_clear(&qdef->ff);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	3304      	adds	r3, #4
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f7ff ff6a 	bl	8007caa <tu_fifo_clear>
  return (osal_queue_t) qdef;
 8007dd6:	687b      	ldr	r3, [r7, #4]
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3708      	adds	r7, #8
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <osal_queue_receive>:

// non blocking
static inline bool osal_queue_receive(osal_queue_t const qhdl, void* data)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
  _osal_q_lock(qhdl);
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f7ff ffcc 	bl	8007d88 <_osal_q_lock>
  bool success = tu_fifo_read(&qhdl->ff, data);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	3304      	adds	r3, #4
 8007df4:	6839      	ldr	r1, [r7, #0]
 8007df6:	4618      	mov	r0, r3
 8007df8:	f7ff feb7 	bl	8007b6a <tu_fifo_read>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	73fb      	strb	r3, [r7, #15]
  _osal_q_unlock(qhdl);
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f7ff ffd0 	bl	8007da6 <_osal_q_unlock>

  return success;
 8007e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3710      	adds	r7, #16
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <osal_queue_send>:

static inline bool osal_queue_send(osal_queue_t const qhdl, void const * data, bool in_isr)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b086      	sub	sp, #24
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	60f8      	str	r0, [r7, #12]
 8007e18:	60b9      	str	r1, [r7, #8]
 8007e1a:	4613      	mov	r3, r2
 8007e1c:	71fb      	strb	r3, [r7, #7]
  if (!in_isr) {
 8007e1e:	79fb      	ldrb	r3, [r7, #7]
 8007e20:	f083 0301 	eor.w	r3, r3, #1
 8007e24:	b2db      	uxtb	r3, r3
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d002      	beq.n	8007e30 <osal_queue_send+0x20>
    _osal_q_lock(qhdl);
 8007e2a:	68f8      	ldr	r0, [r7, #12]
 8007e2c:	f7ff ffac 	bl	8007d88 <_osal_q_lock>
  }

  bool success = tu_fifo_write(&qhdl->ff, data);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	3304      	adds	r3, #4
 8007e34:	68b9      	ldr	r1, [r7, #8]
 8007e36:	4618      	mov	r0, r3
 8007e38:	f7ff fee0 	bl	8007bfc <tu_fifo_write>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	75fb      	strb	r3, [r7, #23]

  if (!in_isr) {
 8007e40:	79fb      	ldrb	r3, [r7, #7]
 8007e42:	f083 0301 	eor.w	r3, r3, #1
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d002      	beq.n	8007e52 <osal_queue_send+0x42>
    _osal_q_unlock(qhdl);
 8007e4c:	68f8      	ldr	r0, [r7, #12]
 8007e4e:	f7ff ffaa 	bl	8007da6 <_osal_q_unlock>
  }

  TU_ASSERT(success);
 8007e52:	7dfb      	ldrb	r3, [r7, #23]
 8007e54:	f083 0301 	eor.w	r3, r3, #1
 8007e58:	b2db      	uxtb	r3, r3
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d00a      	beq.n	8007e74 <osal_queue_send+0x64>
 8007e5e:	4b08      	ldr	r3, [pc, #32]	; (8007e80 <osal_queue_send+0x70>)
 8007e60:	613b      	str	r3, [r7, #16]
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f003 0301 	and.w	r3, r3, #1
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d000      	beq.n	8007e70 <osal_queue_send+0x60>
 8007e6e:	be00      	bkpt	0x0000
 8007e70:	2300      	movs	r3, #0
 8007e72:	e000      	b.n	8007e76 <osal_queue_send+0x66>

  return success;
 8007e74:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3718      	adds	r7, #24
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
 8007e7e:	bf00      	nop
 8007e80:	e000edf0 	.word	0xe000edf0

08007e84 <tud_mounted>:

//--------------------------------------------------------------------+
// Application API
//--------------------------------------------------------------------+
bool tud_mounted(void)
{
 8007e84:	b480      	push	{r7}
 8007e86:	af00      	add	r7, sp, #0
  return _usbd_dev.configured;
 8007e88:	4b06      	ldr	r3, [pc, #24]	; (8007ea4 <tud_mounted+0x20>)
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	bf14      	ite	ne
 8007e96:	2301      	movne	r3, #1
 8007e98:	2300      	moveq	r3, #0
 8007e9a:	b2db      	uxtb	r3, r3
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bc80      	pop	{r7}
 8007ea2:	4770      	bx	lr
 8007ea4:	20002570 	.word	0x20002570

08007ea8 <tud_suspended>:

bool tud_suspended(void)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	af00      	add	r7, sp, #0
  return _usbd_dev.suspended;
 8007eac:	4b06      	ldr	r3, [pc, #24]	; (8007ec8 <tud_suspended+0x20>)
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007eb4:	b2db      	uxtb	r3, r3
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	bf14      	ite	ne
 8007eba:	2301      	movne	r3, #1
 8007ebc:	2300      	moveq	r3, #0
 8007ebe:	b2db      	uxtb	r3, r3
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bc80      	pop	{r7}
 8007ec6:	4770      	bx	lr
 8007ec8:	20002570 	.word	0x20002570

08007ecc <tud_remote_wakeup>:

bool tud_remote_wakeup(void)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	af00      	add	r7, sp, #0
  // only wake up host if this feature is supported and enabled and we are suspended
  TU_VERIFY (_usbd_dev.suspended && _usbd_dev.remote_wakeup_support && _usbd_dev.remote_wakeup_en );
 8007ed0:	4b0e      	ldr	r3, [pc, #56]	; (8007f0c <tud_remote_wakeup+0x40>)
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d00d      	beq.n	8007efa <tud_remote_wakeup+0x2e>
 8007ede:	4b0b      	ldr	r3, [pc, #44]	; (8007f0c <tud_remote_wakeup+0x40>)
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	f003 0310 	and.w	r3, r3, #16
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d006      	beq.n	8007efa <tud_remote_wakeup+0x2e>
 8007eec:	4b07      	ldr	r3, [pc, #28]	; (8007f0c <tud_remote_wakeup+0x40>)
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	f003 0308 	and.w	r3, r3, #8
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d101      	bne.n	8007efe <tud_remote_wakeup+0x32>
 8007efa:	2300      	movs	r3, #0
 8007efc:	e003      	b.n	8007f06 <tud_remote_wakeup+0x3a>
  dcd_remote_wakeup(TUD_OPT_RHPORT);
 8007efe:	2000      	movs	r0, #0
 8007f00:	f001 fddc 	bl	8009abc <dcd_remote_wakeup>
  return true;
 8007f04:	2301      	movs	r3, #1
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	bd80      	pop	{r7, pc}
 8007f0a:	bf00      	nop
 8007f0c:	20002570 	.word	0x20002570

08007f10 <tud_init>:

//--------------------------------------------------------------------+
// USBD Task
//--------------------------------------------------------------------+
bool tud_init (void)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af00      	add	r7, sp, #0
  TU_LOG2("USBD init\r\n");

  tu_varclr(&_usbd_dev);
 8007f16:	2231      	movs	r2, #49	; 0x31
 8007f18:	2100      	movs	r1, #0
 8007f1a:	4819      	ldr	r0, [pc, #100]	; (8007f80 <tud_init+0x70>)
 8007f1c:	f002 fb6a 	bl	800a5f4 <memset>

  // Init device queue & task
  _usbd_q = osal_queue_create(&_usbd_qdef);
 8007f20:	4818      	ldr	r0, [pc, #96]	; (8007f84 <tud_init+0x74>)
 8007f22:	f7ff ff4f 	bl	8007dc4 <osal_queue_create>
 8007f26:	4602      	mov	r2, r0
 8007f28:	4b17      	ldr	r3, [pc, #92]	; (8007f88 <tud_init+0x78>)
 8007f2a:	601a      	str	r2, [r3, #0]
  TU_ASSERT(_usbd_q != NULL);
 8007f2c:	4b16      	ldr	r3, [pc, #88]	; (8007f88 <tud_init+0x78>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d10a      	bne.n	8007f4a <tud_init+0x3a>
 8007f34:	4b15      	ldr	r3, [pc, #84]	; (8007f8c <tud_init+0x7c>)
 8007f36:	603b      	str	r3, [r7, #0]
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f003 0301 	and.w	r3, r3, #1
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d000      	beq.n	8007f46 <tud_init+0x36>
 8007f44:	be00      	bkpt	0x0000
 8007f46:	2300      	movs	r3, #0
 8007f48:	e016      	b.n	8007f78 <tud_init+0x68>

  // Init class drivers
  for (uint8_t i = 0; i < USBD_CLASS_DRIVER_COUNT; i++)
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	71fb      	strb	r3, [r7, #7]
 8007f4e:	e009      	b.n	8007f64 <tud_init+0x54>
  {
    TU_LOG2("%s init\r\n", _usbd_driver_str[i]);
    _usbd_driver[i].init();
 8007f50:	79fb      	ldrb	r3, [r7, #7]
 8007f52:	4a0f      	ldr	r2, [pc, #60]	; (8007f90 <tud_init+0x80>)
 8007f54:	015b      	lsls	r3, r3, #5
 8007f56:	4413      	add	r3, r2
 8007f58:	3304      	adds	r3, #4
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4798      	blx	r3
  for (uint8_t i = 0; i < USBD_CLASS_DRIVER_COUNT; i++)
 8007f5e:	79fb      	ldrb	r3, [r7, #7]
 8007f60:	3301      	adds	r3, #1
 8007f62:	71fb      	strb	r3, [r7, #7]
 8007f64:	79fb      	ldrb	r3, [r7, #7]
 8007f66:	2b03      	cmp	r3, #3
 8007f68:	d9f2      	bls.n	8007f50 <tud_init+0x40>
  }

  // Init device controller driver
  dcd_init(TUD_OPT_RHPORT);
 8007f6a:	2000      	movs	r0, #0
 8007f6c:	f001 fcea 	bl	8009944 <dcd_init>
  dcd_int_enable(TUD_OPT_RHPORT);
 8007f70:	2000      	movs	r0, #0
 8007f72:	f001 fd57 	bl	8009a24 <dcd_int_enable>

  return true;
 8007f76:	2301      	movs	r3, #1
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3708      	adds	r7, #8
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}
 8007f80:	20002570 	.word	0x20002570
 8007f84:	20002138 	.word	0x20002138
 8007f88:	200025a4 	.word	0x200025a4
 8007f8c:	e000edf0 	.word	0xe000edf0
 8007f90:	0800a870 	.word	0x0800a870

08007f94 <usbd_reset>:

static void usbd_reset(uint8_t rhport)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b084      	sub	sp, #16
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	71fb      	strb	r3, [r7, #7]
  tu_varclr(&_usbd_dev);
 8007f9e:	2231      	movs	r2, #49	; 0x31
 8007fa0:	2100      	movs	r1, #0
 8007fa2:	4816      	ldr	r0, [pc, #88]	; (8007ffc <usbd_reset+0x68>)
 8007fa4:	f002 fb26 	bl	800a5f4 <memset>

  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
 8007fa8:	2210      	movs	r2, #16
 8007faa:	21ff      	movs	r1, #255	; 0xff
 8007fac:	4814      	ldr	r0, [pc, #80]	; (8008000 <usbd_reset+0x6c>)
 8007fae:	f002 fb21 	bl	800a5f4 <memset>
  memset(_usbd_dev.ep2drv , DRVID_INVALID, sizeof(_usbd_dev.ep2drv )); // invalid mapping
 8007fb2:	2210      	movs	r2, #16
 8007fb4:	21ff      	movs	r1, #255	; 0xff
 8007fb6:	4813      	ldr	r0, [pc, #76]	; (8008004 <usbd_reset+0x70>)
 8007fb8:	f002 fb1c 	bl	800a5f4 <memset>

  usbd_control_reset();
 8007fbc:	f001 f8da 	bl	8009174 <usbd_control_reset>

  for (uint8_t i = 0; i < USBD_CLASS_DRIVER_COUNT; i++)
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	73fb      	strb	r3, [r7, #15]
 8007fc4:	e013      	b.n	8007fee <usbd_reset+0x5a>
  {
    if ( _usbd_driver[i].reset ) _usbd_driver[i].reset( rhport );
 8007fc6:	7bfb      	ldrb	r3, [r7, #15]
 8007fc8:	4a0f      	ldr	r2, [pc, #60]	; (8008008 <usbd_reset+0x74>)
 8007fca:	015b      	lsls	r3, r3, #5
 8007fcc:	4413      	add	r3, r2
 8007fce:	3308      	adds	r3, #8
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d008      	beq.n	8007fe8 <usbd_reset+0x54>
 8007fd6:	7bfb      	ldrb	r3, [r7, #15]
 8007fd8:	4a0b      	ldr	r2, [pc, #44]	; (8008008 <usbd_reset+0x74>)
 8007fda:	015b      	lsls	r3, r3, #5
 8007fdc:	4413      	add	r3, r2
 8007fde:	3308      	adds	r3, #8
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	79fa      	ldrb	r2, [r7, #7]
 8007fe4:	4610      	mov	r0, r2
 8007fe6:	4798      	blx	r3
  for (uint8_t i = 0; i < USBD_CLASS_DRIVER_COUNT; i++)
 8007fe8:	7bfb      	ldrb	r3, [r7, #15]
 8007fea:	3301      	adds	r3, #1
 8007fec:	73fb      	strb	r3, [r7, #15]
 8007fee:	7bfb      	ldrb	r3, [r7, #15]
 8007ff0:	2b03      	cmp	r3, #3
 8007ff2:	d9e8      	bls.n	8007fc6 <usbd_reset+0x32>
  }
}
 8007ff4:	bf00      	nop
 8007ff6:	3710      	adds	r7, #16
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}
 8007ffc:	20002570 	.word	0x20002570
 8008000:	20002571 	.word	0x20002571
 8008004:	20002581 	.word	0x20002581
 8008008:	0800a870 	.word	0x0800a870

0800800c <tud_task>:
      }
    }
    @endcode
 */
void tud_task (void)
{
 800800c:	b590      	push	{r4, r7, lr}
 800800e:	b089      	sub	sp, #36	; 0x24
 8008010:	af00      	add	r7, sp, #0
  // Skip if stack is not initialized
  if ( !tusb_inited() ) return;
 8008012:	f002 fa9d 	bl	800a550 <tusb_inited>
 8008016:	4603      	mov	r3, r0
 8008018:	f083 0301 	eor.w	r3, r3, #1
 800801c:	b2db      	uxtb	r3, r3
 800801e:	2b00      	cmp	r3, #0
 8008020:	f040 80ea 	bne.w	80081f8 <tud_task+0x1ec>
  // Loop until there is no more events in the queue
  while (1)
  {
    dcd_event_t event;

    if ( !osal_queue_receive(_usbd_q, &event) ) return;
 8008024:	4b78      	ldr	r3, [pc, #480]	; (8008208 <tud_task+0x1fc>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	1d3a      	adds	r2, r7, #4
 800802a:	4611      	mov	r1, r2
 800802c:	4618      	mov	r0, r3
 800802e:	f7ff fed7 	bl	8007de0 <osal_queue_receive>
 8008032:	4603      	mov	r3, r0
 8008034:	f083 0301 	eor.w	r3, r3, #1
 8008038:	b2db      	uxtb	r3, r3
 800803a:	2b00      	cmp	r3, #0
 800803c:	f040 80de 	bne.w	80081fc <tud_task+0x1f0>

    TU_LOG2("USBD: event %s\r\n", event.event_id < DCD_EVENT_COUNT ? _usbd_event_str[event.event_id] : "CORRUPTED");

    switch ( event.event_id )
 8008040:	797b      	ldrb	r3, [r7, #5]
 8008042:	3b01      	subs	r3, #1
 8008044:	2b07      	cmp	r3, #7
 8008046:	f200 80c1 	bhi.w	80081cc <tud_task+0x1c0>
 800804a:	a201      	add	r2, pc, #4	; (adr r2, 8008050 <tud_task+0x44>)
 800804c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008050:	08008071 	.word	0x08008071
 8008054:	0800807b 	.word	0x0800807b
 8008058:	08008187 	.word	0x08008187
 800805c:	08008159 	.word	0x08008159
 8008060:	0800817b 	.word	0x0800817b
 8008064:	08008091 	.word	0x08008091
 8008068:	080080cd 	.word	0x080080cd
 800806c:	080081bd 	.word	0x080081bd
    {
      case DCD_EVENT_BUS_RESET:
        usbd_reset(event.rhport);
 8008070:	793b      	ldrb	r3, [r7, #4]
 8008072:	4618      	mov	r0, r3
 8008074:	f7ff ff8e 	bl	8007f94 <usbd_reset>
      break;
 8008078:	e0bd      	b.n	80081f6 <tud_task+0x1ea>

      case DCD_EVENT_UNPLUGGED:
        usbd_reset(event.rhport);
 800807a:	793b      	ldrb	r3, [r7, #4]
 800807c:	4618      	mov	r0, r3
 800807e:	f7ff ff89 	bl	8007f94 <usbd_reset>

        // invoke callback
        if (tud_umount_cb) tud_umount_cb();
 8008082:	4b62      	ldr	r3, [pc, #392]	; (800820c <tud_task+0x200>)
 8008084:	2b00      	cmp	r3, #0
 8008086:	f000 80ab 	beq.w	80081e0 <tud_task+0x1d4>
 800808a:	f7f8 fd13 	bl	8000ab4 <tud_umount_cb>
      break;
 800808e:	e0a7      	b.n	80081e0 <tud_task+0x1d4>
      case DCD_EVENT_SETUP_RECEIVED:
        TU_LOG2_MEM(&event.setup_received, 8, 2);

        // Mark as connected after receiving 1st setup packet.
        // But it is easier to set it every time instead of wasting time to check then set
        _usbd_dev.connected = 1;
 8008090:	4a5f      	ldr	r2, [pc, #380]	; (8008210 <tud_task+0x204>)
 8008092:	7813      	ldrb	r3, [r2, #0]
 8008094:	f043 0301 	orr.w	r3, r3, #1
 8008098:	7013      	strb	r3, [r2, #0]

        // Process control request
        if ( !process_control_request(event.rhport, &event.setup_received) )
 800809a:	793a      	ldrb	r2, [r7, #4]
 800809c:	1d3b      	adds	r3, r7, #4
 800809e:	3304      	adds	r3, #4
 80080a0:	4619      	mov	r1, r3
 80080a2:	4610      	mov	r0, r2
 80080a4:	f000 f8f6 	bl	8008294 <process_control_request>
 80080a8:	4603      	mov	r3, r0
 80080aa:	f083 0301 	eor.w	r3, r3, #1
 80080ae:	b2db      	uxtb	r3, r3
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	f000 8097 	beq.w	80081e4 <tud_task+0x1d8>
        {
          TU_LOG2("  Stall EP0\r\n");
          // Failed -> stall both control endpoint IN and OUT
          dcd_edpt_stall(event.rhport, 0);
 80080b6:	793b      	ldrb	r3, [r7, #4]
 80080b8:	2100      	movs	r1, #0
 80080ba:	4618      	mov	r0, r3
 80080bc:	f002 f938 	bl	800a330 <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
 80080c0:	793b      	ldrb	r3, [r7, #4]
 80080c2:	2180      	movs	r1, #128	; 0x80
 80080c4:	4618      	mov	r0, r3
 80080c6:	f002 f933 	bl	800a330 <dcd_edpt_stall>
        }
      break;
 80080ca:	e08b      	b.n	80081e4 <tud_task+0x1d8>

      case DCD_EVENT_XFER_COMPLETE:
      {
        // Invoke the class callback associated with the endpoint address
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
 80080cc:	7a3b      	ldrb	r3, [r7, #8]
 80080ce:	77bb      	strb	r3, [r7, #30]
        uint8_t const epnum   = tu_edpt_number(ep_addr);
 80080d0:	7fbb      	ldrb	r3, [r7, #30]
 80080d2:	4618      	mov	r0, r3
 80080d4:	f7ff fe09 	bl	8007cea <tu_edpt_number>
 80080d8:	4603      	mov	r3, r0
 80080da:	777b      	strb	r3, [r7, #29]
        uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 80080dc:	7fbb      	ldrb	r3, [r7, #30]
 80080de:	4618      	mov	r0, r3
 80080e0:	f7ff fdf6 	bl	8007cd0 <tu_edpt_dir>
 80080e4:	4603      	mov	r3, r0
 80080e6:	773b      	strb	r3, [r7, #28]

        TU_LOG2("  Endpoint: 0x%02X, Bytes: %ld\r\n", ep_addr, event.xfer_complete.len);

        _usbd_dev.ep_status[epnum][ep_dir].busy = false;
 80080e8:	7f7a      	ldrb	r2, [r7, #29]
 80080ea:	7f3b      	ldrb	r3, [r7, #28]
 80080ec:	4948      	ldr	r1, [pc, #288]	; (8008210 <tud_task+0x204>)
 80080ee:	0052      	lsls	r2, r2, #1
 80080f0:	440a      	add	r2, r1
 80080f2:	4413      	add	r3, r2
 80080f4:	f103 0220 	add.w	r2, r3, #32
 80080f8:	7853      	ldrb	r3, [r2, #1]
 80080fa:	f36f 0300 	bfc	r3, #0, #1
 80080fe:	7053      	strb	r3, [r2, #1]

        if ( 0 == epnum )
 8008100:	7f7b      	ldrb	r3, [r7, #29]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d106      	bne.n	8008114 <tud_task+0x108>
        {
          usbd_control_xfer_cb(event.rhport, ep_addr, event.xfer_complete.result, event.xfer_complete.len);
 8008106:	7938      	ldrb	r0, [r7, #4]
 8008108:	7a7a      	ldrb	r2, [r7, #9]
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	7fb9      	ldrb	r1, [r7, #30]
 800810e:	f001 f865 	bl	80091dc <usbd_control_xfer_cb>

          TU_LOG2("  %s xfer callback\r\n", _usbd_driver_str[drv_id]);
          _usbd_driver[drv_id].xfer_cb(event.rhport, ep_addr, event.xfer_complete.result, event.xfer_complete.len);
        }
      }
      break;
 8008112:	e070      	b.n	80081f6 <tud_task+0x1ea>
          uint8_t const drv_id = _usbd_dev.ep2drv[epnum][ep_dir];
 8008114:	7f7a      	ldrb	r2, [r7, #29]
 8008116:	7f3b      	ldrb	r3, [r7, #28]
 8008118:	493d      	ldr	r1, [pc, #244]	; (8008210 <tud_task+0x204>)
 800811a:	0052      	lsls	r2, r2, #1
 800811c:	440a      	add	r2, r1
 800811e:	4413      	add	r3, r2
 8008120:	3311      	adds	r3, #17
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	76fb      	strb	r3, [r7, #27]
          TU_ASSERT(drv_id < USBD_CLASS_DRIVER_COUNT,);
 8008126:	7efb      	ldrb	r3, [r7, #27]
 8008128:	2b03      	cmp	r3, #3
 800812a:	d909      	bls.n	8008140 <tud_task+0x134>
 800812c:	4b39      	ldr	r3, [pc, #228]	; (8008214 <tud_task+0x208>)
 800812e:	617b      	str	r3, [r7, #20]
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f003 0301 	and.w	r3, r3, #1
 8008138:	2b00      	cmp	r3, #0
 800813a:	d061      	beq.n	8008200 <tud_task+0x1f4>
 800813c:	be00      	bkpt	0x0000
 800813e:	e05f      	b.n	8008200 <tud_task+0x1f4>
          _usbd_driver[drv_id].xfer_cb(event.rhport, ep_addr, event.xfer_complete.result, event.xfer_complete.len);
 8008140:	7efb      	ldrb	r3, [r7, #27]
 8008142:	4a35      	ldr	r2, [pc, #212]	; (8008218 <tud_task+0x20c>)
 8008144:	015b      	lsls	r3, r3, #5
 8008146:	4413      	add	r3, r2
 8008148:	3318      	adds	r3, #24
 800814a:	681c      	ldr	r4, [r3, #0]
 800814c:	7938      	ldrb	r0, [r7, #4]
 800814e:	7a7a      	ldrb	r2, [r7, #9]
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	7fb9      	ldrb	r1, [r7, #30]
 8008154:	47a0      	blx	r4
      break;
 8008156:	e04e      	b.n	80081f6 <tud_task+0x1ea>

      case DCD_EVENT_SUSPEND:
        if (tud_suspend_cb) tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 8008158:	4b30      	ldr	r3, [pc, #192]	; (800821c <tud_task+0x210>)
 800815a:	2b00      	cmp	r3, #0
 800815c:	d044      	beq.n	80081e8 <tud_task+0x1dc>
 800815e:	4b2c      	ldr	r3, [pc, #176]	; (8008210 <tud_task+0x204>)
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008166:	b2db      	uxtb	r3, r3
 8008168:	2b00      	cmp	r3, #0
 800816a:	bf14      	ite	ne
 800816c:	2301      	movne	r3, #1
 800816e:	2300      	moveq	r3, #0
 8008170:	b2db      	uxtb	r3, r3
 8008172:	4618      	mov	r0, r3
 8008174:	f7f8 fcaa 	bl	8000acc <tud_suspend_cb>
      break;
 8008178:	e036      	b.n	80081e8 <tud_task+0x1dc>

      case DCD_EVENT_RESUME:
        if (tud_resume_cb) tud_resume_cb();
 800817a:	4b29      	ldr	r3, [pc, #164]	; (8008220 <tud_task+0x214>)
 800817c:	2b00      	cmp	r3, #0
 800817e:	d035      	beq.n	80081ec <tud_task+0x1e0>
 8008180:	f7f8 fcb4 	bl	8000aec <tud_resume_cb>
      break;
 8008184:	e032      	b.n	80081ec <tud_task+0x1e0>

      case DCD_EVENT_SOF:
        for ( uint8_t i = 0; i < USBD_CLASS_DRIVER_COUNT; i++ )
 8008186:	2300      	movs	r3, #0
 8008188:	77fb      	strb	r3, [r7, #31]
 800818a:	e013      	b.n	80081b4 <tud_task+0x1a8>
        {
          if ( _usbd_driver[i].sof )
 800818c:	7ffb      	ldrb	r3, [r7, #31]
 800818e:	4a22      	ldr	r2, [pc, #136]	; (8008218 <tud_task+0x20c>)
 8008190:	015b      	lsls	r3, r3, #5
 8008192:	4413      	add	r3, r2
 8008194:	331c      	adds	r3, #28
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d008      	beq.n	80081ae <tud_task+0x1a2>
          {
            _usbd_driver[i].sof(event.rhport);
 800819c:	7ffb      	ldrb	r3, [r7, #31]
 800819e:	4a1e      	ldr	r2, [pc, #120]	; (8008218 <tud_task+0x20c>)
 80081a0:	015b      	lsls	r3, r3, #5
 80081a2:	4413      	add	r3, r2
 80081a4:	331c      	adds	r3, #28
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	793a      	ldrb	r2, [r7, #4]
 80081aa:	4610      	mov	r0, r2
 80081ac:	4798      	blx	r3
        for ( uint8_t i = 0; i < USBD_CLASS_DRIVER_COUNT; i++ )
 80081ae:	7ffb      	ldrb	r3, [r7, #31]
 80081b0:	3301      	adds	r3, #1
 80081b2:	77fb      	strb	r3, [r7, #31]
 80081b4:	7ffb      	ldrb	r3, [r7, #31]
 80081b6:	2b03      	cmp	r3, #3
 80081b8:	d9e8      	bls.n	800818c <tud_task+0x180>
          }
        }
      break;
 80081ba:	e01c      	b.n	80081f6 <tud_task+0x1ea>

      case USBD_EVENT_FUNC_CALL:
        if ( event.func_call.func ) event.func_call.func(event.func_call.param);
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d016      	beq.n	80081f0 <tud_task+0x1e4>
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	68fa      	ldr	r2, [r7, #12]
 80081c6:	4610      	mov	r0, r2
 80081c8:	4798      	blx	r3
      break;
 80081ca:	e011      	b.n	80081f0 <tud_task+0x1e4>

      default:
        TU_BREAKPOINT();
 80081cc:	4b11      	ldr	r3, [pc, #68]	; (8008214 <tud_task+0x208>)
 80081ce:	613b      	str	r3, [r7, #16]
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f003 0301 	and.w	r3, r3, #1
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d00b      	beq.n	80081f4 <tud_task+0x1e8>
 80081dc:	be00      	bkpt	0x0000
      break;
 80081de:	e009      	b.n	80081f4 <tud_task+0x1e8>
      break;
 80081e0:	bf00      	nop
 80081e2:	e71f      	b.n	8008024 <tud_task+0x18>
      break;
 80081e4:	bf00      	nop
 80081e6:	e71d      	b.n	8008024 <tud_task+0x18>
      break;
 80081e8:	bf00      	nop
 80081ea:	e71b      	b.n	8008024 <tud_task+0x18>
      break;
 80081ec:	bf00      	nop
 80081ee:	e719      	b.n	8008024 <tud_task+0x18>
      break;
 80081f0:	bf00      	nop
 80081f2:	e717      	b.n	8008024 <tud_task+0x18>
      break;
 80081f4:	bf00      	nop
  {
 80081f6:	e715      	b.n	8008024 <tud_task+0x18>
  if ( !tusb_inited() ) return;
 80081f8:	bf00      	nop
 80081fa:	e002      	b.n	8008202 <tud_task+0x1f6>
    if ( !osal_queue_receive(_usbd_q, &event) ) return;
 80081fc:	bf00      	nop
 80081fe:	e000      	b.n	8008202 <tud_task+0x1f6>
          TU_ASSERT(drv_id < USBD_CLASS_DRIVER_COUNT,);
 8008200:	bf00      	nop
    }
  }
}
 8008202:	3724      	adds	r7, #36	; 0x24
 8008204:	46bd      	mov	sp, r7
 8008206:	bd90      	pop	{r4, r7, pc}
 8008208:	200025a4 	.word	0x200025a4
 800820c:	08000ab5 	.word	0x08000ab5
 8008210:	20002570 	.word	0x20002570
 8008214:	e000edf0 	.word	0xe000edf0
 8008218:	0800a870 	.word	0x0800a870
 800821c:	08000acd 	.word	0x08000acd
 8008220:	08000aed 	.word	0x08000aed

08008224 <invoke_class_control>:
// Control Request Parser & Handling
//--------------------------------------------------------------------+

// Helper to invoke class driver control request handler
static bool invoke_class_control(uint8_t rhport, uint8_t drvid, tusb_control_request_t const * request)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b084      	sub	sp, #16
 8008228:	af00      	add	r7, sp, #0
 800822a:	4603      	mov	r3, r0
 800822c:	603a      	str	r2, [r7, #0]
 800822e:	71fb      	strb	r3, [r7, #7]
 8008230:	460b      	mov	r3, r1
 8008232:	71bb      	strb	r3, [r7, #6]
  TU_ASSERT(_usbd_driver[drvid].control_request);
 8008234:	79bb      	ldrb	r3, [r7, #6]
 8008236:	4a15      	ldr	r2, [pc, #84]	; (800828c <invoke_class_control+0x68>)
 8008238:	015b      	lsls	r3, r3, #5
 800823a:	4413      	add	r3, r2
 800823c:	3310      	adds	r3, #16
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d10a      	bne.n	800825a <invoke_class_control+0x36>
 8008244:	4b12      	ldr	r3, [pc, #72]	; (8008290 <invoke_class_control+0x6c>)
 8008246:	60fb      	str	r3, [r7, #12]
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f003 0301 	and.w	r3, r3, #1
 8008250:	2b00      	cmp	r3, #0
 8008252:	d000      	beq.n	8008256 <invoke_class_control+0x32>
 8008254:	be00      	bkpt	0x0000
 8008256:	2300      	movs	r3, #0
 8008258:	e013      	b.n	8008282 <invoke_class_control+0x5e>

  usbd_control_set_complete_callback(_usbd_driver[drvid].control_complete);
 800825a:	79bb      	ldrb	r3, [r7, #6]
 800825c:	4a0b      	ldr	r2, [pc, #44]	; (800828c <invoke_class_control+0x68>)
 800825e:	015b      	lsls	r3, r3, #5
 8008260:	4413      	add	r3, r2
 8008262:	3314      	adds	r3, #20
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4618      	mov	r0, r3
 8008268:	f000 ff90 	bl	800918c <usbd_control_set_complete_callback>
  TU_LOG2("  %s control request\r\n", _usbd_driver_str[drvid]);
  return _usbd_driver[drvid].control_request(rhport, request);
 800826c:	79bb      	ldrb	r3, [r7, #6]
 800826e:	4a07      	ldr	r2, [pc, #28]	; (800828c <invoke_class_control+0x68>)
 8008270:	015b      	lsls	r3, r3, #5
 8008272:	4413      	add	r3, r2
 8008274:	3310      	adds	r3, #16
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	79fa      	ldrb	r2, [r7, #7]
 800827a:	6839      	ldr	r1, [r7, #0]
 800827c:	4610      	mov	r0, r2
 800827e:	4798      	blx	r3
 8008280:	4603      	mov	r3, r0
}
 8008282:	4618      	mov	r0, r3
 8008284:	3710      	adds	r7, #16
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	0800a870 	.word	0x0800a870
 8008290:	e000edf0 	.word	0xe000edf0

08008294 <process_control_request>:

// This handles the actual request and its response.
// return false will cause its caller to stall control endpoint
static bool process_control_request(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b092      	sub	sp, #72	; 0x48
 8008298:	af00      	add	r7, sp, #0
 800829a:	4603      	mov	r3, r0
 800829c:	6039      	str	r1, [r7, #0]
 800829e:	71fb      	strb	r3, [r7, #7]
  usbd_control_set_complete_callback(NULL);
 80082a0:	2000      	movs	r0, #0
 80082a2:	f000 ff73 	bl	800918c <usbd_control_set_complete_callback>

  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082ae:	b2db      	uxtb	r3, r3
 80082b0:	2b60      	cmp	r3, #96	; 0x60
 80082b2:	d10a      	bne.n	80082ca <process_control_request+0x36>
 80082b4:	4bae      	ldr	r3, [pc, #696]	; (8008570 <process_control_request+0x2dc>)
 80082b6:	617b      	str	r3, [r7, #20]
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f003 0301 	and.w	r3, r3, #1
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d000      	beq.n	80082c6 <process_control_request+0x32>
 80082c4:	be00      	bkpt	0x0000
 80082c6:	2300      	movs	r3, #0
 80082c8:	e246      	b.n	8008758 <process_control_request+0x4c4>

  // Vendor request
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR )
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	781b      	ldrb	r3, [r3, #0]
 80082ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082d2:	b2db      	uxtb	r3, r3
 80082d4:	2b40      	cmp	r3, #64	; 0x40
 80082d6:	d111      	bne.n	80082fc <process_control_request+0x68>
  {
    TU_VERIFY(tud_vendor_control_request_cb);
 80082d8:	4ba6      	ldr	r3, [pc, #664]	; (8008574 <process_control_request+0x2e0>)
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d101      	bne.n	80082e2 <process_control_request+0x4e>
 80082de:	2300      	movs	r3, #0
 80082e0:	e23a      	b.n	8008758 <process_control_request+0x4c4>

    if (tud_vendor_control_complete_cb) usbd_control_set_complete_callback(tud_vendor_control_complete_cb);
 80082e2:	4ba5      	ldr	r3, [pc, #660]	; (8008578 <process_control_request+0x2e4>)
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d002      	beq.n	80082ee <process_control_request+0x5a>
 80082e8:	48a3      	ldr	r0, [pc, #652]	; (8008578 <process_control_request+0x2e4>)
 80082ea:	f000 ff4f 	bl	800918c <usbd_control_set_complete_callback>
    return tud_vendor_control_request_cb(rhport, p_request);
 80082ee:	79fb      	ldrb	r3, [r7, #7]
 80082f0:	6839      	ldr	r1, [r7, #0]
 80082f2:	4618      	mov	r0, r3
 80082f4:	f3af 8000 	nop.w
 80082f8:	4603      	mov	r3, r0
 80082fa:	e22d      	b.n	8008758 <process_control_request+0x4c4>
  {
    TU_LOG2("  %s\r\n", _tusb_std_request_str[p_request->bRequest]);
  }
#endif

  switch ( p_request->bmRequestType_bit.recipient )
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	781b      	ldrb	r3, [r3, #0]
 8008300:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8008304:	b2db      	uxtb	r3, r3
 8008306:	2b01      	cmp	r3, #1
 8008308:	f000 80ea 	beq.w	80084e0 <process_control_request+0x24c>
 800830c:	2b02      	cmp	r3, #2
 800830e:	f000 815e 	beq.w	80085ce <process_control_request+0x33a>
 8008312:	2b00      	cmp	r3, #0
 8008314:	f040 8213 	bne.w	800873e <process_control_request+0x4aa>
  {
    //------------- Device Requests e.g in enumeration -------------//
    case TUSB_REQ_RCPT_DEVICE:
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	781b      	ldrb	r3, [r3, #0]
 800831c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008320:	b2db      	uxtb	r3, r3
 8008322:	2b00      	cmp	r3, #0
 8008324:	d00a      	beq.n	800833c <process_control_request+0xa8>
      {
        // Non standard request is not supported
        TU_BREAKPOINT();
 8008326:	4b92      	ldr	r3, [pc, #584]	; (8008570 <process_control_request+0x2dc>)
 8008328:	61fb      	str	r3, [r7, #28]
 800832a:	69fb      	ldr	r3, [r7, #28]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f003 0301 	and.w	r3, r3, #1
 8008332:	2b00      	cmp	r3, #0
 8008334:	d000      	beq.n	8008338 <process_control_request+0xa4>
 8008336:	be00      	bkpt	0x0000
        return false;
 8008338:	2300      	movs	r3, #0
 800833a:	e20d      	b.n	8008758 <process_control_request+0x4c4>
      }

      switch ( p_request->bRequest )
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	785b      	ldrb	r3, [r3, #1]
 8008340:	2b09      	cmp	r3, #9
 8008342:	f200 80c0 	bhi.w	80084c6 <process_control_request+0x232>
 8008346:	a201      	add	r2, pc, #4	; (adr r2, 800834c <process_control_request+0xb8>)
 8008348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800834c:	0800848f 	.word	0x0800848f
 8008350:	0800846b 	.word	0x0800846b
 8008354:	080084c7 	.word	0x080084c7
 8008358:	08008447 	.word	0x08008447
 800835c:	080084c7 	.word	0x080084c7
 8008360:	08008375 	.word	0x08008375
 8008364:	0800842d 	.word	0x0800842d
 8008368:	080084c7 	.word	0x080084c7
 800836c:	0800838f 	.word	0x0800838f
 8008370:	080083ab 	.word	0x080083ab
      {
        case TUSB_REQ_SET_ADDRESS:
          // Depending on mcu, status phase could be sent either before or after changing device address,
          // or even require stack to not response with status at all
          // Therefore DCD must take full responsibility to response and include zlp status packet if needed.
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
 8008374:	6838      	ldr	r0, [r7, #0]
 8008376:	f000 ff17 	bl	80091a8 <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	885b      	ldrh	r3, [r3, #2]
 800837e:	b29b      	uxth	r3, r3
 8008380:	b2da      	uxtb	r2, r3
 8008382:	79fb      	ldrb	r3, [r7, #7]
 8008384:	4611      	mov	r1, r2
 8008386:	4618      	mov	r0, r3
 8008388:	f001 fb74 	bl	8009a74 <dcd_set_address>
          // skip tud_control_status()
        break;
 800838c:	e0a7      	b.n	80084de <process_control_request+0x24a>

        case TUSB_REQ_GET_CONFIGURATION:
        {
          uint8_t cfgnum = _usbd_dev.configured ? 1 : 0;
 800838e:	4b7b      	ldr	r3, [pc, #492]	; (800857c <process_control_request+0x2e8>)
 8008390:	781b      	ldrb	r3, [r3, #0]
 8008392:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008396:	b2db      	uxtb	r3, r3
 8008398:	74fb      	strb	r3, [r7, #19]
          tud_control_xfer(rhport, p_request, &cfgnum, 1);
 800839a:	f107 0213 	add.w	r2, r7, #19
 800839e:	79f8      	ldrb	r0, [r7, #7]
 80083a0:	2301      	movs	r3, #1
 80083a2:	6839      	ldr	r1, [r7, #0]
 80083a4:	f000 fe7e 	bl	80090a4 <tud_control_xfer>
        }
        break;
 80083a8:	e099      	b.n	80084de <process_control_request+0x24a>

        case TUSB_REQ_SET_CONFIGURATION:
        {
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	885b      	ldrh	r3, [r3, #2]
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

          dcd_set_config(rhport, cfg_num);
 80083b4:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80083b8:	79fb      	ldrb	r3, [r7, #7]
 80083ba:	4611      	mov	r1, r2
 80083bc:	4618      	mov	r0, r3
 80083be:	f001 fb70 	bl	8009aa2 <dcd_set_config>

          if ( !_usbd_dev.configured && cfg_num ) TU_ASSERT( process_set_config(rhport, cfg_num) );
 80083c2:	4b6e      	ldr	r3, [pc, #440]	; (800857c <process_control_request+0x2e8>)
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80083ca:	b2db      	uxtb	r3, r3
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d11b      	bne.n	8008408 <process_control_request+0x174>
 80083d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d017      	beq.n	8008408 <process_control_request+0x174>
 80083d8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80083dc:	79fb      	ldrb	r3, [r7, #7]
 80083de:	4611      	mov	r1, r2
 80083e0:	4618      	mov	r0, r3
 80083e2:	f000 f9c1 	bl	8008768 <process_set_config>
 80083e6:	4603      	mov	r3, r0
 80083e8:	f083 0301 	eor.w	r3, r3, #1
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d00a      	beq.n	8008408 <process_control_request+0x174>
 80083f2:	4b5f      	ldr	r3, [pc, #380]	; (8008570 <process_control_request+0x2dc>)
 80083f4:	627b      	str	r3, [r7, #36]	; 0x24
 80083f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f003 0301 	and.w	r3, r3, #1
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d000      	beq.n	8008404 <process_control_request+0x170>
 8008402:	be00      	bkpt	0x0000
 8008404:	2300      	movs	r3, #0
 8008406:	e1a7      	b.n	8008758 <process_control_request+0x4c4>

          _usbd_dev.configured = cfg_num ? 1 : 0;
 8008408:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800840c:	2b00      	cmp	r3, #0
 800840e:	bf14      	ite	ne
 8008410:	2301      	movne	r3, #1
 8008412:	2300      	moveq	r3, #0
 8008414:	b2d9      	uxtb	r1, r3
 8008416:	4a59      	ldr	r2, [pc, #356]	; (800857c <process_control_request+0x2e8>)
 8008418:	7813      	ldrb	r3, [r2, #0]
 800841a:	f361 0341 	bfi	r3, r1, #1, #1
 800841e:	7013      	strb	r3, [r2, #0]

          tud_control_status(rhport, p_request);
 8008420:	79fb      	ldrb	r3, [r7, #7]
 8008422:	6839      	ldr	r1, [r7, #0]
 8008424:	4618      	mov	r0, r3
 8008426:	f000 fde3 	bl	8008ff0 <tud_control_status>
        }
        break;
 800842a:	e058      	b.n	80084de <process_control_request+0x24a>

        case TUSB_REQ_GET_DESCRIPTOR:
          TU_VERIFY( process_get_descriptor(rhport, p_request) );
 800842c:	79fb      	ldrb	r3, [r7, #7]
 800842e:	6839      	ldr	r1, [r7, #0]
 8008430:	4618      	mov	r0, r3
 8008432:	f000 facb 	bl	80089cc <process_get_descriptor>
 8008436:	4603      	mov	r3, r0
 8008438:	f083 0301 	eor.w	r3, r3, #1
 800843c:	b2db      	uxtb	r3, r3
 800843e:	2b00      	cmp	r3, #0
 8008440:	d04c      	beq.n	80084dc <process_control_request+0x248>
 8008442:	2300      	movs	r3, #0
 8008444:	e188      	b.n	8008758 <process_control_request+0x4c4>
        break;

        case TUSB_REQ_SET_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	885b      	ldrh	r3, [r3, #2]
 800844a:	b29b      	uxth	r3, r3
 800844c:	2b01      	cmp	r3, #1
 800844e:	d001      	beq.n	8008454 <process_control_request+0x1c0>
 8008450:	2300      	movs	r3, #0
 8008452:	e181      	b.n	8008758 <process_control_request+0x4c4>

          // Host may enable remote wake up before suspending especially HID device
          _usbd_dev.remote_wakeup_en = true;
 8008454:	4a49      	ldr	r2, [pc, #292]	; (800857c <process_control_request+0x2e8>)
 8008456:	7813      	ldrb	r3, [r2, #0]
 8008458:	f043 0308 	orr.w	r3, r3, #8
 800845c:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 800845e:	79fb      	ldrb	r3, [r7, #7]
 8008460:	6839      	ldr	r1, [r7, #0]
 8008462:	4618      	mov	r0, r3
 8008464:	f000 fdc4 	bl	8008ff0 <tud_control_status>
        break;
 8008468:	e039      	b.n	80084de <process_control_request+0x24a>

        case TUSB_REQ_CLEAR_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	885b      	ldrh	r3, [r3, #2]
 800846e:	b29b      	uxth	r3, r3
 8008470:	2b01      	cmp	r3, #1
 8008472:	d001      	beq.n	8008478 <process_control_request+0x1e4>
 8008474:	2300      	movs	r3, #0
 8008476:	e16f      	b.n	8008758 <process_control_request+0x4c4>

          // Host may disable remote wake up after resuming
          _usbd_dev.remote_wakeup_en = false;
 8008478:	4a40      	ldr	r2, [pc, #256]	; (800857c <process_control_request+0x2e8>)
 800847a:	7813      	ldrb	r3, [r2, #0]
 800847c:	f36f 03c3 	bfc	r3, #3, #1
 8008480:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 8008482:	79fb      	ldrb	r3, [r7, #7]
 8008484:	6839      	ldr	r1, [r7, #0]
 8008486:	4618      	mov	r0, r3
 8008488:	f000 fdb2 	bl	8008ff0 <tud_control_status>
        break;
 800848c:	e027      	b.n	80084de <process_control_request+0x24a>
        case TUSB_REQ_GET_STATUS:
        {
          // Device status bit mask
          // - Bit 0: Self Powered
          // - Bit 1: Remote Wakeup enabled
          uint16_t status = (_usbd_dev.self_powered ? 1 : 0) | (_usbd_dev.remote_wakeup_en ? 2 : 0);
 800848e:	4b3b      	ldr	r3, [pc, #236]	; (800857c <process_control_request+0x2e8>)
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	095b      	lsrs	r3, r3, #5
 8008494:	b2db      	uxtb	r3, r3
 8008496:	b21b      	sxth	r3, r3
 8008498:	f003 0301 	and.w	r3, r3, #1
 800849c:	b21a      	sxth	r2, r3
 800849e:	4b37      	ldr	r3, [pc, #220]	; (800857c <process_control_request+0x2e8>)
 80084a0:	781b      	ldrb	r3, [r3, #0]
 80084a2:	089b      	lsrs	r3, r3, #2
 80084a4:	b2db      	uxtb	r3, r3
 80084a6:	b21b      	sxth	r3, r3
 80084a8:	f003 0302 	and.w	r3, r3, #2
 80084ac:	b21b      	sxth	r3, r3
 80084ae:	4313      	orrs	r3, r2
 80084b0:	b21b      	sxth	r3, r3
 80084b2:	b29b      	uxth	r3, r3
 80084b4:	823b      	strh	r3, [r7, #16]
          tud_control_xfer(rhport, p_request, &status, 2);
 80084b6:	f107 0210 	add.w	r2, r7, #16
 80084ba:	79f8      	ldrb	r0, [r7, #7]
 80084bc:	2302      	movs	r3, #2
 80084be:	6839      	ldr	r1, [r7, #0]
 80084c0:	f000 fdf0 	bl	80090a4 <tud_control_xfer>
        }
        break;
 80084c4:	e00b      	b.n	80084de <process_control_request+0x24a>

        // Unknown/Unsupported request
        default: TU_BREAKPOINT(); return false;
 80084c6:	4b2a      	ldr	r3, [pc, #168]	; (8008570 <process_control_request+0x2dc>)
 80084c8:	623b      	str	r3, [r7, #32]
 80084ca:	6a3b      	ldr	r3, [r7, #32]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f003 0301 	and.w	r3, r3, #1
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d000      	beq.n	80084d8 <process_control_request+0x244>
 80084d6:	be00      	bkpt	0x0000
 80084d8:	2300      	movs	r3, #0
 80084da:	e13d      	b.n	8008758 <process_control_request+0x4c4>
        break;
 80084dc:	bf00      	nop
      }
    break;
 80084de:	e13a      	b.n	8008756 <process_control_request+0x4c2>

    //------------- Class/Interface Specific Request -------------//
    case TUSB_REQ_RCPT_INTERFACE:
    {
      uint8_t const itf = tu_u16_low(p_request->wIndex);
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	889b      	ldrh	r3, [r3, #4]
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	4618      	mov	r0, r3
 80084e8:	f7ff fc42 	bl	8007d70 <tu_u16_low>
 80084ec:	4603      	mov	r3, r0
 80084ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 80084f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80084f6:	2b0f      	cmp	r3, #15
 80084f8:	d901      	bls.n	80084fe <process_control_request+0x26a>
 80084fa:	2300      	movs	r3, #0
 80084fc:	e12c      	b.n	8008758 <process_control_request+0x4c4>

      uint8_t const drvid = _usbd_dev.itf2drv[itf];
 80084fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008502:	4a1e      	ldr	r2, [pc, #120]	; (800857c <process_control_request+0x2e8>)
 8008504:	4413      	add	r3, r2
 8008506:	785b      	ldrb	r3, [r3, #1]
 8008508:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      TU_VERIFY(drvid < USBD_CLASS_DRIVER_COUNT);
 800850c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008510:	2b03      	cmp	r3, #3
 8008512:	d901      	bls.n	8008518 <process_control_request+0x284>
 8008514:	2300      	movs	r3, #0
 8008516:	e11f      	b.n	8008758 <process_control_request+0x4c4>

      if (p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD)
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	781b      	ldrb	r3, [r3, #0]
 800851c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008520:	b2db      	uxtb	r3, r3
 8008522:	2b00      	cmp	r3, #0
 8008524:	d141      	bne.n	80085aa <process_control_request+0x316>
      {
        switch ( p_request->bRequest )
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	785b      	ldrb	r3, [r3, #1]
 800852a:	2b0a      	cmp	r3, #10
 800852c:	d002      	beq.n	8008534 <process_control_request+0x2a0>
 800852e:	2b0b      	cmp	r3, #11
 8008530:	d00a      	beq.n	8008548 <process_control_request+0x2b4>
 8008532:	e02b      	b.n	800858c <process_control_request+0x2f8>
        {
          case TUSB_REQ_GET_INTERFACE:
          {
            // TODO not support alternate interface yet
            uint8_t alternate = 0;
 8008534:	2300      	movs	r3, #0
 8008536:	73fb      	strb	r3, [r7, #15]
            tud_control_xfer(rhport, p_request, &alternate, 1);
 8008538:	f107 020f 	add.w	r2, r7, #15
 800853c:	79f8      	ldrb	r0, [r7, #7]
 800853e:	2301      	movs	r3, #1
 8008540:	6839      	ldr	r1, [r7, #0]
 8008542:	f000 fdaf 	bl	80090a4 <tud_control_xfer>
          }
          break;
 8008546:	e041      	b.n	80085cc <process_control_request+0x338>

          case TUSB_REQ_SET_INTERFACE:
          {
            uint8_t const alternate = (uint8_t) p_request->wValue;
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	885b      	ldrh	r3, [r3, #2]
 800854c:	b29b      	uxth	r3, r3
 800854e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

            // TODO not support alternate interface yet
            TU_ASSERT(alternate == 0);
 8008552:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8008556:	2b00      	cmp	r3, #0
 8008558:	d012      	beq.n	8008580 <process_control_request+0x2ec>
 800855a:	4b05      	ldr	r3, [pc, #20]	; (8008570 <process_control_request+0x2dc>)
 800855c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800855e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f003 0301 	and.w	r3, r3, #1
 8008566:	2b00      	cmp	r3, #0
 8008568:	d000      	beq.n	800856c <process_control_request+0x2d8>
 800856a:	be00      	bkpt	0x0000
 800856c:	2300      	movs	r3, #0
 800856e:	e0f3      	b.n	8008758 <process_control_request+0x4c4>
 8008570:	e000edf0 	.word	0xe000edf0
	...
 800857c:	20002570 	.word	0x20002570
            tud_control_status(rhport, p_request);
 8008580:	79fb      	ldrb	r3, [r7, #7]
 8008582:	6839      	ldr	r1, [r7, #0]
 8008584:	4618      	mov	r0, r3
 8008586:	f000 fd33 	bl	8008ff0 <tud_control_status>
          }
          break;
 800858a:	e01f      	b.n	80085cc <process_control_request+0x338>

          default:
            // forward to class driver: "STD request to Interface"
            // GET HID REPORT DESCRIPTOR falls into this case
            TU_VERIFY(invoke_class_control(rhport, drvid, p_request));
 800858c:	f897 1032 	ldrb.w	r1, [r7, #50]	; 0x32
 8008590:	79fb      	ldrb	r3, [r7, #7]
 8008592:	683a      	ldr	r2, [r7, #0]
 8008594:	4618      	mov	r0, r3
 8008596:	f7ff fe45 	bl	8008224 <invoke_class_control>
 800859a:	4603      	mov	r3, r0
 800859c:	f083 0301 	eor.w	r3, r3, #1
 80085a0:	b2db      	uxtb	r3, r3
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d011      	beq.n	80085ca <process_control_request+0x336>
 80085a6:	2300      	movs	r3, #0
 80085a8:	e0d6      	b.n	8008758 <process_control_request+0x4c4>
          break;
        }
      }else
      {
        // forward to class driver: "non-STD request to Interface"
        TU_VERIFY(invoke_class_control(rhport, drvid, p_request));
 80085aa:	f897 1032 	ldrb.w	r1, [r7, #50]	; 0x32
 80085ae:	79fb      	ldrb	r3, [r7, #7]
 80085b0:	683a      	ldr	r2, [r7, #0]
 80085b2:	4618      	mov	r0, r3
 80085b4:	f7ff fe36 	bl	8008224 <invoke_class_control>
 80085b8:	4603      	mov	r3, r0
 80085ba:	f083 0301 	eor.w	r3, r3, #1
 80085be:	b2db      	uxtb	r3, r3
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	f000 80c7 	beq.w	8008754 <process_control_request+0x4c0>
 80085c6:	2300      	movs	r3, #0
 80085c8:	e0c6      	b.n	8008758 <process_control_request+0x4c4>
          break;
 80085ca:	bf00      	nop
      }
    }
    break;
 80085cc:	e0c2      	b.n	8008754 <process_control_request+0x4c0>

    //------------- Endpoint Request -------------//
    case TUSB_REQ_RCPT_ENDPOINT:
    {
      uint8_t const ep_addr = tu_u16_low(p_request->wIndex);
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	889b      	ldrh	r3, [r3, #4]
 80085d2:	b29b      	uxth	r3, r3
 80085d4:	4618      	mov	r0, r3
 80085d6:	f7ff fbcb 	bl	8007d70 <tu_u16_low>
 80085da:	4603      	mov	r3, r0
 80085dc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
      uint8_t const ep_num  = tu_edpt_number(ep_addr);
 80085e0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80085e4:	4618      	mov	r0, r3
 80085e6:	f7ff fb80 	bl	8007cea <tu_edpt_number>
 80085ea:	4603      	mov	r3, r0
 80085ec:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
      uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 80085f0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80085f4:	4618      	mov	r0, r3
 80085f6:	f7ff fb6b 	bl	8007cd0 <tu_edpt_dir>
 80085fa:	4603      	mov	r3, r0
 80085fc:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
 8008600:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8008604:	2b07      	cmp	r3, #7
 8008606:	d90a      	bls.n	800861e <process_control_request+0x38a>
 8008608:	4b55      	ldr	r3, [pc, #340]	; (8008760 <process_control_request+0x4cc>)
 800860a:	637b      	str	r3, [r7, #52]	; 0x34
 800860c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f003 0301 	and.w	r3, r3, #1
 8008614:	2b00      	cmp	r3, #0
 8008616:	d000      	beq.n	800861a <process_control_request+0x386>
 8008618:	be00      	bkpt	0x0000
 800861a:	2300      	movs	r3, #0
 800861c:	e09c      	b.n	8008758 <process_control_request+0x4c4>

      uint8_t const drvid = _usbd_dev.ep2drv[ep_num][ep_dir];
 800861e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8008622:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8008626:	494f      	ldr	r1, [pc, #316]	; (8008764 <process_control_request+0x4d0>)
 8008628:	0052      	lsls	r2, r2, #1
 800862a:	440a      	add	r2, r1
 800862c:	4413      	add	r3, r2
 800862e:	3311      	adds	r3, #17
 8008630:	781b      	ldrb	r3, [r3, #0]
 8008632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

      bool ret = false;
 8008636:	2300      	movs	r3, #0
 8008638:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

      // Handle STD request to endpoint
      if ( TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type )
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	781b      	ldrb	r3, [r3, #0]
 8008640:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008644:	b2db      	uxtb	r3, r3
 8008646:	2b00      	cmp	r3, #0
 8008648:	d14b      	bne.n	80086e2 <process_control_request+0x44e>
      {
        // force return true for standard request
        ret = true;
 800864a:	2301      	movs	r3, #1
 800864c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        switch ( p_request->bRequest )
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	785b      	ldrb	r3, [r3, #1]
 8008654:	2b01      	cmp	r3, #1
 8008656:	d015      	beq.n	8008684 <process_control_request+0x3f0>
 8008658:	2b03      	cmp	r3, #3
 800865a:	d025      	beq.n	80086a8 <process_control_request+0x414>
 800865c:	2b00      	cmp	r3, #0
 800865e:	d135      	bne.n	80086cc <process_control_request+0x438>
        {
          case TUSB_REQ_GET_STATUS:
          {
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
 8008660:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8008664:	79fb      	ldrb	r3, [r7, #7]
 8008666:	4611      	mov	r1, r2
 8008668:	4618      	mov	r0, r3
 800866a:	f000 fc61 	bl	8008f30 <usbd_edpt_stalled>
 800866e:	4603      	mov	r3, r0
 8008670:	b29b      	uxth	r3, r3
 8008672:	81bb      	strh	r3, [r7, #12]
            tud_control_xfer(rhport, p_request, &status, 2);
 8008674:	f107 020c 	add.w	r2, r7, #12
 8008678:	79f8      	ldrb	r0, [r7, #7]
 800867a:	2302      	movs	r3, #2
 800867c:	6839      	ldr	r1, [r7, #0]
 800867e:	f000 fd11 	bl	80090a4 <tud_control_xfer>
          }
          break;
 8008682:	e02f      	b.n	80086e4 <process_control_request+0x450>

          case TUSB_REQ_CLEAR_FEATURE:
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue )
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	885b      	ldrh	r3, [r3, #2]
 8008688:	b29b      	uxth	r3, r3
 800868a:	2b00      	cmp	r3, #0
 800868c:	d106      	bne.n	800869c <process_control_request+0x408>
            {
              usbd_edpt_clear_stall(rhport, ep_addr);
 800868e:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8008692:	79fb      	ldrb	r3, [r7, #7]
 8008694:	4611      	mov	r1, r2
 8008696:	4618      	mov	r0, r3
 8008698:	f000 fc12 	bl	8008ec0 <usbd_edpt_clear_stall>
            }
            tud_control_status(rhport, p_request);
 800869c:	79fb      	ldrb	r3, [r7, #7]
 800869e:	6839      	ldr	r1, [r7, #0]
 80086a0:	4618      	mov	r0, r3
 80086a2:	f000 fca5 	bl	8008ff0 <tud_control_status>
          break;
 80086a6:	e01d      	b.n	80086e4 <process_control_request+0x450>

          case TUSB_REQ_SET_FEATURE:
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue )
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	885b      	ldrh	r3, [r3, #2]
 80086ac:	b29b      	uxth	r3, r3
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d106      	bne.n	80086c0 <process_control_request+0x42c>
            {
              usbd_edpt_stall(rhport, ep_addr);
 80086b2:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80086b6:	79fb      	ldrb	r3, [r7, #7]
 80086b8:	4611      	mov	r1, r2
 80086ba:	4618      	mov	r0, r3
 80086bc:	f000 fbc8 	bl	8008e50 <usbd_edpt_stall>
            }
            tud_control_status(rhport, p_request);
 80086c0:	79fb      	ldrb	r3, [r7, #7]
 80086c2:	6839      	ldr	r1, [r7, #0]
 80086c4:	4618      	mov	r0, r3
 80086c6:	f000 fc93 	bl	8008ff0 <tud_control_status>
          break;
 80086ca:	e00b      	b.n	80086e4 <process_control_request+0x450>

          // Unknown/Unsupported request
          default: TU_BREAKPOINT(); return false;
 80086cc:	4b24      	ldr	r3, [pc, #144]	; (8008760 <process_control_request+0x4cc>)
 80086ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f003 0301 	and.w	r3, r3, #1
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d000      	beq.n	80086de <process_control_request+0x44a>
 80086dc:	be00      	bkpt	0x0000
 80086de:	2300      	movs	r3, #0
 80086e0:	e03a      	b.n	8008758 <process_control_request+0x4c4>
        }
      }
 80086e2:	bf00      	nop

      if (drvid < 0xFF) {
 80086e4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80086e8:	2bff      	cmp	r3, #255	; 0xff
 80086ea:	d01b      	beq.n	8008724 <process_control_request+0x490>
        TU_ASSERT(drvid < USBD_CLASS_DRIVER_COUNT);
 80086ec:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80086f0:	2b03      	cmp	r3, #3
 80086f2:	d90a      	bls.n	800870a <process_control_request+0x476>
 80086f4:	4b1a      	ldr	r3, [pc, #104]	; (8008760 <process_control_request+0x4cc>)
 80086f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80086f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f003 0301 	and.w	r3, r3, #1
 8008700:	2b00      	cmp	r3, #0
 8008702:	d000      	beq.n	8008706 <process_control_request+0x472>
 8008704:	be00      	bkpt	0x0000
 8008706:	2300      	movs	r3, #0
 8008708:	e026      	b.n	8008758 <process_control_request+0x4c4>
        // We will forward all request targeted endpoint to class drivers after
        // - For class-type requests: driver is fully responsible to reply to host
        // - For std-type requests  : driver init/re-init internal variable/buffer only, and
        //                            must not call tud_control_status(), driver's return value will have no effect.
        //                            EP state has already affected (stalled/cleared)
        if ( invoke_class_control(rhport, drvid, p_request) ) ret = true;
 800870a:	f897 1043 	ldrb.w	r1, [r7, #67]	; 0x43
 800870e:	79fb      	ldrb	r3, [r7, #7]
 8008710:	683a      	ldr	r2, [r7, #0]
 8008712:	4618      	mov	r0, r3
 8008714:	f7ff fd86 	bl	8008224 <invoke_class_control>
 8008718:	4603      	mov	r3, r0
 800871a:	2b00      	cmp	r3, #0
 800871c:	d002      	beq.n	8008724 <process_control_request+0x490>
 800871e:	2301      	movs	r3, #1
 8008720:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }

      if ( TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type )
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	781b      	ldrb	r3, [r3, #0]
 8008728:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800872c:	b2db      	uxtb	r3, r3
 800872e:	2b00      	cmp	r3, #0
 8008730:	d102      	bne.n	8008738 <process_control_request+0x4a4>
      {
        // Set complete callback = NULL since it can also stall the request.
        usbd_control_set_complete_callback(NULL);
 8008732:	2000      	movs	r0, #0
 8008734:	f000 fd2a 	bl	800918c <usbd_control_set_complete_callback>
      }

      return ret;
 8008738:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800873c:	e00c      	b.n	8008758 <process_control_request+0x4c4>
    }
    break;

    // Unknown recipient
    default: TU_BREAKPOINT(); return false;
 800873e:	4b08      	ldr	r3, [pc, #32]	; (8008760 <process_control_request+0x4cc>)
 8008740:	61bb      	str	r3, [r7, #24]
 8008742:	69bb      	ldr	r3, [r7, #24]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f003 0301 	and.w	r3, r3, #1
 800874a:	2b00      	cmp	r3, #0
 800874c:	d000      	beq.n	8008750 <process_control_request+0x4bc>
 800874e:	be00      	bkpt	0x0000
 8008750:	2300      	movs	r3, #0
 8008752:	e001      	b.n	8008758 <process_control_request+0x4c4>
    break;
 8008754:	bf00      	nop
  }

  return true;
 8008756:	2301      	movs	r3, #1
}
 8008758:	4618      	mov	r0, r3
 800875a:	3748      	adds	r7, #72	; 0x48
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}
 8008760:	e000edf0 	.word	0xe000edf0
 8008764:	20002570 	.word	0x20002570

08008768 <process_set_config>:

// Process Set Configure Request
// This function parse configuration descriptor & open drivers accordingly
static bool process_set_config(uint8_t rhport, uint8_t cfg_num)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b08e      	sub	sp, #56	; 0x38
 800876c:	af00      	add	r7, sp, #0
 800876e:	4603      	mov	r3, r0
 8008770:	460a      	mov	r2, r1
 8008772:	71fb      	strb	r3, [r7, #7]
 8008774:	4613      	mov	r3, r2
 8008776:	71bb      	strb	r3, [r7, #6]
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1); // index is cfg_num-1
 8008778:	79bb      	ldrb	r3, [r7, #6]
 800877a:	3b01      	subs	r3, #1
 800877c:	b2db      	uxtb	r3, r3
 800877e:	4618      	mov	r0, r3
 8008780:	f7f8 fe20 	bl	80013c4 <tud_descriptor_configuration_cb>
 8008784:	62f8      	str	r0, [r7, #44]	; 0x2c
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
 8008786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008788:	2b00      	cmp	r3, #0
 800878a:	d003      	beq.n	8008794 <process_set_config+0x2c>
 800878c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800878e:	785b      	ldrb	r3, [r3, #1]
 8008790:	2b02      	cmp	r3, #2
 8008792:	d00a      	beq.n	80087aa <process_set_config+0x42>
 8008794:	4b6a      	ldr	r3, [pc, #424]	; (8008940 <process_set_config+0x1d8>)
 8008796:	60fb      	str	r3, [r7, #12]
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f003 0301 	and.w	r3, r3, #1
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d000      	beq.n	80087a6 <process_set_config+0x3e>
 80087a4:	be00      	bkpt	0x0000
 80087a6:	2300      	movs	r3, #0
 80087a8:	e0c5      	b.n	8008936 <process_set_config+0x1ce>

  // Parse configuration descriptor
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1 : 0;
 80087aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ac:	79db      	ldrb	r3, [r3, #7]
 80087ae:	115b      	asrs	r3, r3, #5
 80087b0:	f003 0301 	and.w	r3, r3, #1
 80087b4:	b2d9      	uxtb	r1, r3
 80087b6:	4a63      	ldr	r2, [pc, #396]	; (8008944 <process_set_config+0x1dc>)
 80087b8:	7813      	ldrb	r3, [r2, #0]
 80087ba:	f361 1304 	bfi	r3, r1, #4, #1
 80087be:	7013      	strb	r3, [r2, #0]
  _usbd_dev.self_powered = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED) ? 1 : 0;
 80087c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c2:	79db      	ldrb	r3, [r3, #7]
 80087c4:	119b      	asrs	r3, r3, #6
 80087c6:	f003 0301 	and.w	r3, r3, #1
 80087ca:	b2d9      	uxtb	r1, r3
 80087cc:	4a5d      	ldr	r2, [pc, #372]	; (8008944 <process_set_config+0x1dc>)
 80087ce:	7813      	ldrb	r3, [r2, #0]
 80087d0:	f361 1345 	bfi	r3, r1, #5, #1
 80087d4:	7013      	strb	r3, [r2, #0]

  // Parse interface descriptor
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
 80087d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087d8:	3309      	adds	r3, #9
 80087da:	637b      	str	r3, [r7, #52]	; 0x34
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + desc_cfg->wTotalLength;
 80087dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087de:	885b      	ldrh	r3, [r3, #2]
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	461a      	mov	r2, r3
 80087e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087e6:	4413      	add	r3, r2
 80087e8:	62bb      	str	r3, [r7, #40]	; 0x28

  while( p_desc < desc_end )
 80087ea:	e099      	b.n	8008920 <process_set_config+0x1b8>
  {
    // Each interface always starts with Interface or Association descriptor
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
 80087ec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80087ee:	f7ff fa9a 	bl	8007d26 <tu_desc_type>
 80087f2:	4603      	mov	r3, r0
 80087f4:	2b0b      	cmp	r3, #11
 80087f6:	d104      	bne.n	8008802 <process_set_config+0x9a>
    {
      p_desc = tu_desc_next(p_desc); // ignore Interface Association
 80087f8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80087fa:	f7ff fa84 	bl	8007d06 <tu_desc_next>
 80087fe:	6378      	str	r0, [r7, #52]	; 0x34
 8008800:	e08e      	b.n	8008920 <process_set_config+0x1b8>
    }else
    {
      TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
 8008802:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008804:	f7ff fa8f 	bl	8007d26 <tu_desc_type>
 8008808:	4603      	mov	r3, r0
 800880a:	2b04      	cmp	r3, #4
 800880c:	d00a      	beq.n	8008824 <process_set_config+0xbc>
 800880e:	4b4c      	ldr	r3, [pc, #304]	; (8008940 <process_set_config+0x1d8>)
 8008810:	613b      	str	r3, [r7, #16]
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f003 0301 	and.w	r3, r3, #1
 800881a:	2b00      	cmp	r3, #0
 800881c:	d000      	beq.n	8008820 <process_set_config+0xb8>
 800881e:	be00      	bkpt	0x0000
 8008820:	2300      	movs	r3, #0
 8008822:	e088      	b.n	8008936 <process_set_config+0x1ce>

      tusb_desc_interface_t* desc_itf = (tusb_desc_interface_t*) p_desc;
 8008824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008826:	627b      	str	r3, [r7, #36]	; 0x24

      // Check if class is supported
      uint8_t drv_id;
      for (drv_id = 0; drv_id < USBD_CLASS_DRIVER_COUNT; drv_id++)
 8008828:	2300      	movs	r3, #0
 800882a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800882e:	e00e      	b.n	800884e <process_set_config+0xe6>
      {
        if ( _usbd_driver[drv_id].class_code == desc_itf->bInterfaceClass ) break;
 8008830:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008834:	4a44      	ldr	r2, [pc, #272]	; (8008948 <process_set_config+0x1e0>)
 8008836:	015b      	lsls	r3, r3, #5
 8008838:	4413      	add	r3, r2
 800883a:	781a      	ldrb	r2, [r3, #0]
 800883c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800883e:	795b      	ldrb	r3, [r3, #5]
 8008840:	429a      	cmp	r2, r3
 8008842:	d009      	beq.n	8008858 <process_set_config+0xf0>
      for (drv_id = 0; drv_id < USBD_CLASS_DRIVER_COUNT; drv_id++)
 8008844:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008848:	3301      	adds	r3, #1
 800884a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800884e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008852:	2b03      	cmp	r3, #3
 8008854:	d9ec      	bls.n	8008830 <process_set_config+0xc8>
 8008856:	e000      	b.n	800885a <process_set_config+0xf2>
        if ( _usbd_driver[drv_id].class_code == desc_itf->bInterfaceClass ) break;
 8008858:	bf00      	nop
      }
      TU_ASSERT( drv_id < USBD_CLASS_DRIVER_COUNT );
 800885a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800885e:	2b03      	cmp	r3, #3
 8008860:	d90a      	bls.n	8008878 <process_set_config+0x110>
 8008862:	4b37      	ldr	r3, [pc, #220]	; (8008940 <process_set_config+0x1d8>)
 8008864:	617b      	str	r3, [r7, #20]
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f003 0301 	and.w	r3, r3, #1
 800886e:	2b00      	cmp	r3, #0
 8008870:	d000      	beq.n	8008874 <process_set_config+0x10c>
 8008872:	be00      	bkpt	0x0000
 8008874:	2300      	movs	r3, #0
 8008876:	e05e      	b.n	8008936 <process_set_config+0x1ce>

      // Interface number must not be used already TODO alternate interface
      TU_ASSERT( DRVID_INVALID == _usbd_dev.itf2drv[desc_itf->bInterfaceNumber] );
 8008878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800887a:	789b      	ldrb	r3, [r3, #2]
 800887c:	461a      	mov	r2, r3
 800887e:	4b31      	ldr	r3, [pc, #196]	; (8008944 <process_set_config+0x1dc>)
 8008880:	4413      	add	r3, r2
 8008882:	785b      	ldrb	r3, [r3, #1]
 8008884:	2bff      	cmp	r3, #255	; 0xff
 8008886:	d00a      	beq.n	800889e <process_set_config+0x136>
 8008888:	4b2d      	ldr	r3, [pc, #180]	; (8008940 <process_set_config+0x1d8>)
 800888a:	61bb      	str	r3, [r7, #24]
 800888c:	69bb      	ldr	r3, [r7, #24]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f003 0301 	and.w	r3, r3, #1
 8008894:	2b00      	cmp	r3, #0
 8008896:	d000      	beq.n	800889a <process_set_config+0x132>
 8008898:	be00      	bkpt	0x0000
 800889a:	2300      	movs	r3, #0
 800889c:	e04b      	b.n	8008936 <process_set_config+0x1ce>
      _usbd_dev.itf2drv[desc_itf->bInterfaceNumber] = drv_id;
 800889e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a0:	789b      	ldrb	r3, [r3, #2]
 80088a2:	461a      	mov	r2, r3
 80088a4:	4b27      	ldr	r3, [pc, #156]	; (8008944 <process_set_config+0x1dc>)
 80088a6:	4413      	add	r3, r2
 80088a8:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80088ac:	705a      	strb	r2, [r3, #1]

      uint16_t itf_len=0;
 80088ae:	2300      	movs	r3, #0
 80088b0:	817b      	strh	r3, [r7, #10]
      TU_LOG2("  %s open\r\n", _usbd_driver_str[drv_id]);
      TU_ASSERT( _usbd_driver[drv_id].open(rhport, desc_itf, &itf_len) );
 80088b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80088b6:	4a24      	ldr	r2, [pc, #144]	; (8008948 <process_set_config+0x1e0>)
 80088b8:	015b      	lsls	r3, r3, #5
 80088ba:	4413      	add	r3, r2
 80088bc:	330c      	adds	r3, #12
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f107 020a 	add.w	r2, r7, #10
 80088c4:	79f8      	ldrb	r0, [r7, #7]
 80088c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80088c8:	4798      	blx	r3
 80088ca:	4603      	mov	r3, r0
 80088cc:	f083 0301 	eor.w	r3, r3, #1
 80088d0:	b2db      	uxtb	r3, r3
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d00a      	beq.n	80088ec <process_set_config+0x184>
 80088d6:	4b1a      	ldr	r3, [pc, #104]	; (8008940 <process_set_config+0x1d8>)
 80088d8:	61fb      	str	r3, [r7, #28]
 80088da:	69fb      	ldr	r3, [r7, #28]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f003 0301 	and.w	r3, r3, #1
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d000      	beq.n	80088e8 <process_set_config+0x180>
 80088e6:	be00      	bkpt	0x0000
 80088e8:	2300      	movs	r3, #0
 80088ea:	e024      	b.n	8008936 <process_set_config+0x1ce>
      TU_ASSERT( itf_len >= sizeof(tusb_desc_interface_t) );
 80088ec:	897b      	ldrh	r3, [r7, #10]
 80088ee:	2b08      	cmp	r3, #8
 80088f0:	d80a      	bhi.n	8008908 <process_set_config+0x1a0>
 80088f2:	4b13      	ldr	r3, [pc, #76]	; (8008940 <process_set_config+0x1d8>)
 80088f4:	623b      	str	r3, [r7, #32]
 80088f6:	6a3b      	ldr	r3, [r7, #32]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f003 0301 	and.w	r3, r3, #1
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d000      	beq.n	8008904 <process_set_config+0x19c>
 8008902:	be00      	bkpt	0x0000
 8008904:	2300      	movs	r3, #0
 8008906:	e016      	b.n	8008936 <process_set_config+0x1ce>

      mark_interface_endpoint(_usbd_dev.ep2drv, p_desc, itf_len, drv_id);
 8008908:	897a      	ldrh	r2, [r7, #10]
 800890a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800890e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008910:	480e      	ldr	r0, [pc, #56]	; (800894c <process_set_config+0x1e4>)
 8008912:	f000 f81f 	bl	8008954 <mark_interface_endpoint>

      p_desc += itf_len; // next interface
 8008916:	897b      	ldrh	r3, [r7, #10]
 8008918:	461a      	mov	r2, r3
 800891a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800891c:	4413      	add	r3, r2
 800891e:	637b      	str	r3, [r7, #52]	; 0x34
  while( p_desc < desc_end )
 8008920:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008924:	429a      	cmp	r2, r3
 8008926:	f4ff af61 	bcc.w	80087ec <process_set_config+0x84>
    }
  }

  // invoke callback
  if (tud_mount_cb) tud_mount_cb();
 800892a:	4b09      	ldr	r3, [pc, #36]	; (8008950 <process_set_config+0x1e8>)
 800892c:	2b00      	cmp	r3, #0
 800892e:	d001      	beq.n	8008934 <process_set_config+0x1cc>
 8008930:	f7f8 f8b4 	bl	8000a9c <tud_mount_cb>

  return true;
 8008934:	2301      	movs	r3, #1
}
 8008936:	4618      	mov	r0, r3
 8008938:	3738      	adds	r7, #56	; 0x38
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}
 800893e:	bf00      	nop
 8008940:	e000edf0 	.word	0xe000edf0
 8008944:	20002570 	.word	0x20002570
 8008948:	0800a870 	.word	0x0800a870
 800894c:	20002581 	.word	0x20002581
 8008950:	08000a9d 	.word	0x08000a9d

08008954 <mark_interface_endpoint>:

// Helper marking endpoint of interface belongs to class driver
static void mark_interface_endpoint(uint8_t ep2drv[8][2], uint8_t const* p_desc, uint16_t desc_len, uint8_t driver_id)
{
 8008954:	b590      	push	{r4, r7, lr}
 8008956:	b087      	sub	sp, #28
 8008958:	af00      	add	r7, sp, #0
 800895a:	60f8      	str	r0, [r7, #12]
 800895c:	60b9      	str	r1, [r7, #8]
 800895e:	4611      	mov	r1, r2
 8008960:	461a      	mov	r2, r3
 8008962:	460b      	mov	r3, r1
 8008964:	80fb      	strh	r3, [r7, #6]
 8008966:	4613      	mov	r3, r2
 8008968:	717b      	strb	r3, [r7, #5]
  uint16_t len = 0;
 800896a:	2300      	movs	r3, #0
 800896c:	82fb      	strh	r3, [r7, #22]

  while( len < desc_len )
 800896e:	e024      	b.n	80089ba <mark_interface_endpoint+0x66>
  {
    if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 8008970:	68b8      	ldr	r0, [r7, #8]
 8008972:	f7ff f9d8 	bl	8007d26 <tu_desc_type>
 8008976:	4603      	mov	r3, r0
 8008978:	2b05      	cmp	r3, #5
 800897a:	d112      	bne.n	80089a2 <mark_interface_endpoint+0x4e>
    {
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	789b      	ldrb	r3, [r3, #2]
 8008980:	757b      	strb	r3, [r7, #21]

      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
 8008982:	7d7b      	ldrb	r3, [r7, #21]
 8008984:	4618      	mov	r0, r3
 8008986:	f7ff f9b0 	bl	8007cea <tu_edpt_number>
 800898a:	4603      	mov	r3, r0
 800898c:	005b      	lsls	r3, r3, #1
 800898e:	68fa      	ldr	r2, [r7, #12]
 8008990:	18d4      	adds	r4, r2, r3
 8008992:	7d7b      	ldrb	r3, [r7, #21]
 8008994:	4618      	mov	r0, r3
 8008996:	f7ff f99b 	bl	8007cd0 <tu_edpt_dir>
 800899a:	4603      	mov	r3, r0
 800899c:	461a      	mov	r2, r3
 800899e:	797b      	ldrb	r3, [r7, #5]
 80089a0:	54a3      	strb	r3, [r4, r2]
    }

    len   = (uint16_t)(len + tu_desc_len(p_desc));
 80089a2:	68b8      	ldr	r0, [r7, #8]
 80089a4:	f7ff f9cb 	bl	8007d3e <tu_desc_len>
 80089a8:	4603      	mov	r3, r0
 80089aa:	b29a      	uxth	r2, r3
 80089ac:	8afb      	ldrh	r3, [r7, #22]
 80089ae:	4413      	add	r3, r2
 80089b0:	82fb      	strh	r3, [r7, #22]
    p_desc = tu_desc_next(p_desc);
 80089b2:	68b8      	ldr	r0, [r7, #8]
 80089b4:	f7ff f9a7 	bl	8007d06 <tu_desc_next>
 80089b8:	60b8      	str	r0, [r7, #8]
  while( len < desc_len )
 80089ba:	8afa      	ldrh	r2, [r7, #22]
 80089bc:	88fb      	ldrh	r3, [r7, #6]
 80089be:	429a      	cmp	r2, r3
 80089c0:	d3d6      	bcc.n	8008970 <mark_interface_endpoint+0x1c>
  }
}
 80089c2:	bf00      	nop
 80089c4:	371c      	adds	r7, #28
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd90      	pop	{r4, r7, pc}
	...

080089cc <process_get_descriptor>:

// return descriptor's buffer and update desc_len
static bool process_get_descriptor(uint8_t rhport, tusb_control_request_t const * p_request)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b08a      	sub	sp, #40	; 0x28
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	4603      	mov	r3, r0
 80089d4:	6039      	str	r1, [r7, #0]
 80089d6:	71fb      	strb	r3, [r7, #7]
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	885b      	ldrh	r3, [r3, #2]
 80089dc:	b29b      	uxth	r3, r3
 80089de:	4618      	mov	r0, r3
 80089e0:	f7ff f9b8 	bl	8007d54 <tu_u16_high>
 80089e4:	4603      	mov	r3, r0
 80089e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t const desc_index = tu_u16_low( p_request->wValue );
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	885b      	ldrh	r3, [r3, #2]
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	4618      	mov	r0, r3
 80089f2:	f7ff f9bd 	bl	8007d70 <tu_u16_low>
 80089f6:	4603      	mov	r3, r0
 80089f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  switch(desc_type)
 80089fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a00:	3b01      	subs	r3, #1
 8008a02:	2b0e      	cmp	r3, #14
 8008a04:	f200 8088 	bhi.w	8008b18 <process_get_descriptor+0x14c>
 8008a08:	a201      	add	r2, pc, #4	; (adr r2, 8008a10 <process_get_descriptor+0x44>)
 8008a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a0e:	bf00      	nop
 8008a10:	08008a4d 	.word	0x08008a4d
 8008a14:	08008a8b 	.word	0x08008a8b
 8008a18:	08008acd 	.word	0x08008acd
 8008a1c:	08008b19 	.word	0x08008b19
 8008a20:	08008b19 	.word	0x08008b19
 8008a24:	08008b15 	.word	0x08008b15
 8008a28:	08008b19 	.word	0x08008b19
 8008a2c:	08008b19 	.word	0x08008b19
 8008a30:	08008b19 	.word	0x08008b19
 8008a34:	08008b19 	.word	0x08008b19
 8008a38:	08008b19 	.word	0x08008b19
 8008a3c:	08008b19 	.word	0x08008b19
 8008a40:	08008b19 	.word	0x08008b19
 8008a44:	08008b19 	.word	0x08008b19
 8008a48:	08008a61 	.word	0x08008a61
  {
    case TUSB_DESC_DEVICE:
      return tud_control_xfer(rhport, p_request, (void*) tud_descriptor_device_cb(), sizeof(tusb_desc_device_t));
 8008a4c:	f7f8 fca6 	bl	800139c <tud_descriptor_device_cb>
 8008a50:	4602      	mov	r2, r0
 8008a52:	79f8      	ldrb	r0, [r7, #7]
 8008a54:	2312      	movs	r3, #18
 8008a56:	6839      	ldr	r1, [r7, #0]
 8008a58:	f000 fb24 	bl	80090a4 <tud_control_xfer>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	e05c      	b.n	8008b1a <process_get_descriptor+0x14e>
    break;

    case TUSB_DESC_BOS:
    {
      // requested by host if USB > 2.0 ( i.e 2.1 or 3.x )
      if (!tud_descriptor_bos_cb) return false;
 8008a60:	4b30      	ldr	r3, [pc, #192]	; (8008b24 <process_get_descriptor+0x158>)
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d101      	bne.n	8008a6a <process_get_descriptor+0x9e>
 8008a66:	2300      	movs	r3, #0
 8008a68:	e057      	b.n	8008b1a <process_get_descriptor+0x14e>

      tusb_desc_bos_t const* desc_bos = (tusb_desc_bos_t const*) tud_descriptor_bos_cb();
 8008a6a:	f3af 8000 	nop.w
 8008a6e:	6238      	str	r0, [r7, #32]
      uint16_t total_len;
      memcpy(&total_len, &desc_bos->wTotalLength, 2); // possibly mis-aligned memory
 8008a70:	6a3b      	ldr	r3, [r7, #32]
 8008a72:	3302      	adds	r3, #2
 8008a74:	881b      	ldrh	r3, [r3, #0]
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	81fb      	strh	r3, [r7, #14]

      return tud_control_xfer(rhport, p_request, (void*) desc_bos, total_len);
 8008a7a:	89fb      	ldrh	r3, [r7, #14]
 8008a7c:	79f8      	ldrb	r0, [r7, #7]
 8008a7e:	6a3a      	ldr	r2, [r7, #32]
 8008a80:	6839      	ldr	r1, [r7, #0]
 8008a82:	f000 fb0f 	bl	80090a4 <tud_control_xfer>
 8008a86:	4603      	mov	r3, r0
 8008a88:	e047      	b.n	8008b1a <process_get_descriptor+0x14e>
    }
    break;

    case TUSB_DESC_CONFIGURATION:
    {
      tusb_desc_configuration_t const* desc_config = (tusb_desc_configuration_t const*) tud_descriptor_configuration_cb(desc_index);
 8008a8a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f7f8 fc98 	bl	80013c4 <tud_descriptor_configuration_cb>
 8008a94:	6178      	str	r0, [r7, #20]
      TU_ASSERT(desc_config);
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d10a      	bne.n	8008ab2 <process_get_descriptor+0xe6>
 8008a9c:	4b22      	ldr	r3, [pc, #136]	; (8008b28 <process_get_descriptor+0x15c>)
 8008a9e:	613b      	str	r3, [r7, #16]
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f003 0301 	and.w	r3, r3, #1
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d000      	beq.n	8008aae <process_get_descriptor+0xe2>
 8008aac:	be00      	bkpt	0x0000
 8008aae:	2300      	movs	r3, #0
 8008ab0:	e033      	b.n	8008b1a <process_get_descriptor+0x14e>

      uint16_t total_len;
      memcpy(&total_len, &desc_config->wTotalLength, 2); // possibly mis-aligned memory
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	3302      	adds	r3, #2
 8008ab6:	881b      	ldrh	r3, [r3, #0]
 8008ab8:	b29b      	uxth	r3, r3
 8008aba:	81bb      	strh	r3, [r7, #12]

      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
 8008abc:	89bb      	ldrh	r3, [r7, #12]
 8008abe:	79f8      	ldrb	r0, [r7, #7]
 8008ac0:	697a      	ldr	r2, [r7, #20]
 8008ac2:	6839      	ldr	r1, [r7, #0]
 8008ac4:	f000 faee 	bl	80090a4 <tud_control_xfer>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	e026      	b.n	8008b1a <process_get_descriptor+0x14e>
    }
    break;

    case TUSB_DESC_STRING:
      // String Descriptor always uses the desc set from user
      if ( desc_index == 0xEE )
 8008acc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008ad0:	2bee      	cmp	r3, #238	; 0xee
 8008ad2:	d101      	bne.n	8008ad8 <process_get_descriptor+0x10c>
      {
        // The 0xEE index string is a Microsoft OS Descriptors.
        // https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/microsoft-defined-usb-descriptors
        return false;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	e020      	b.n	8008b1a <process_get_descriptor+0x14e>
      }else
      {
        uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index);
 8008ad8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008adc:	4618      	mov	r0, r3
 8008ade:	f7f8 fc7f 	bl	80013e0 <tud_descriptor_string_cb>
 8008ae2:	61f8      	str	r0, [r7, #28]
        TU_ASSERT(desc_str);
 8008ae4:	69fb      	ldr	r3, [r7, #28]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d10a      	bne.n	8008b00 <process_get_descriptor+0x134>
 8008aea:	4b0f      	ldr	r3, [pc, #60]	; (8008b28 <process_get_descriptor+0x15c>)
 8008aec:	61bb      	str	r3, [r7, #24]
 8008aee:	69bb      	ldr	r3, [r7, #24]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f003 0301 	and.w	r3, r3, #1
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d000      	beq.n	8008afc <process_get_descriptor+0x130>
 8008afa:	be00      	bkpt	0x0000
 8008afc:	2300      	movs	r3, #0
 8008afe:	e00c      	b.n	8008b1a <process_get_descriptor+0x14e>

        // first byte of descriptor is its size
        return tud_control_xfer(rhport, p_request, (void*) desc_str, desc_str[0]);
 8008b00:	69fb      	ldr	r3, [r7, #28]
 8008b02:	781b      	ldrb	r3, [r3, #0]
 8008b04:	b29b      	uxth	r3, r3
 8008b06:	79f8      	ldrb	r0, [r7, #7]
 8008b08:	69fa      	ldr	r2, [r7, #28]
 8008b0a:	6839      	ldr	r1, [r7, #0]
 8008b0c:	f000 faca 	bl	80090a4 <tud_control_xfer>
 8008b10:	4603      	mov	r3, r0
 8008b12:	e002      	b.n	8008b1a <process_get_descriptor+0x14e>
    break;

    case TUSB_DESC_DEVICE_QUALIFIER:
      // TODO If not highspeed capable stall this request otherwise
      // return the descriptor that could work in highspeed
      return false;
 8008b14:	2300      	movs	r3, #0
 8008b16:	e000      	b.n	8008b1a <process_get_descriptor+0x14e>
    break;

    default: return false;
 8008b18:	2300      	movs	r3, #0
  }

  return true;
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3728      	adds	r7, #40	; 0x28
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	bf00      	nop
 8008b24:	00000000 	.word	0x00000000
 8008b28:	e000edf0 	.word	0xe000edf0

08008b2c <dcd_event_handler>:

//--------------------------------------------------------------------+
// DCD Event Handler
//--------------------------------------------------------------------+
void dcd_event_handler(dcd_event_t const * event, bool in_isr)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b082      	sub	sp, #8
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	460b      	mov	r3, r1
 8008b36:	70fb      	strb	r3, [r7, #3]
  switch (event->event_id)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	785b      	ldrb	r3, [r3, #1]
 8008b3c:	3b02      	subs	r3, #2
 8008b3e:	2b03      	cmp	r3, #3
 8008b40:	d849      	bhi.n	8008bd6 <dcd_event_handler+0xaa>
 8008b42:	a201      	add	r2, pc, #4	; (adr r2, 8008b48 <dcd_event_handler+0x1c>)
 8008b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b48:	08008b59 	.word	0x08008b59
 8008b4c:	08008be9 	.word	0x08008be9
 8008b50:	08008b87 	.word	0x08008b87
 8008b54:	08008baf 	.word	0x08008baf
  {
    case DCD_EVENT_UNPLUGGED:
      _usbd_dev.connected  = 0;
 8008b58:	4a27      	ldr	r2, [pc, #156]	; (8008bf8 <dcd_event_handler+0xcc>)
 8008b5a:	7813      	ldrb	r3, [r2, #0]
 8008b5c:	f36f 0300 	bfc	r3, #0, #1
 8008b60:	7013      	strb	r3, [r2, #0]
      _usbd_dev.configured = 0;
 8008b62:	4a25      	ldr	r2, [pc, #148]	; (8008bf8 <dcd_event_handler+0xcc>)
 8008b64:	7813      	ldrb	r3, [r2, #0]
 8008b66:	f36f 0341 	bfc	r3, #1, #1
 8008b6a:	7013      	strb	r3, [r2, #0]
      _usbd_dev.suspended  = 0;
 8008b6c:	4a22      	ldr	r2, [pc, #136]	; (8008bf8 <dcd_event_handler+0xcc>)
 8008b6e:	7813      	ldrb	r3, [r2, #0]
 8008b70:	f36f 0382 	bfc	r3, #2, #1
 8008b74:	7013      	strb	r3, [r2, #0]
      osal_queue_send(_usbd_q, event, in_isr);
 8008b76:	4b21      	ldr	r3, [pc, #132]	; (8008bfc <dcd_event_handler+0xd0>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	78fa      	ldrb	r2, [r7, #3]
 8008b7c:	6879      	ldr	r1, [r7, #4]
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f7ff f946 	bl	8007e10 <osal_queue_send>
    break;
 8008b84:	e035      	b.n	8008bf2 <dcd_event_handler+0xc6>

    case DCD_EVENT_SUSPEND:
      // NOTE: When plugging/unplugging device, the D+/D- state are unstable and can accidentally meet the
      // SUSPEND condition ( Idle for 3ms ). Some MCUs such as SAMD doesn't distinguish suspend vs disconnect as well.
      // We will skip handling SUSPEND/RESUME event if not currently connected
      if ( _usbd_dev.connected )
 8008b86:	4b1c      	ldr	r3, [pc, #112]	; (8008bf8 <dcd_event_handler+0xcc>)
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008b8e:	b2db      	uxtb	r3, r3
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d02b      	beq.n	8008bec <dcd_event_handler+0xc0>
      {
        _usbd_dev.suspended = 1;
 8008b94:	4a18      	ldr	r2, [pc, #96]	; (8008bf8 <dcd_event_handler+0xcc>)
 8008b96:	7813      	ldrb	r3, [r2, #0]
 8008b98:	f043 0304 	orr.w	r3, r3, #4
 8008b9c:	7013      	strb	r3, [r2, #0]
        osal_queue_send(_usbd_q, event, in_isr);
 8008b9e:	4b17      	ldr	r3, [pc, #92]	; (8008bfc <dcd_event_handler+0xd0>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	78fa      	ldrb	r2, [r7, #3]
 8008ba4:	6879      	ldr	r1, [r7, #4]
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f7ff f932 	bl	8007e10 <osal_queue_send>
      }
    break;
 8008bac:	e01e      	b.n	8008bec <dcd_event_handler+0xc0>

    case DCD_EVENT_RESUME:
      // skip event if not connected (especially required for SAMD)
      if ( _usbd_dev.connected )
 8008bae:	4b12      	ldr	r3, [pc, #72]	; (8008bf8 <dcd_event_handler+0xcc>)
 8008bb0:	781b      	ldrb	r3, [r3, #0]
 8008bb2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d019      	beq.n	8008bf0 <dcd_event_handler+0xc4>
      {
        _usbd_dev.suspended = 0;
 8008bbc:	4a0e      	ldr	r2, [pc, #56]	; (8008bf8 <dcd_event_handler+0xcc>)
 8008bbe:	7813      	ldrb	r3, [r2, #0]
 8008bc0:	f36f 0382 	bfc	r3, #2, #1
 8008bc4:	7013      	strb	r3, [r2, #0]
        osal_queue_send(_usbd_q, event, in_isr);
 8008bc6:	4b0d      	ldr	r3, [pc, #52]	; (8008bfc <dcd_event_handler+0xd0>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	78fa      	ldrb	r2, [r7, #3]
 8008bcc:	6879      	ldr	r1, [r7, #4]
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f7ff f91e 	bl	8007e10 <osal_queue_send>
      }
    break;
 8008bd4:	e00c      	b.n	8008bf0 <dcd_event_handler+0xc4>

    default:
      osal_queue_send(_usbd_q, event, in_isr);
 8008bd6:	4b09      	ldr	r3, [pc, #36]	; (8008bfc <dcd_event_handler+0xd0>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	78fa      	ldrb	r2, [r7, #3]
 8008bdc:	6879      	ldr	r1, [r7, #4]
 8008bde:	4618      	mov	r0, r3
 8008be0:	f7ff f916 	bl	8007e10 <osal_queue_send>
    break;
 8008be4:	bf00      	nop
 8008be6:	e004      	b.n	8008bf2 <dcd_event_handler+0xc6>
      return;   // skip SOF event for now
 8008be8:	bf00      	nop
 8008bea:	e002      	b.n	8008bf2 <dcd_event_handler+0xc6>
    break;
 8008bec:	bf00      	nop
 8008bee:	e000      	b.n	8008bf2 <dcd_event_handler+0xc6>
    break;
 8008bf0:	bf00      	nop
  }
}
 8008bf2:	3708      	adds	r7, #8
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}
 8008bf8:	20002570 	.word	0x20002570
 8008bfc:	200025a4 	.word	0x200025a4

08008c00 <dcd_event_bus_signal>:

void dcd_event_bus_signal (uint8_t rhport, dcd_eventid_t eid, bool in_isr)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b086      	sub	sp, #24
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	4603      	mov	r3, r0
 8008c08:	71fb      	strb	r3, [r7, #7]
 8008c0a:	460b      	mov	r3, r1
 8008c0c:	71bb      	strb	r3, [r7, #6]
 8008c0e:	4613      	mov	r3, r2
 8008c10:	717b      	strb	r3, [r7, #5]
  dcd_event_t event = { .rhport = rhport, .event_id = eid, };
 8008c12:	f107 030c 	add.w	r3, r7, #12
 8008c16:	2200      	movs	r2, #0
 8008c18:	601a      	str	r2, [r3, #0]
 8008c1a:	605a      	str	r2, [r3, #4]
 8008c1c:	609a      	str	r2, [r3, #8]
 8008c1e:	79fb      	ldrb	r3, [r7, #7]
 8008c20:	733b      	strb	r3, [r7, #12]
 8008c22:	79bb      	ldrb	r3, [r7, #6]
 8008c24:	737b      	strb	r3, [r7, #13]
  dcd_event_handler(&event, in_isr);
 8008c26:	797a      	ldrb	r2, [r7, #5]
 8008c28:	f107 030c 	add.w	r3, r7, #12
 8008c2c:	4611      	mov	r1, r2
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f7ff ff7c 	bl	8008b2c <dcd_event_handler>
}
 8008c34:	bf00      	nop
 8008c36:	3718      	adds	r7, #24
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <dcd_event_setup_received>:

void dcd_event_setup_received(uint8_t rhport, uint8_t const * setup, bool in_isr)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b086      	sub	sp, #24
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	4603      	mov	r3, r0
 8008c44:	6039      	str	r1, [r7, #0]
 8008c46:	71fb      	strb	r3, [r7, #7]
 8008c48:	4613      	mov	r3, r2
 8008c4a:	71bb      	strb	r3, [r7, #6]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
 8008c4c:	f107 030c 	add.w	r3, r7, #12
 8008c50:	2200      	movs	r2, #0
 8008c52:	601a      	str	r2, [r3, #0]
 8008c54:	605a      	str	r2, [r3, #4]
 8008c56:	609a      	str	r2, [r3, #8]
 8008c58:	79fb      	ldrb	r3, [r7, #7]
 8008c5a:	733b      	strb	r3, [r7, #12]
 8008c5c:	2306      	movs	r3, #6
 8008c5e:	737b      	strb	r3, [r7, #13]
  memcpy(&event.setup_received, setup, 8);
 8008c60:	683a      	ldr	r2, [r7, #0]
 8008c62:	f107 0310 	add.w	r3, r7, #16
 8008c66:	6810      	ldr	r0, [r2, #0]
 8008c68:	6851      	ldr	r1, [r2, #4]
 8008c6a:	c303      	stmia	r3!, {r0, r1}

  dcd_event_handler(&event, in_isr);
 8008c6c:	79ba      	ldrb	r2, [r7, #6]
 8008c6e:	f107 030c 	add.w	r3, r7, #12
 8008c72:	4611      	mov	r1, r2
 8008c74:	4618      	mov	r0, r3
 8008c76:	f7ff ff59 	bl	8008b2c <dcd_event_handler>
}
 8008c7a:	bf00      	nop
 8008c7c:	3718      	adds	r7, #24
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}

08008c82 <dcd_event_xfer_complete>:

void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr)
{
 8008c82:	b580      	push	{r7, lr}
 8008c84:	b086      	sub	sp, #24
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	603a      	str	r2, [r7, #0]
 8008c8a:	461a      	mov	r2, r3
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	71fb      	strb	r3, [r7, #7]
 8008c90:	460b      	mov	r3, r1
 8008c92:	71bb      	strb	r3, [r7, #6]
 8008c94:	4613      	mov	r3, r2
 8008c96:	717b      	strb	r3, [r7, #5]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8008c98:	f107 030c 	add.w	r3, r7, #12
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	601a      	str	r2, [r3, #0]
 8008ca0:	605a      	str	r2, [r3, #4]
 8008ca2:	609a      	str	r2, [r3, #8]
 8008ca4:	79fb      	ldrb	r3, [r7, #7]
 8008ca6:	733b      	strb	r3, [r7, #12]
 8008ca8:	2307      	movs	r3, #7
 8008caa:	737b      	strb	r3, [r7, #13]

  event.xfer_complete.ep_addr = ep_addr;
 8008cac:	79bb      	ldrb	r3, [r7, #6]
 8008cae:	743b      	strb	r3, [r7, #16]
  event.xfer_complete.len     = xferred_bytes;
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	617b      	str	r3, [r7, #20]
  event.xfer_complete.result  = result;
 8008cb4:	797b      	ldrb	r3, [r7, #5]
 8008cb6:	747b      	strb	r3, [r7, #17]

  dcd_event_handler(&event, in_isr);
 8008cb8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8008cbc:	f107 030c 	add.w	r3, r7, #12
 8008cc0:	4611      	mov	r1, r2
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f7ff ff32 	bl	8008b2c <dcd_event_handler>
}
 8008cc8:	bf00      	nop
 8008cca:	3718      	adds	r7, #24
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <usbd_open_edpt_pair>:
// Helper
//--------------------------------------------------------------------+

// Parse consecutive endpoint descriptors (IN & OUT)
bool usbd_open_edpt_pair(uint8_t rhport, uint8_t const* p_desc, uint8_t ep_count, uint8_t xfer_type, uint8_t* ep_out, uint8_t* ep_in)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b086      	sub	sp, #24
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6039      	str	r1, [r7, #0]
 8008cd8:	4611      	mov	r1, r2
 8008cda:	461a      	mov	r2, r3
 8008cdc:	4603      	mov	r3, r0
 8008cde:	71fb      	strb	r3, [r7, #7]
 8008ce0:	460b      	mov	r3, r1
 8008ce2:	71bb      	strb	r3, [r7, #6]
 8008ce4:	4613      	mov	r3, r2
 8008ce6:	717b      	strb	r3, [r7, #5]
  for(int i=0; i<ep_count; i++)
 8008ce8:	2300      	movs	r3, #0
 8008cea:	617b      	str	r3, [r7, #20]
 8008cec:	e047      	b.n	8008d7e <usbd_open_edpt_pair+0xae>
  {
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	613b      	str	r3, [r7, #16]

    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	785b      	ldrb	r3, [r3, #1]
 8008cf6:	2b05      	cmp	r3, #5
 8008cf8:	d108      	bne.n	8008d0c <usbd_open_edpt_pair+0x3c>
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	78db      	ldrb	r3, [r3, #3]
 8008cfe:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8008d02:	b2db      	uxtb	r3, r3
 8008d04:	461a      	mov	r2, r3
 8008d06:	797b      	ldrb	r3, [r7, #5]
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d00a      	beq.n	8008d22 <usbd_open_edpt_pair+0x52>
 8008d0c:	4b20      	ldr	r3, [pc, #128]	; (8008d90 <usbd_open_edpt_pair+0xc0>)
 8008d0e:	60bb      	str	r3, [r7, #8]
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f003 0301 	and.w	r3, r3, #1
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d000      	beq.n	8008d1e <usbd_open_edpt_pair+0x4e>
 8008d1c:	be00      	bkpt	0x0000
 8008d1e:	2300      	movs	r3, #0
 8008d20:	e032      	b.n	8008d88 <usbd_open_edpt_pair+0xb8>
    TU_ASSERT(dcd_edpt_open(rhport, desc_ep));
 8008d22:	79fb      	ldrb	r3, [r7, #7]
 8008d24:	6939      	ldr	r1, [r7, #16]
 8008d26:	4618      	mov	r0, r3
 8008d28:	f001 f986 	bl	800a038 <dcd_edpt_open>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	f083 0301 	eor.w	r3, r3, #1
 8008d32:	b2db      	uxtb	r3, r3
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d00a      	beq.n	8008d4e <usbd_open_edpt_pair+0x7e>
 8008d38:	4b15      	ldr	r3, [pc, #84]	; (8008d90 <usbd_open_edpt_pair+0xc0>)
 8008d3a:	60fb      	str	r3, [r7, #12]
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f003 0301 	and.w	r3, r3, #1
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d000      	beq.n	8008d4a <usbd_open_edpt_pair+0x7a>
 8008d48:	be00      	bkpt	0x0000
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	e01c      	b.n	8008d88 <usbd_open_edpt_pair+0xb8>

    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	789b      	ldrb	r3, [r3, #2]
 8008d52:	4618      	mov	r0, r3
 8008d54:	f7fe ffbc 	bl	8007cd0 <tu_edpt_dir>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	d104      	bne.n	8008d68 <usbd_open_edpt_pair+0x98>
    {
      (*ep_in) = desc_ep->bEndpointAddress;
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	789a      	ldrb	r2, [r3, #2]
 8008d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d64:	701a      	strb	r2, [r3, #0]
 8008d66:	e003      	b.n	8008d70 <usbd_open_edpt_pair+0xa0>
    }else
    {
      (*ep_out) = desc_ep->bEndpointAddress;
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	789a      	ldrb	r2, [r3, #2]
 8008d6c:	6a3b      	ldr	r3, [r7, #32]
 8008d6e:	701a      	strb	r2, [r3, #0]
    }

    p_desc = tu_desc_next(p_desc);
 8008d70:	6838      	ldr	r0, [r7, #0]
 8008d72:	f7fe ffc8 	bl	8007d06 <tu_desc_next>
 8008d76:	6038      	str	r0, [r7, #0]
  for(int i=0; i<ep_count; i++)
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	617b      	str	r3, [r7, #20]
 8008d7e:	79bb      	ldrb	r3, [r7, #6]
 8008d80:	697a      	ldr	r2, [r7, #20]
 8008d82:	429a      	cmp	r2, r3
 8008d84:	dbb3      	blt.n	8008cee <usbd_open_edpt_pair+0x1e>
  }

  return true;
 8008d86:	2301      	movs	r3, #1
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3718      	adds	r7, #24
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}
 8008d90:	e000edf0 	.word	0xe000edf0

08008d94 <usbd_edpt_xfer>:
//--------------------------------------------------------------------+
// USBD Endpoint API
//--------------------------------------------------------------------+

bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b084      	sub	sp, #16
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	603a      	str	r2, [r7, #0]
 8008d9c:	461a      	mov	r2, r3
 8008d9e:	4603      	mov	r3, r0
 8008da0:	71fb      	strb	r3, [r7, #7]
 8008da2:	460b      	mov	r3, r1
 8008da4:	71bb      	strb	r3, [r7, #6]
 8008da6:	4613      	mov	r3, r2
 8008da8:	80bb      	strh	r3, [r7, #4]
  uint8_t const epnum = tu_edpt_number(ep_addr);
 8008daa:	79bb      	ldrb	r3, [r7, #6]
 8008dac:	4618      	mov	r0, r3
 8008dae:	f7fe ff9c 	bl	8007cea <tu_edpt_number>
 8008db2:	4603      	mov	r3, r0
 8008db4:	73fb      	strb	r3, [r7, #15]
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8008db6:	79bb      	ldrb	r3, [r7, #6]
 8008db8:	4618      	mov	r0, r3
 8008dba:	f7fe ff89 	bl	8007cd0 <tu_edpt_dir>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	73bb      	strb	r3, [r7, #14]

  TU_VERIFY( dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes) );
 8008dc2:	88bb      	ldrh	r3, [r7, #4]
 8008dc4:	79b9      	ldrb	r1, [r7, #6]
 8008dc6:	79f8      	ldrb	r0, [r7, #7]
 8008dc8:	683a      	ldr	r2, [r7, #0]
 8008dca:	f001 fa53 	bl	800a274 <dcd_edpt_xfer>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	f083 0301 	eor.w	r3, r3, #1
 8008dd4:	b2db      	uxtb	r3, r3
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d001      	beq.n	8008dde <usbd_edpt_xfer+0x4a>
 8008dda:	2300      	movs	r3, #0
 8008ddc:	e00c      	b.n	8008df8 <usbd_edpt_xfer+0x64>
  _usbd_dev.ep_status[epnum][dir].busy = true;
 8008dde:	7bfa      	ldrb	r2, [r7, #15]
 8008de0:	7bbb      	ldrb	r3, [r7, #14]
 8008de2:	4907      	ldr	r1, [pc, #28]	; (8008e00 <usbd_edpt_xfer+0x6c>)
 8008de4:	0052      	lsls	r2, r2, #1
 8008de6:	440a      	add	r2, r1
 8008de8:	4413      	add	r3, r2
 8008dea:	f103 0220 	add.w	r2, r3, #32
 8008dee:	7853      	ldrb	r3, [r2, #1]
 8008df0:	f043 0301 	orr.w	r3, r3, #1
 8008df4:	7053      	strb	r3, [r2, #1]

  TU_LOG2("  XFER Endpoint: 0x%02X, Bytes: %d\r\n", ep_addr, total_bytes);

  return true;
 8008df6:	2301      	movs	r3, #1
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3710      	adds	r7, #16
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}
 8008e00:	20002570 	.word	0x20002570

08008e04 <usbd_edpt_busy>:

bool usbd_edpt_busy(uint8_t rhport, uint8_t ep_addr)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b084      	sub	sp, #16
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	460a      	mov	r2, r1
 8008e0e:	71fb      	strb	r3, [r7, #7]
 8008e10:	4613      	mov	r3, r2
 8008e12:	71bb      	strb	r3, [r7, #6]
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8008e14:	79bb      	ldrb	r3, [r7, #6]
 8008e16:	4618      	mov	r0, r3
 8008e18:	f7fe ff67 	bl	8007cea <tu_edpt_number>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	73fb      	strb	r3, [r7, #15]
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8008e20:	79bb      	ldrb	r3, [r7, #6]
 8008e22:	4618      	mov	r0, r3
 8008e24:	f7fe ff54 	bl	8007cd0 <tu_edpt_dir>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].busy;
 8008e2c:	7bfa      	ldrb	r2, [r7, #15]
 8008e2e:	7bbb      	ldrb	r3, [r7, #14]
 8008e30:	4906      	ldr	r1, [pc, #24]	; (8008e4c <usbd_edpt_busy+0x48>)
 8008e32:	0052      	lsls	r2, r2, #1
 8008e34:	440a      	add	r2, r1
 8008e36:	4413      	add	r3, r2
 8008e38:	3320      	adds	r3, #32
 8008e3a:	785b      	ldrb	r3, [r3, #1]
 8008e3c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008e40:	b2db      	uxtb	r3, r3
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3710      	adds	r7, #16
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	bf00      	nop
 8008e4c:	20002570 	.word	0x20002570

08008e50 <usbd_edpt_stall>:

void usbd_edpt_stall(uint8_t rhport, uint8_t ep_addr)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b084      	sub	sp, #16
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	4603      	mov	r3, r0
 8008e58:	460a      	mov	r2, r1
 8008e5a:	71fb      	strb	r3, [r7, #7]
 8008e5c:	4613      	mov	r3, r2
 8008e5e:	71bb      	strb	r3, [r7, #6]
  uint8_t const epnum = tu_edpt_number(ep_addr);
 8008e60:	79bb      	ldrb	r3, [r7, #6]
 8008e62:	4618      	mov	r0, r3
 8008e64:	f7fe ff41 	bl	8007cea <tu_edpt_number>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	73fb      	strb	r3, [r7, #15]
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8008e6c:	79bb      	ldrb	r3, [r7, #6]
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f7fe ff2e 	bl	8007cd0 <tu_edpt_dir>
 8008e74:	4603      	mov	r3, r0
 8008e76:	73bb      	strb	r3, [r7, #14]

  dcd_edpt_stall(rhport, ep_addr);
 8008e78:	79ba      	ldrb	r2, [r7, #6]
 8008e7a:	79fb      	ldrb	r3, [r7, #7]
 8008e7c:	4611      	mov	r1, r2
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f001 fa56 	bl	800a330 <dcd_edpt_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = true;
 8008e84:	7bfa      	ldrb	r2, [r7, #15]
 8008e86:	7bbb      	ldrb	r3, [r7, #14]
 8008e88:	490c      	ldr	r1, [pc, #48]	; (8008ebc <usbd_edpt_stall+0x6c>)
 8008e8a:	0052      	lsls	r2, r2, #1
 8008e8c:	440a      	add	r2, r1
 8008e8e:	4413      	add	r3, r2
 8008e90:	f103 0220 	add.w	r2, r3, #32
 8008e94:	7853      	ldrb	r3, [r2, #1]
 8008e96:	f043 0302 	orr.w	r3, r3, #2
 8008e9a:	7053      	strb	r3, [r2, #1]
  _usbd_dev.ep_status[epnum][dir].busy = true;
 8008e9c:	7bfa      	ldrb	r2, [r7, #15]
 8008e9e:	7bbb      	ldrb	r3, [r7, #14]
 8008ea0:	4906      	ldr	r1, [pc, #24]	; (8008ebc <usbd_edpt_stall+0x6c>)
 8008ea2:	0052      	lsls	r2, r2, #1
 8008ea4:	440a      	add	r2, r1
 8008ea6:	4413      	add	r3, r2
 8008ea8:	f103 0220 	add.w	r2, r3, #32
 8008eac:	7853      	ldrb	r3, [r2, #1]
 8008eae:	f043 0301 	orr.w	r3, r3, #1
 8008eb2:	7053      	strb	r3, [r2, #1]
}
 8008eb4:	bf00      	nop
 8008eb6:	3710      	adds	r7, #16
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}
 8008ebc:	20002570 	.word	0x20002570

08008ec0 <usbd_edpt_clear_stall>:

void usbd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b084      	sub	sp, #16
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	460a      	mov	r2, r1
 8008eca:	71fb      	strb	r3, [r7, #7]
 8008ecc:	4613      	mov	r3, r2
 8008ece:	71bb      	strb	r3, [r7, #6]
  uint8_t const epnum = tu_edpt_number(ep_addr);
 8008ed0:	79bb      	ldrb	r3, [r7, #6]
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f7fe ff09 	bl	8007cea <tu_edpt_number>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	73fb      	strb	r3, [r7, #15]
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8008edc:	79bb      	ldrb	r3, [r7, #6]
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f7fe fef6 	bl	8007cd0 <tu_edpt_dir>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	73bb      	strb	r3, [r7, #14]

  dcd_edpt_clear_stall(rhport, ep_addr);
 8008ee8:	79ba      	ldrb	r2, [r7, #6]
 8008eea:	79fb      	ldrb	r3, [r7, #7]
 8008eec:	4611      	mov	r1, r2
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f001 fa40 	bl	800a374 <dcd_edpt_clear_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = false;
 8008ef4:	7bfa      	ldrb	r2, [r7, #15]
 8008ef6:	7bbb      	ldrb	r3, [r7, #14]
 8008ef8:	490c      	ldr	r1, [pc, #48]	; (8008f2c <usbd_edpt_clear_stall+0x6c>)
 8008efa:	0052      	lsls	r2, r2, #1
 8008efc:	440a      	add	r2, r1
 8008efe:	4413      	add	r3, r2
 8008f00:	f103 0220 	add.w	r2, r3, #32
 8008f04:	7853      	ldrb	r3, [r2, #1]
 8008f06:	f36f 0341 	bfc	r3, #1, #1
 8008f0a:	7053      	strb	r3, [r2, #1]
  _usbd_dev.ep_status[epnum][dir].busy = false;
 8008f0c:	7bfa      	ldrb	r2, [r7, #15]
 8008f0e:	7bbb      	ldrb	r3, [r7, #14]
 8008f10:	4906      	ldr	r1, [pc, #24]	; (8008f2c <usbd_edpt_clear_stall+0x6c>)
 8008f12:	0052      	lsls	r2, r2, #1
 8008f14:	440a      	add	r2, r1
 8008f16:	4413      	add	r3, r2
 8008f18:	f103 0220 	add.w	r2, r3, #32
 8008f1c:	7853      	ldrb	r3, [r2, #1]
 8008f1e:	f36f 0300 	bfc	r3, #0, #1
 8008f22:	7053      	strb	r3, [r2, #1]
}
 8008f24:	bf00      	nop
 8008f26:	3710      	adds	r7, #16
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}
 8008f2c:	20002570 	.word	0x20002570

08008f30 <usbd_edpt_stalled>:

bool usbd_edpt_stalled(uint8_t rhport, uint8_t ep_addr)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b084      	sub	sp, #16
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	4603      	mov	r3, r0
 8008f38:	460a      	mov	r2, r1
 8008f3a:	71fb      	strb	r3, [r7, #7]
 8008f3c:	4613      	mov	r3, r2
 8008f3e:	71bb      	strb	r3, [r7, #6]
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8008f40:	79bb      	ldrb	r3, [r7, #6]
 8008f42:	4618      	mov	r0, r3
 8008f44:	f7fe fed1 	bl	8007cea <tu_edpt_number>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	73fb      	strb	r3, [r7, #15]
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8008f4c:	79bb      	ldrb	r3, [r7, #6]
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f7fe febe 	bl	8007cd0 <tu_edpt_dir>
 8008f54:	4603      	mov	r3, r0
 8008f56:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].stalled;
 8008f58:	7bfa      	ldrb	r2, [r7, #15]
 8008f5a:	7bbb      	ldrb	r3, [r7, #14]
 8008f5c:	4906      	ldr	r1, [pc, #24]	; (8008f78 <usbd_edpt_stalled+0x48>)
 8008f5e:	0052      	lsls	r2, r2, #1
 8008f60:	440a      	add	r2, r1
 8008f62:	4413      	add	r3, r2
 8008f64:	3320      	adds	r3, #32
 8008f66:	785b      	ldrb	r3, [r3, #1]
 8008f68:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008f6c:	b2db      	uxtb	r3, r3
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3710      	adds	r7, #16
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}
 8008f76:	bf00      	nop
 8008f78:	20002570 	.word	0x20002570

08008f7c <tu_edpt_dir>:
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b083      	sub	sp, #12
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	4603      	mov	r3, r0
 8008f84:	71fb      	strb	r3, [r7, #7]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008f86:	79fb      	ldrb	r3, [r7, #7]
 8008f88:	09db      	lsrs	r3, r3, #7
 8008f8a:	b2db      	uxtb	r3, r3
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	370c      	adds	r7, #12
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bc80      	pop	{r7}
 8008f94:	4770      	bx	lr

08008f96 <tu_min16>:
static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8008f96:	b480      	push	{r7}
 8008f98:	b083      	sub	sp, #12
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	460a      	mov	r2, r1
 8008fa0:	80fb      	strh	r3, [r7, #6]
 8008fa2:	4613      	mov	r3, r2
 8008fa4:	80bb      	strh	r3, [r7, #4]
 8008fa6:	88ba      	ldrh	r2, [r7, #4]
 8008fa8:	88fb      	ldrh	r3, [r7, #6]
 8008faa:	4293      	cmp	r3, r2
 8008fac:	bf28      	it	cs
 8008fae:	4613      	movcs	r3, r2
 8008fb0:	b29b      	uxth	r3, r3
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	370c      	adds	r7, #12
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bc80      	pop	{r7}
 8008fba:	4770      	bx	lr

08008fbc <_status_stage_xact>:
//--------------------------------------------------------------------+
// Application API
//--------------------------------------------------------------------+

static inline bool _status_stage_xact(uint8_t rhport, tusb_control_request_t const * request)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b082      	sub	sp, #8
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	6039      	str	r1, [r7, #0]
 8008fc6:	71fb      	strb	r3, [r7, #7]
  // status direction is reversed to one in the setup packet
  return dcd_edpt_xfer(rhport, request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN, NULL, 0);
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	781b      	ldrb	r3, [r3, #0]
 8008fcc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008fd0:	b2db      	uxtb	r3, r3
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d001      	beq.n	8008fda <_status_stage_xact+0x1e>
 8008fd6:	2100      	movs	r1, #0
 8008fd8:	e000      	b.n	8008fdc <_status_stage_xact+0x20>
 8008fda:	2180      	movs	r1, #128	; 0x80
 8008fdc:	79f8      	ldrb	r0, [r7, #7]
 8008fde:	2300      	movs	r3, #0
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	f001 f947 	bl	800a274 <dcd_edpt_xfer>
 8008fe6:	4603      	mov	r3, r0
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3708      	adds	r7, #8
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <tud_control_status>:

// Status phase
bool tud_control_status(uint8_t rhport, tusb_control_request_t const * request)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b082      	sub	sp, #8
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	6039      	str	r1, [r7, #0]
 8008ffa:	71fb      	strb	r3, [r7, #7]
  _ctrl_xfer.request       = (*request);
 8008ffc:	4b0b      	ldr	r3, [pc, #44]	; (800902c <tud_control_status+0x3c>)
 8008ffe:	683a      	ldr	r2, [r7, #0]
 8009000:	6810      	ldr	r0, [r2, #0]
 8009002:	6851      	ldr	r1, [r2, #4]
 8009004:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = NULL;
 8009006:	4b09      	ldr	r3, [pc, #36]	; (800902c <tud_control_status+0x3c>)
 8009008:	2200      	movs	r2, #0
 800900a:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 800900c:	4b07      	ldr	r3, [pc, #28]	; (800902c <tud_control_status+0x3c>)
 800900e:	2200      	movs	r2, #0
 8009010:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = 0;
 8009012:	4b06      	ldr	r3, [pc, #24]	; (800902c <tud_control_status+0x3c>)
 8009014:	2200      	movs	r2, #0
 8009016:	819a      	strh	r2, [r3, #12]

  return _status_stage_xact(rhport, request);
 8009018:	79fb      	ldrb	r3, [r7, #7]
 800901a:	6839      	ldr	r1, [r7, #0]
 800901c:	4618      	mov	r0, r3
 800901e:	f7ff ffcd 	bl	8008fbc <_status_stage_xact>
 8009022:	4603      	mov	r3, r0
}
 8009024:	4618      	mov	r0, r3
 8009026:	3708      	adds	r7, #8
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}
 800902c:	200025a8 	.word	0x200025a8

08009030 <_data_stage_xact>:

// Transfer an transaction in Data Stage
// Each transaction has up to Endpoint0's max packet size.
// This function can also transfer an zero-length packet
static bool _data_stage_xact(uint8_t rhport)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b084      	sub	sp, #16
 8009034:	af00      	add	r7, sp, #0
 8009036:	4603      	mov	r3, r0
 8009038:	71fb      	strb	r3, [r7, #7]
  uint16_t const xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 800903a:	4b18      	ldr	r3, [pc, #96]	; (800909c <_data_stage_xact+0x6c>)
 800903c:	899a      	ldrh	r2, [r3, #12]
 800903e:	4b17      	ldr	r3, [pc, #92]	; (800909c <_data_stage_xact+0x6c>)
 8009040:	89db      	ldrh	r3, [r3, #14]
 8009042:	1ad3      	subs	r3, r2, r3
 8009044:	b29b      	uxth	r3, r3
 8009046:	2140      	movs	r1, #64	; 0x40
 8009048:	4618      	mov	r0, r3
 800904a:	f7ff ffa4 	bl	8008f96 <tu_min16>
 800904e:	4603      	mov	r3, r0
 8009050:	81bb      	strh	r3, [r7, #12]

  uint8_t ep_addr = EDPT_CTRL_OUT;
 8009052:	2300      	movs	r3, #0
 8009054:	73fb      	strb	r3, [r7, #15]

  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
 8009056:	4b11      	ldr	r3, [pc, #68]	; (800909c <_data_stage_xact+0x6c>)
 8009058:	781b      	ldrb	r3, [r3, #0]
 800905a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800905e:	b2db      	uxtb	r3, r3
 8009060:	2b00      	cmp	r3, #0
 8009062:	d00b      	beq.n	800907c <_data_stage_xact+0x4c>
  {
    ep_addr = EDPT_CTRL_IN;
 8009064:	2380      	movs	r3, #128	; 0x80
 8009066:	73fb      	strb	r3, [r7, #15]
    if ( xact_len ) memcpy(_usbd_ctrl_buf, _ctrl_xfer.buffer, xact_len);
 8009068:	89bb      	ldrh	r3, [r7, #12]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d006      	beq.n	800907c <_data_stage_xact+0x4c>
 800906e:	4b0b      	ldr	r3, [pc, #44]	; (800909c <_data_stage_xact+0x6c>)
 8009070:	689b      	ldr	r3, [r3, #8]
 8009072:	89ba      	ldrh	r2, [r7, #12]
 8009074:	4619      	mov	r1, r3
 8009076:	480a      	ldr	r0, [pc, #40]	; (80090a0 <_data_stage_xact+0x70>)
 8009078:	f001 fa98 	bl	800a5ac <memcpy>
  }

  return dcd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 800907c:	89bb      	ldrh	r3, [r7, #12]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d001      	beq.n	8009086 <_data_stage_xact+0x56>
 8009082:	4a07      	ldr	r2, [pc, #28]	; (80090a0 <_data_stage_xact+0x70>)
 8009084:	e000      	b.n	8009088 <_data_stage_xact+0x58>
 8009086:	2200      	movs	r2, #0
 8009088:	89bb      	ldrh	r3, [r7, #12]
 800908a:	7bf9      	ldrb	r1, [r7, #15]
 800908c:	79f8      	ldrb	r0, [r7, #7]
 800908e:	f001 f8f1 	bl	800a274 <dcd_edpt_xfer>
 8009092:	4603      	mov	r3, r0
}
 8009094:	4618      	mov	r0, r3
 8009096:	3710      	adds	r7, #16
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}
 800909c:	200025a8 	.word	0x200025a8
 80090a0:	200025bc 	.word	0x200025bc

080090a4 <tud_control_xfer>:

bool tud_control_xfer(uint8_t rhport, tusb_control_request_t const * request, void* buffer, uint16_t len)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b088      	sub	sp, #32
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	60b9      	str	r1, [r7, #8]
 80090ac:	607a      	str	r2, [r7, #4]
 80090ae:	461a      	mov	r2, r3
 80090b0:	4603      	mov	r3, r0
 80090b2:	73fb      	strb	r3, [r7, #15]
 80090b4:	4613      	mov	r3, r2
 80090b6:	81bb      	strh	r3, [r7, #12]
  _ctrl_xfer.request       = (*request);
 80090b8:	4b2c      	ldr	r3, [pc, #176]	; (800916c <tud_control_xfer+0xc8>)
 80090ba:	68ba      	ldr	r2, [r7, #8]
 80090bc:	6810      	ldr	r0, [r2, #0]
 80090be:	6851      	ldr	r1, [r2, #4]
 80090c0:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = (uint8_t*) buffer;
 80090c2:	4a2a      	ldr	r2, [pc, #168]	; (800916c <tud_control_xfer+0xc8>)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6093      	str	r3, [r2, #8]
  _ctrl_xfer.total_xferred = 0;
 80090c8:	4b28      	ldr	r3, [pc, #160]	; (800916c <tud_control_xfer+0xc8>)
 80090ca:	2200      	movs	r2, #0
 80090cc:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = tu_min16(len, request->wLength);
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	88db      	ldrh	r3, [r3, #6]
 80090d2:	b29a      	uxth	r2, r3
 80090d4:	89bb      	ldrh	r3, [r7, #12]
 80090d6:	4611      	mov	r1, r2
 80090d8:	4618      	mov	r0, r3
 80090da:	f7ff ff5c 	bl	8008f96 <tu_min16>
 80090de:	4603      	mov	r3, r0
 80090e0:	461a      	mov	r2, r3
 80090e2:	4b22      	ldr	r3, [pc, #136]	; (800916c <tud_control_xfer+0xc8>)
 80090e4:	819a      	strh	r2, [r3, #12]

  if ( _ctrl_xfer.data_len )
 80090e6:	4b21      	ldr	r3, [pc, #132]	; (800916c <tud_control_xfer+0xc8>)
 80090e8:	899b      	ldrh	r3, [r3, #12]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d022      	beq.n	8009134 <tud_control_xfer+0x90>
  {
    TU_ASSERT(buffer);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d10a      	bne.n	800910a <tud_control_xfer+0x66>
 80090f4:	4b1e      	ldr	r3, [pc, #120]	; (8009170 <tud_control_xfer+0xcc>)
 80090f6:	617b      	str	r3, [r7, #20]
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f003 0301 	and.w	r3, r3, #1
 8009100:	2b00      	cmp	r3, #0
 8009102:	d000      	beq.n	8009106 <tud_control_xfer+0x62>
 8009104:	be00      	bkpt	0x0000
 8009106:	2300      	movs	r3, #0
 8009108:	e02b      	b.n	8009162 <tud_control_xfer+0xbe>

    // Data stage
    TU_ASSERT( _data_stage_xact(rhport) );
 800910a:	7bfb      	ldrb	r3, [r7, #15]
 800910c:	4618      	mov	r0, r3
 800910e:	f7ff ff8f 	bl	8009030 <_data_stage_xact>
 8009112:	4603      	mov	r3, r0
 8009114:	f083 0301 	eor.w	r3, r3, #1
 8009118:	b2db      	uxtb	r3, r3
 800911a:	2b00      	cmp	r3, #0
 800911c:	d020      	beq.n	8009160 <tud_control_xfer+0xbc>
 800911e:	4b14      	ldr	r3, [pc, #80]	; (8009170 <tud_control_xfer+0xcc>)
 8009120:	61bb      	str	r3, [r7, #24]
 8009122:	69bb      	ldr	r3, [r7, #24]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f003 0301 	and.w	r3, r3, #1
 800912a:	2b00      	cmp	r3, #0
 800912c:	d000      	beq.n	8009130 <tud_control_xfer+0x8c>
 800912e:	be00      	bkpt	0x0000
 8009130:	2300      	movs	r3, #0
 8009132:	e016      	b.n	8009162 <tud_control_xfer+0xbe>
  }else
  {
    // Status stage
    TU_ASSERT( _status_stage_xact(rhport, request) );
 8009134:	7bfb      	ldrb	r3, [r7, #15]
 8009136:	68b9      	ldr	r1, [r7, #8]
 8009138:	4618      	mov	r0, r3
 800913a:	f7ff ff3f 	bl	8008fbc <_status_stage_xact>
 800913e:	4603      	mov	r3, r0
 8009140:	f083 0301 	eor.w	r3, r3, #1
 8009144:	b2db      	uxtb	r3, r3
 8009146:	2b00      	cmp	r3, #0
 8009148:	d00a      	beq.n	8009160 <tud_control_xfer+0xbc>
 800914a:	4b09      	ldr	r3, [pc, #36]	; (8009170 <tud_control_xfer+0xcc>)
 800914c:	61fb      	str	r3, [r7, #28]
 800914e:	69fb      	ldr	r3, [r7, #28]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f003 0301 	and.w	r3, r3, #1
 8009156:	2b00      	cmp	r3, #0
 8009158:	d000      	beq.n	800915c <tud_control_xfer+0xb8>
 800915a:	be00      	bkpt	0x0000
 800915c:	2300      	movs	r3, #0
 800915e:	e000      	b.n	8009162 <tud_control_xfer+0xbe>
  }

  return true;
 8009160:	2301      	movs	r3, #1
}
 8009162:	4618      	mov	r0, r3
 8009164:	3720      	adds	r7, #32
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}
 800916a:	bf00      	nop
 800916c:	200025a8 	.word	0x200025a8
 8009170:	e000edf0 	.word	0xe000edf0

08009174 <usbd_control_reset>:
//--------------------------------------------------------------------+
// USBD API
//--------------------------------------------------------------------+

void usbd_control_reset(void)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	af00      	add	r7, sp, #0
  tu_varclr(&_ctrl_xfer);
 8009178:	2214      	movs	r2, #20
 800917a:	2100      	movs	r1, #0
 800917c:	4802      	ldr	r0, [pc, #8]	; (8009188 <usbd_control_reset+0x14>)
 800917e:	f001 fa39 	bl	800a5f4 <memset>
}
 8009182:	bf00      	nop
 8009184:	bd80      	pop	{r7, pc}
 8009186:	bf00      	nop
 8009188:	200025a8 	.word	0x200025a8

0800918c <usbd_control_set_complete_callback>:

// TODO may find a better way
void usbd_control_set_complete_callback( bool (*fp) (uint8_t, tusb_control_request_t const * ) )
{
 800918c:	b480      	push	{r7}
 800918e:	b083      	sub	sp, #12
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.complete_cb = fp;
 8009194:	4a03      	ldr	r2, [pc, #12]	; (80091a4 <usbd_control_set_complete_callback+0x18>)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6113      	str	r3, [r2, #16]
}
 800919a:	bf00      	nop
 800919c:	370c      	adds	r7, #12
 800919e:	46bd      	mov	sp, r7
 80091a0:	bc80      	pop	{r7}
 80091a2:	4770      	bx	lr
 80091a4:	200025a8 	.word	0x200025a8

080091a8 <usbd_control_set_request>:

// useful for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(tusb_control_request_t const *request)
{
 80091a8:	b480      	push	{r7}
 80091aa:	b083      	sub	sp, #12
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.request       = (*request);
 80091b0:	4b09      	ldr	r3, [pc, #36]	; (80091d8 <usbd_control_set_request+0x30>)
 80091b2:	687a      	ldr	r2, [r7, #4]
 80091b4:	6810      	ldr	r0, [r2, #0]
 80091b6:	6851      	ldr	r1, [r2, #4]
 80091b8:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = NULL;
 80091ba:	4b07      	ldr	r3, [pc, #28]	; (80091d8 <usbd_control_set_request+0x30>)
 80091bc:	2200      	movs	r2, #0
 80091be:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 80091c0:	4b05      	ldr	r3, [pc, #20]	; (80091d8 <usbd_control_set_request+0x30>)
 80091c2:	2200      	movs	r2, #0
 80091c4:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = 0;
 80091c6:	4b04      	ldr	r3, [pc, #16]	; (80091d8 <usbd_control_set_request+0x30>)
 80091c8:	2200      	movs	r2, #0
 80091ca:	819a      	strh	r2, [r3, #12]
}
 80091cc:	bf00      	nop
 80091ce:	370c      	adds	r7, #12
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bc80      	pop	{r7}
 80091d4:	4770      	bx	lr
 80091d6:	bf00      	nop
 80091d8:	200025a8 	.word	0x200025a8

080091dc <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b086      	sub	sp, #24
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	603b      	str	r3, [r7, #0]
 80091e4:	4603      	mov	r3, r0
 80091e6:	71fb      	strb	r3, [r7, #7]
 80091e8:	460b      	mov	r3, r1
 80091ea:	71bb      	strb	r3, [r7, #6]
 80091ec:	4613      	mov	r3, r2
 80091ee:	717b      	strb	r3, [r7, #5]
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
 80091f0:	79bb      	ldrb	r3, [r7, #6]
 80091f2:	4618      	mov	r0, r3
 80091f4:	f7ff fec2 	bl	8008f7c <tu_edpt_dir>
 80091f8:	4603      	mov	r3, r0
 80091fa:	461a      	mov	r2, r3
 80091fc:	4b4b      	ldr	r3, [pc, #300]	; (800932c <usbd_control_xfer_cb+0x150>)
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009204:	b2db      	uxtb	r3, r3
 8009206:	429a      	cmp	r2, r3
 8009208:	d017      	beq.n	800923a <usbd_control_xfer_cb+0x5e>
  {
    TU_ASSERT(0 == xferred_bytes);
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d00a      	beq.n	8009226 <usbd_control_xfer_cb+0x4a>
 8009210:	4b47      	ldr	r3, [pc, #284]	; (8009330 <usbd_control_xfer_cb+0x154>)
 8009212:	60bb      	str	r3, [r7, #8]
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f003 0301 	and.w	r3, r3, #1
 800921c:	2b00      	cmp	r3, #0
 800921e:	d000      	beq.n	8009222 <usbd_control_xfer_cb+0x46>
 8009220:	be00      	bkpt	0x0000
 8009222:	2300      	movs	r3, #0
 8009224:	e07d      	b.n	8009322 <usbd_control_xfer_cb+0x146>
    if (dcd_edpt0_status_complete) dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
 8009226:	4b43      	ldr	r3, [pc, #268]	; (8009334 <usbd_control_xfer_cb+0x158>)
 8009228:	2b00      	cmp	r3, #0
 800922a:	d004      	beq.n	8009236 <usbd_control_xfer_cb+0x5a>
 800922c:	79fb      	ldrb	r3, [r7, #7]
 800922e:	493f      	ldr	r1, [pc, #252]	; (800932c <usbd_control_xfer_cb+0x150>)
 8009230:	4618      	mov	r0, r3
 8009232:	f000 fecd 	bl	8009fd0 <dcd_edpt0_status_complete>
    return true;
 8009236:	2301      	movs	r3, #1
 8009238:	e073      	b.n	8009322 <usbd_control_xfer_cb+0x146>
  }

  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT )
 800923a:	4b3c      	ldr	r3, [pc, #240]	; (800932c <usbd_control_xfer_cb+0x150>)
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009242:	b2db      	uxtb	r3, r3
 8009244:	2b00      	cmp	r3, #0
 8009246:	d10c      	bne.n	8009262 <usbd_control_xfer_cb+0x86>
  {
    TU_VERIFY(_ctrl_xfer.buffer);
 8009248:	4b38      	ldr	r3, [pc, #224]	; (800932c <usbd_control_xfer_cb+0x150>)
 800924a:	689b      	ldr	r3, [r3, #8]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d101      	bne.n	8009254 <usbd_control_xfer_cb+0x78>
 8009250:	2300      	movs	r3, #0
 8009252:	e066      	b.n	8009322 <usbd_control_xfer_cb+0x146>
    memcpy(_ctrl_xfer.buffer, _usbd_ctrl_buf, xferred_bytes);
 8009254:	4b35      	ldr	r3, [pc, #212]	; (800932c <usbd_control_xfer_cb+0x150>)
 8009256:	689b      	ldr	r3, [r3, #8]
 8009258:	683a      	ldr	r2, [r7, #0]
 800925a:	4937      	ldr	r1, [pc, #220]	; (8009338 <usbd_control_xfer_cb+0x15c>)
 800925c:	4618      	mov	r0, r3
 800925e:	f001 f9a5 	bl	800a5ac <memcpy>
  }

  _ctrl_xfer.total_xferred += xferred_bytes;
 8009262:	4b32      	ldr	r3, [pc, #200]	; (800932c <usbd_control_xfer_cb+0x150>)
 8009264:	89da      	ldrh	r2, [r3, #14]
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	b29b      	uxth	r3, r3
 800926a:	4413      	add	r3, r2
 800926c:	b29a      	uxth	r2, r3
 800926e:	4b2f      	ldr	r3, [pc, #188]	; (800932c <usbd_control_xfer_cb+0x150>)
 8009270:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.buffer += xferred_bytes;
 8009272:	4b2e      	ldr	r3, [pc, #184]	; (800932c <usbd_control_xfer_cb+0x150>)
 8009274:	689a      	ldr	r2, [r3, #8]
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	4413      	add	r3, r2
 800927a:	4a2c      	ldr	r2, [pc, #176]	; (800932c <usbd_control_xfer_cb+0x150>)
 800927c:	6093      	str	r3, [r2, #8]

  // Data Stage is complete when all request's length are transferred or
  // a short packet is sent including zero-length packet.
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || xferred_bytes < CFG_TUD_ENDPOINT0_SIZE )
 800927e:	4b2b      	ldr	r3, [pc, #172]	; (800932c <usbd_control_xfer_cb+0x150>)
 8009280:	88da      	ldrh	r2, [r3, #6]
 8009282:	4b2a      	ldr	r3, [pc, #168]	; (800932c <usbd_control_xfer_cb+0x150>)
 8009284:	89db      	ldrh	r3, [r3, #14]
 8009286:	429a      	cmp	r2, r3
 8009288:	d002      	beq.n	8009290 <usbd_control_xfer_cb+0xb4>
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	2b3f      	cmp	r3, #63	; 0x3f
 800928e:	d831      	bhi.n	80092f4 <usbd_control_xfer_cb+0x118>
  {
    // DATA stage is complete
    bool is_ok = true;
 8009290:	2301      	movs	r3, #1
 8009292:	75fb      	strb	r3, [r7, #23]

    // invoke complete callback if set
    // callback can still stall control in status phase e.g out data does not make sense
    if ( _ctrl_xfer.complete_cb )
 8009294:	4b25      	ldr	r3, [pc, #148]	; (800932c <usbd_control_xfer_cb+0x150>)
 8009296:	691b      	ldr	r3, [r3, #16]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d007      	beq.n	80092ac <usbd_control_xfer_cb+0xd0>
    {
      is_ok = _ctrl_xfer.complete_cb(rhport, &_ctrl_xfer.request);
 800929c:	4b23      	ldr	r3, [pc, #140]	; (800932c <usbd_control_xfer_cb+0x150>)
 800929e:	691b      	ldr	r3, [r3, #16]
 80092a0:	79fa      	ldrb	r2, [r7, #7]
 80092a2:	4922      	ldr	r1, [pc, #136]	; (800932c <usbd_control_xfer_cb+0x150>)
 80092a4:	4610      	mov	r0, r2
 80092a6:	4798      	blx	r3
 80092a8:	4603      	mov	r3, r0
 80092aa:	75fb      	strb	r3, [r7, #23]
    }

    if ( is_ok )
 80092ac:	7dfb      	ldrb	r3, [r7, #23]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d015      	beq.n	80092de <usbd_control_xfer_cb+0x102>
    {
      // Send status
      TU_ASSERT( _status_stage_xact(rhport, &_ctrl_xfer.request) );
 80092b2:	79fb      	ldrb	r3, [r7, #7]
 80092b4:	491d      	ldr	r1, [pc, #116]	; (800932c <usbd_control_xfer_cb+0x150>)
 80092b6:	4618      	mov	r0, r3
 80092b8:	f7ff fe80 	bl	8008fbc <_status_stage_xact>
 80092bc:	4603      	mov	r3, r0
 80092be:	f083 0301 	eor.w	r3, r3, #1
 80092c2:	b2db      	uxtb	r3, r3
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d02a      	beq.n	800931e <usbd_control_xfer_cb+0x142>
 80092c8:	4b19      	ldr	r3, [pc, #100]	; (8009330 <usbd_control_xfer_cb+0x154>)
 80092ca:	60fb      	str	r3, [r7, #12]
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f003 0301 	and.w	r3, r3, #1
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d000      	beq.n	80092da <usbd_control_xfer_cb+0xfe>
 80092d8:	be00      	bkpt	0x0000
 80092da:	2300      	movs	r3, #0
 80092dc:	e021      	b.n	8009322 <usbd_control_xfer_cb+0x146>
    }else
    {
      // Stall both IN and OUT control endpoint
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
 80092de:	79fb      	ldrb	r3, [r7, #7]
 80092e0:	2100      	movs	r1, #0
 80092e2:	4618      	mov	r0, r3
 80092e4:	f001 f824 	bl	800a330 <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
 80092e8:	79fb      	ldrb	r3, [r7, #7]
 80092ea:	2180      	movs	r1, #128	; 0x80
 80092ec:	4618      	mov	r0, r3
 80092ee:	f001 f81f 	bl	800a330 <dcd_edpt_stall>
  {
 80092f2:	e014      	b.n	800931e <usbd_control_xfer_cb+0x142>
    }
  }
  else
  {
    // More data to transfer
    TU_ASSERT( _data_stage_xact(rhport) );
 80092f4:	79fb      	ldrb	r3, [r7, #7]
 80092f6:	4618      	mov	r0, r3
 80092f8:	f7ff fe9a 	bl	8009030 <_data_stage_xact>
 80092fc:	4603      	mov	r3, r0
 80092fe:	f083 0301 	eor.w	r3, r3, #1
 8009302:	b2db      	uxtb	r3, r3
 8009304:	2b00      	cmp	r3, #0
 8009306:	d00b      	beq.n	8009320 <usbd_control_xfer_cb+0x144>
 8009308:	4b09      	ldr	r3, [pc, #36]	; (8009330 <usbd_control_xfer_cb+0x154>)
 800930a:	613b      	str	r3, [r7, #16]
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f003 0301 	and.w	r3, r3, #1
 8009314:	2b00      	cmp	r3, #0
 8009316:	d000      	beq.n	800931a <usbd_control_xfer_cb+0x13e>
 8009318:	be00      	bkpt	0x0000
 800931a:	2300      	movs	r3, #0
 800931c:	e001      	b.n	8009322 <usbd_control_xfer_cb+0x146>
  {
 800931e:	bf00      	nop
  }

  return true;
 8009320:	2301      	movs	r3, #1
}
 8009322:	4618      	mov	r0, r3
 8009324:	3718      	adds	r7, #24
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
 800932a:	bf00      	nop
 800932c:	200025a8 	.word	0x200025a8
 8009330:	e000edf0 	.word	0xe000edf0
 8009334:	08009fd1 	.word	0x08009fd1
 8009338:	200025bc 	.word	0x200025bc

0800933c <tu_edpt_dir>:
{
 800933c:	b480      	push	{r7}
 800933e:	b083      	sub	sp, #12
 8009340:	af00      	add	r7, sp, #0
 8009342:	4603      	mov	r3, r0
 8009344:	71fb      	strb	r3, [r7, #7]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8009346:	79fb      	ldrb	r3, [r7, #7]
 8009348:	09db      	lsrs	r3, r3, #7
 800934a:	b2db      	uxtb	r3, r3
}
 800934c:	4618      	mov	r0, r3
 800934e:	370c      	adds	r7, #12
 8009350:	46bd      	mov	sp, r7
 8009352:	bc80      	pop	{r7}
 8009354:	4770      	bx	lr

08009356 <tu_edpt_number>:
{
 8009356:	b480      	push	{r7}
 8009358:	b083      	sub	sp, #12
 800935a:	af00      	add	r7, sp, #0
 800935c:	4603      	mov	r3, r0
 800935e:	71fb      	strb	r3, [r7, #7]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009360:	79fb      	ldrb	r3, [r7, #7]
 8009362:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009366:	b2db      	uxtb	r3, r3
}
 8009368:	4618      	mov	r0, r3
 800936a:	370c      	adds	r7, #12
 800936c:	46bd      	mov	sp, r7
 800936e:	bc80      	pop	{r7}
 8009370:	4770      	bx	lr

08009372 <tu_edpt_addr>:
{
 8009372:	b480      	push	{r7}
 8009374:	b083      	sub	sp, #12
 8009376:	af00      	add	r7, sp, #0
 8009378:	4603      	mov	r3, r0
 800937a:	460a      	mov	r2, r1
 800937c:	71fb      	strb	r3, [r7, #7]
 800937e:	4613      	mov	r3, r2
 8009380:	71bb      	strb	r3, [r7, #6]
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
 8009382:	79bb      	ldrb	r3, [r7, #6]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d002      	beq.n	800938e <tu_edpt_addr+0x1c>
 8009388:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 800938c:	e000      	b.n	8009390 <tu_edpt_addr+0x1e>
 800938e:	2200      	movs	r2, #0
 8009390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009394:	4313      	orrs	r3, r2
 8009396:	b25b      	sxtb	r3, r3
 8009398:	b2db      	uxtb	r3, r3
}
 800939a:	4618      	mov	r0, r3
 800939c:	370c      	adds	r7, #12
 800939e:	46bd      	mov	sp, r7
 80093a0:	bc80      	pop	{r7}
 80093a2:	4770      	bx	lr

080093a4 <__NVIC_EnableIRQ>:
{
 80093a4:	b480      	push	{r7}
 80093a6:	b083      	sub	sp, #12
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	4603      	mov	r3, r0
 80093ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80093ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	db0b      	blt.n	80093ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80093b6:	79fb      	ldrb	r3, [r7, #7]
 80093b8:	f003 021f 	and.w	r2, r3, #31
 80093bc:	4906      	ldr	r1, [pc, #24]	; (80093d8 <__NVIC_EnableIRQ+0x34>)
 80093be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093c2:	095b      	lsrs	r3, r3, #5
 80093c4:	2001      	movs	r0, #1
 80093c6:	fa00 f202 	lsl.w	r2, r0, r2
 80093ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80093ce:	bf00      	nop
 80093d0:	370c      	adds	r7, #12
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bc80      	pop	{r7}
 80093d6:	4770      	bx	lr
 80093d8:	e000e100 	.word	0xe000e100

080093dc <__NVIC_DisableIRQ>:
{
 80093dc:	b480      	push	{r7}
 80093de:	b083      	sub	sp, #12
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	4603      	mov	r3, r0
 80093e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80093e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	db10      	blt.n	8009410 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80093ee:	79fb      	ldrb	r3, [r7, #7]
 80093f0:	f003 021f 	and.w	r2, r3, #31
 80093f4:	4909      	ldr	r1, [pc, #36]	; (800941c <__NVIC_DisableIRQ+0x40>)
 80093f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093fa:	095b      	lsrs	r3, r3, #5
 80093fc:	2001      	movs	r0, #1
 80093fe:	fa00 f202 	lsl.w	r2, r0, r2
 8009402:	3320      	adds	r3, #32
 8009404:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009408:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800940c:	f3bf 8f6f 	isb	sy
}
 8009410:	bf00      	nop
 8009412:	370c      	adds	r7, #12
 8009414:	46bd      	mov	sp, r7
 8009416:	bc80      	pop	{r7}
 8009418:	4770      	bx	lr
 800941a:	bf00      	nop
 800941c:	e000e100 	.word	0xe000e100

08009420 <pcd_set_endpoint>:
static inline void pcd_set_endpoint(USB_TypeDef * USBx, uint32_t bEpNum, uint32_t wRegValue);


/* SetENDPOINT */
static inline void pcd_set_endpoint(USB_TypeDef * USBx, uint32_t bEpNum, uint32_t wRegValue)
{
 8009420:	b480      	push	{r7}
 8009422:	b087      	sub	sp, #28
 8009424:	af00      	add	r7, sp, #0
 8009426:	60f8      	str	r0, [r7, #12]
 8009428:	60b9      	str	r1, [r7, #8]
 800942a:	607a      	str	r2, [r7, #4]
  __O uint16_t *reg = (__O uint16_t *)((&USBx->EP0R) + bEpNum*2u);
 800942c:	68fa      	ldr	r2, [r7, #12]
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	009b      	lsls	r3, r3, #2
 8009432:	4413      	add	r3, r2
 8009434:	617b      	str	r3, [r7, #20]
  *reg = (uint16_t)wRegValue;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	b29a      	uxth	r2, r3
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	801a      	strh	r2, [r3, #0]
}
 800943e:	bf00      	nop
 8009440:	371c      	adds	r7, #28
 8009442:	46bd      	mov	sp, r7
 8009444:	bc80      	pop	{r7}
 8009446:	4770      	bx	lr

08009448 <pcd_get_endpoint>:

/* GetENDPOINT */
static inline uint16_t pcd_get_endpoint(USB_TypeDef * USBx, uint32_t bEpNum) {
 8009448:	b480      	push	{r7}
 800944a:	b085      	sub	sp, #20
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	6039      	str	r1, [r7, #0]
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpNum*2u);
 8009452:	687a      	ldr	r2, [r7, #4]
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	009b      	lsls	r3, r3, #2
 8009458:	4413      	add	r3, r2
 800945a:	60fb      	str	r3, [r7, #12]
  return *reg;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	881b      	ldrh	r3, [r3, #0]
 8009460:	b29b      	uxth	r3, r3
}
 8009462:	4618      	mov	r0, r3
 8009464:	3714      	adds	r7, #20
 8009466:	46bd      	mov	sp, r7
 8009468:	bc80      	pop	{r7}
 800946a:	4770      	bx	lr

0800946c <pcd_set_eptype>:

static inline void pcd_set_eptype(USB_TypeDef * USBx, uint32_t bEpNum, uint32_t wType)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b086      	sub	sp, #24
 8009470:	af00      	add	r7, sp, #0
 8009472:	60f8      	str	r0, [r7, #12]
 8009474:	60b9      	str	r1, [r7, #8]
 8009476:	607a      	str	r2, [r7, #4]
  uint32_t regVal = pcd_get_endpoint(USBx, bEpNum);
 8009478:	68b9      	ldr	r1, [r7, #8]
 800947a:	68f8      	ldr	r0, [r7, #12]
 800947c:	f7ff ffe4 	bl	8009448 <pcd_get_endpoint>
 8009480:	4603      	mov	r3, r0
 8009482:	617b      	str	r3, [r7, #20]
  regVal &= (uint32_t)USB_EP_T_MASK;
 8009484:	697a      	ldr	r2, [r7, #20]
 8009486:	f648 138f 	movw	r3, #35215	; 0x898f
 800948a:	4013      	ands	r3, r2
 800948c:	617b      	str	r3, [r7, #20]
  regVal |= wType;
 800948e:	697a      	ldr	r2, [r7, #20]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	4313      	orrs	r3, r2
 8009494:	617b      	str	r3, [r7, #20]
  regVal |= USB_EP_CTR_RX | USB_EP_CTR_TX; // These clear on write0, so must set high
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800949c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094a0:	617b      	str	r3, [r7, #20]
  pcd_set_endpoint(USBx, bEpNum, regVal);
 80094a2:	697a      	ldr	r2, [r7, #20]
 80094a4:	68b9      	ldr	r1, [r7, #8]
 80094a6:	68f8      	ldr	r0, [r7, #12]
 80094a8:	f7ff ffba 	bl	8009420 <pcd_set_endpoint>
}
 80094ac:	bf00      	nop
 80094ae:	3718      	adds	r7, #24
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <pcd_clear_rx_ep_ctr>:
  * @param  USBx USB peripheral instance register address.
  * @param  bEpNum Endpoint Number.
  * @retval None
  */
static inline void pcd_clear_rx_ep_ctr(USB_TypeDef * USBx, uint32_t bEpNum)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b084      	sub	sp, #16
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	6039      	str	r1, [r7, #0]
  uint32_t regVal = pcd_get_endpoint(USBx, bEpNum);
 80094be:	6839      	ldr	r1, [r7, #0]
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f7ff ffc1 	bl	8009448 <pcd_get_endpoint>
 80094c6:	4603      	mov	r3, r0
 80094c8:	60fb      	str	r3, [r7, #12]
  regVal &= 0x7FFFu & USB_EPREG_MASK;
 80094ca:	68fa      	ldr	r2, [r7, #12]
 80094cc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80094d0:	4013      	ands	r3, r2
 80094d2:	60fb      	str	r3, [r7, #12]
  pcd_set_endpoint(USBx, bEpNum, regVal);
 80094d4:	68fa      	ldr	r2, [r7, #12]
 80094d6:	6839      	ldr	r1, [r7, #0]
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f7ff ffa1 	bl	8009420 <pcd_set_endpoint>
}
 80094de:	bf00      	nop
 80094e0:	3710      	adds	r7, #16
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}

080094e6 <pcd_clear_tx_ep_ctr>:
static inline void pcd_clear_tx_ep_ctr(USB_TypeDef * USBx, uint32_t bEpNum)
{
 80094e6:	b580      	push	{r7, lr}
 80094e8:	b084      	sub	sp, #16
 80094ea:	af00      	add	r7, sp, #0
 80094ec:	6078      	str	r0, [r7, #4]
 80094ee:	6039      	str	r1, [r7, #0]
  uint32_t regVal = pcd_get_endpoint(USBx, bEpNum);
 80094f0:	6839      	ldr	r1, [r7, #0]
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f7ff ffa8 	bl	8009448 <pcd_get_endpoint>
 80094f8:	4603      	mov	r3, r0
 80094fa:	60fb      	str	r3, [r7, #12]
  regVal &= regVal & 0xFF7FU & USB_EPREG_MASK;
 80094fc:	68fa      	ldr	r2, [r7, #12]
 80094fe:	f648 730f 	movw	r3, #36623	; 0x8f0f
 8009502:	4013      	ands	r3, r2
 8009504:	60fb      	str	r3, [r7, #12]
  pcd_set_endpoint(USBx, bEpNum,regVal);
 8009506:	68fa      	ldr	r2, [r7, #12]
 8009508:	6839      	ldr	r1, [r7, #0]
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f7ff ff88 	bl	8009420 <pcd_set_endpoint>
}
 8009510:	bf00      	nop
 8009512:	3710      	adds	r7, #16
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}

08009518 <pcd_get_ep_rx_cnt>:
  __I uint16_t *regPtr = pcd_ep_tx_cnt_ptr(USBx, bEpNum);
  return *regPtr & 0x3ffU;
}

static inline uint32_t pcd_get_ep_rx_cnt(USB_TypeDef * USBx, uint32_t bEpNum)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b084      	sub	sp, #16
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	6039      	str	r1, [r7, #0]
  __I uint16_t *regPtr = pcd_ep_rx_cnt_ptr(USBx, bEpNum);
 8009522:	6839      	ldr	r1, [r7, #0]
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f000 f8b3 	bl	8009690 <pcd_ep_rx_cnt_ptr>
 800952a:	60f8      	str	r0, [r7, #12]
  return *regPtr & 0x3ffU;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	881b      	ldrh	r3, [r3, #0]
 8009530:	b29b      	uxth	r3, r3
 8009532:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 8009536:	4618      	mov	r0, r3
 8009538:	3710      	adds	r7, #16
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}

0800953e <pcd_set_ep_cnt_rx_reg>:
  * @param  wCount Counter.
  * @param  wNBlocks no. of Blocks.
  * @retval None
  */

static inline void pcd_set_ep_cnt_rx_reg(__O uint16_t * pdwReg, size_t wCount)  {
 800953e:	b480      	push	{r7}
 8009540:	b085      	sub	sp, #20
 8009542:	af00      	add	r7, sp, #0
 8009544:	6078      	str	r0, [r7, #4]
 8009546:	6039      	str	r1, [r7, #0]
  uint32_t wNBlocks;
  if(wCount > 62u)
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	2b3e      	cmp	r3, #62	; 0x3e
 800954c:	d916      	bls.n	800957c <pcd_set_ep_cnt_rx_reg+0x3e>
  {
    wNBlocks = wCount >> 5u;
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	095b      	lsrs	r3, r3, #5
 8009552:	60fb      	str	r3, [r7, #12]
    if((wCount & 0x1fU) == 0u)
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	f003 031f 	and.w	r3, r3, #31
 800955a:	2b00      	cmp	r3, #0
 800955c:	d102      	bne.n	8009564 <pcd_set_ep_cnt_rx_reg+0x26>
    {
      wNBlocks--;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	3b01      	subs	r3, #1
 8009562:	60fb      	str	r3, [r7, #12]
    }
    wNBlocks = wNBlocks << 10u;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	029b      	lsls	r3, r3, #10
 8009568:	60fb      	str	r3, [r7, #12]
    wNBlocks |= 0x8000u; // Mark block size as 32byte
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009570:	60fb      	str	r3, [r7, #12]
    *pdwReg = (uint16_t)wNBlocks;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	b29a      	uxth	r2, r3
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	801a      	strh	r2, [r3, #0]
    {
      wNBlocks++;
    }
    *pdwReg = (uint16_t)((wNBlocks) << 10u);
  }
}
 800957a:	e010      	b.n	800959e <pcd_set_ep_cnt_rx_reg+0x60>
    wNBlocks = wCount >> 1u;
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	085b      	lsrs	r3, r3, #1
 8009580:	60fb      	str	r3, [r7, #12]
    if((wCount & 0x1U) != 0u)
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	f003 0301 	and.w	r3, r3, #1
 8009588:	2b00      	cmp	r3, #0
 800958a:	d002      	beq.n	8009592 <pcd_set_ep_cnt_rx_reg+0x54>
      wNBlocks++;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	3301      	adds	r3, #1
 8009590:	60fb      	str	r3, [r7, #12]
    *pdwReg = (uint16_t)((wNBlocks) << 10u);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	b29b      	uxth	r3, r3
 8009596:	029b      	lsls	r3, r3, #10
 8009598:	b29a      	uxth	r2, r3
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	801a      	strh	r2, [r3, #0]
}
 800959e:	bf00      	nop
 80095a0:	3714      	adds	r7, #20
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bc80      	pop	{r7}
 80095a6:	4770      	bx	lr

080095a8 <pcd_set_ep_address>:
  * @param  bEpNum Endpoint Number.
  * @param  bAddr Address.
  * @retval None
  */
static inline void pcd_set_ep_address(USB_TypeDef * USBx,  uint32_t bEpNum, uint32_t bAddr)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b086      	sub	sp, #24
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	60f8      	str	r0, [r7, #12]
 80095b0:	60b9      	str	r1, [r7, #8]
 80095b2:	607a      	str	r2, [r7, #4]
  uint32_t regVal = pcd_get_endpoint(USBx, bEpNum);
 80095b4:	68b9      	ldr	r1, [r7, #8]
 80095b6:	68f8      	ldr	r0, [r7, #12]
 80095b8:	f7ff ff46 	bl	8009448 <pcd_get_endpoint>
 80095bc:	4603      	mov	r3, r0
 80095be:	617b      	str	r3, [r7, #20]
  regVal &= USB_EPREG_MASK;
 80095c0:	697a      	ldr	r2, [r7, #20]
 80095c2:	f648 738f 	movw	r3, #36751	; 0x8f8f
 80095c6:	4013      	ands	r3, r2
 80095c8:	617b      	str	r3, [r7, #20]
  regVal |= bAddr;
 80095ca:	697a      	ldr	r2, [r7, #20]
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	4313      	orrs	r3, r2
 80095d0:	617b      	str	r3, [r7, #20]
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX;
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095dc:	617b      	str	r3, [r7, #20]
  pcd_set_endpoint(USBx, bEpNum,regVal);
 80095de:	697a      	ldr	r2, [r7, #20]
 80095e0:	68b9      	ldr	r1, [r7, #8]
 80095e2:	68f8      	ldr	r0, [r7, #12]
 80095e4:	f7ff ff1c 	bl	8009420 <pcd_set_endpoint>
}
 80095e8:	bf00      	nop
 80095ea:	3718      	adds	r7, #24
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}

080095f0 <pcd_btable_word_ptr>:

static inline __IO uint16_t * pcd_btable_word_ptr(USB_TypeDef * USBx, size_t x)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b085      	sub	sp, #20
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
 80095f8:	6039      	str	r1, [r7, #0]
  size_t total_word_offset = (((USBx)->BTABLE)>>1) + x;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009600:	b29b      	uxth	r3, r3
 8009602:	085b      	lsrs	r3, r3, #1
 8009604:	b29b      	uxth	r3, r3
 8009606:	461a      	mov	r2, r3
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	4413      	add	r3, r2
 800960c:	60fb      	str	r3, [r7, #12]
  total_word_offset *= PMA_STRIDE;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	005b      	lsls	r3, r3, #1
 8009612:	60fb      	str	r3, [r7, #12]
  return &(pma[total_word_offset]);
 8009614:	4a04      	ldr	r2, [pc, #16]	; (8009628 <pcd_btable_word_ptr+0x38>)
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	005b      	lsls	r3, r3, #1
 800961a:	4413      	add	r3, r2
}
 800961c:	4618      	mov	r0, r3
 800961e:	3714      	adds	r7, #20
 8009620:	46bd      	mov	sp, r7
 8009622:	bc80      	pop	{r7}
 8009624:	4770      	bx	lr
 8009626:	bf00      	nop
 8009628:	40006000 	.word	0x40006000

0800962c <pcd_ep_tx_address_ptr>:

// Pointers to the PMA table entries (using the ARM address space)
static inline __IO uint16_t* pcd_ep_tx_address_ptr(USB_TypeDef * USBx, uint32_t bEpNum)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b082      	sub	sp, #8
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	6039      	str	r1, [r7, #0]
  return pcd_btable_word_ptr(USBx,(bEpNum)*4u + 0u);
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	009b      	lsls	r3, r3, #2
 800963a:	4619      	mov	r1, r3
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f7ff ffd7 	bl	80095f0 <pcd_btable_word_ptr>
 8009642:	4603      	mov	r3, r0
}
 8009644:	4618      	mov	r0, r3
 8009646:	3708      	adds	r7, #8
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}

0800964c <pcd_ep_tx_cnt_ptr>:
static inline __IO uint16_t* pcd_ep_tx_cnt_ptr(USB_TypeDef * USBx, uint32_t bEpNum)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b082      	sub	sp, #8
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	6039      	str	r1, [r7, #0]
  return pcd_btable_word_ptr(USBx,(bEpNum)*4u + 1u);
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	009b      	lsls	r3, r3, #2
 800965a:	3301      	adds	r3, #1
 800965c:	4619      	mov	r1, r3
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f7ff ffc6 	bl	80095f0 <pcd_btable_word_ptr>
 8009664:	4603      	mov	r3, r0
}
 8009666:	4618      	mov	r0, r3
 8009668:	3708      	adds	r7, #8
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}

0800966e <pcd_ep_rx_address_ptr>:

static inline __IO uint16_t* pcd_ep_rx_address_ptr(USB_TypeDef * USBx, uint32_t bEpNum)
{
 800966e:	b580      	push	{r7, lr}
 8009670:	b082      	sub	sp, #8
 8009672:	af00      	add	r7, sp, #0
 8009674:	6078      	str	r0, [r7, #4]
 8009676:	6039      	str	r1, [r7, #0]
  return  pcd_btable_word_ptr(USBx,(bEpNum)*4u + 2u);
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	009b      	lsls	r3, r3, #2
 800967c:	3302      	adds	r3, #2
 800967e:	4619      	mov	r1, r3
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f7ff ffb5 	bl	80095f0 <pcd_btable_word_ptr>
 8009686:	4603      	mov	r3, r0
}
 8009688:	4618      	mov	r0, r3
 800968a:	3708      	adds	r7, #8
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}

08009690 <pcd_ep_rx_cnt_ptr>:

static inline __IO uint16_t* pcd_ep_rx_cnt_ptr(USB_TypeDef * USBx, uint32_t bEpNum)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b082      	sub	sp, #8
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
 8009698:	6039      	str	r1, [r7, #0]
  return pcd_btable_word_ptr(USBx,(bEpNum)*4u + 3u);
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	009b      	lsls	r3, r3, #2
 800969e:	3303      	adds	r3, #3
 80096a0:	4619      	mov	r1, r3
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f7ff ffa4 	bl	80095f0 <pcd_btable_word_ptr>
 80096a8:	4603      	mov	r3, r0
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3708      	adds	r7, #8
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}

080096b2 <pcd_set_ep_tx_cnt>:

static inline void pcd_set_ep_tx_cnt(USB_TypeDef * USBx,  uint32_t bEpNum, uint32_t wCount)
{
 80096b2:	b580      	push	{r7, lr}
 80096b4:	b084      	sub	sp, #16
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	60f8      	str	r0, [r7, #12]
 80096ba:	60b9      	str	r1, [r7, #8]
 80096bc:	607a      	str	r2, [r7, #4]
  *pcd_ep_tx_cnt_ptr(USBx, bEpNum) = (uint16_t)wCount;
 80096be:	68b9      	ldr	r1, [r7, #8]
 80096c0:	68f8      	ldr	r0, [r7, #12]
 80096c2:	f7ff ffc3 	bl	800964c <pcd_ep_tx_cnt_ptr>
 80096c6:	4603      	mov	r3, r0
 80096c8:	687a      	ldr	r2, [r7, #4]
 80096ca:	b292      	uxth	r2, r2
 80096cc:	801a      	strh	r2, [r3, #0]
}
 80096ce:	bf00      	nop
 80096d0:	3710      	adds	r7, #16
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}

080096d6 <pcd_set_ep_rx_cnt>:

static inline void pcd_set_ep_rx_cnt(USB_TypeDef * USBx,  uint32_t bEpNum, uint32_t wCount)
{
 80096d6:	b580      	push	{r7, lr}
 80096d8:	b086      	sub	sp, #24
 80096da:	af00      	add	r7, sp, #0
 80096dc:	60f8      	str	r0, [r7, #12]
 80096de:	60b9      	str	r1, [r7, #8]
 80096e0:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pdwReg = pcd_ep_rx_cnt_ptr((USBx),(bEpNum));
 80096e2:	68b9      	ldr	r1, [r7, #8]
 80096e4:	68f8      	ldr	r0, [r7, #12]
 80096e6:	f7ff ffd3 	bl	8009690 <pcd_ep_rx_cnt_ptr>
 80096ea:	6178      	str	r0, [r7, #20]
  pcd_set_ep_cnt_rx_reg(pdwReg, wCount);
 80096ec:	6879      	ldr	r1, [r7, #4]
 80096ee:	6978      	ldr	r0, [r7, #20]
 80096f0:	f7ff ff25 	bl	800953e <pcd_set_ep_cnt_rx_reg>
}
 80096f4:	bf00      	nop
 80096f6:	3718      	adds	r7, #24
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}

080096fc <pcd_set_ep_tx_status>:
  * @param  bEpNum Endpoint Number.
  * @param  wState new state
  * @retval None
  */
static inline void pcd_set_ep_tx_status(USB_TypeDef * USBx,  uint32_t bEpNum, uint32_t wState)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b086      	sub	sp, #24
 8009700:	af00      	add	r7, sp, #0
 8009702:	60f8      	str	r0, [r7, #12]
 8009704:	60b9      	str	r1, [r7, #8]
 8009706:	607a      	str	r2, [r7, #4]
  uint32_t regVal = pcd_get_endpoint(USBx, bEpNum);
 8009708:	68b9      	ldr	r1, [r7, #8]
 800970a:	68f8      	ldr	r0, [r7, #12]
 800970c:	f7ff fe9c 	bl	8009448 <pcd_get_endpoint>
 8009710:	4603      	mov	r3, r0
 8009712:	617b      	str	r3, [r7, #20]
  regVal &= USB_EPTX_DTOGMASK;
 8009714:	697a      	ldr	r2, [r7, #20]
 8009716:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 800971a:	4013      	ands	r3, r2
 800971c:	617b      	str	r3, [r7, #20]

  /* toggle first bit ? */
  if((USB_EPTX_DTOG1 & (wState))!= 0U)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f003 0310 	and.w	r3, r3, #16
 8009724:	2b00      	cmp	r3, #0
 8009726:	d003      	beq.n	8009730 <pcd_set_ep_tx_status+0x34>
  {
    regVal ^= USB_EPTX_DTOG1;
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	f083 0310 	eor.w	r3, r3, #16
 800972e:	617b      	str	r3, [r7, #20]
  }
  /* toggle second bit ?  */
  if((USB_EPTX_DTOG2 & ((uint32_t)(wState)))!= 0U)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f003 0320 	and.w	r3, r3, #32
 8009736:	2b00      	cmp	r3, #0
 8009738:	d003      	beq.n	8009742 <pcd_set_ep_tx_status+0x46>
  {
    regVal ^= USB_EPTX_DTOG2;
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	f083 0320 	eor.w	r3, r3, #32
 8009740:	617b      	str	r3, [r7, #20]
  }
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX;
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800974c:	617b      	str	r3, [r7, #20]
  pcd_set_endpoint(USBx, bEpNum, regVal);
 800974e:	697a      	ldr	r2, [r7, #20]
 8009750:	68b9      	ldr	r1, [r7, #8]
 8009752:	68f8      	ldr	r0, [r7, #12]
 8009754:	f7ff fe64 	bl	8009420 <pcd_set_endpoint>
} /* pcd_set_ep_tx_status */
 8009758:	bf00      	nop
 800975a:	3718      	adds	r7, #24
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}

08009760 <pcd_set_ep_rx_status>:
  * @param  wState new state
  * @retval None
  */

static inline void pcd_set_ep_rx_status(USB_TypeDef * USBx,  uint32_t bEpNum, uint32_t wState)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b086      	sub	sp, #24
 8009764:	af00      	add	r7, sp, #0
 8009766:	60f8      	str	r0, [r7, #12]
 8009768:	60b9      	str	r1, [r7, #8]
 800976a:	607a      	str	r2, [r7, #4]
  uint32_t regVal = pcd_get_endpoint(USBx, bEpNum);
 800976c:	68b9      	ldr	r1, [r7, #8]
 800976e:	68f8      	ldr	r0, [r7, #12]
 8009770:	f7ff fe6a 	bl	8009448 <pcd_get_endpoint>
 8009774:	4603      	mov	r3, r0
 8009776:	617b      	str	r3, [r7, #20]
  regVal &= USB_EPRX_DTOGMASK;
 8009778:	697a      	ldr	r2, [r7, #20]
 800977a:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 800977e:	4013      	ands	r3, r2
 8009780:	617b      	str	r3, [r7, #20]

  /* toggle first bit ? */
  if((USB_EPRX_DTOG1 & wState)!= 0U)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009788:	2b00      	cmp	r3, #0
 800978a:	d003      	beq.n	8009794 <pcd_set_ep_rx_status+0x34>
  {
    regVal ^= USB_EPRX_DTOG1;
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009792:	617b      	str	r3, [r7, #20]
  }
  /* toggle second bit ? */
  if((USB_EPRX_DTOG2 & wState)!= 0U)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800979a:	2b00      	cmp	r3, #0
 800979c:	d003      	beq.n	80097a6 <pcd_set_ep_rx_status+0x46>
  {
    regVal ^= USB_EPRX_DTOG2;
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80097a4:	617b      	str	r3, [r7, #20]
  }
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX;
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097b0:	617b      	str	r3, [r7, #20]
  pcd_set_endpoint(USBx, bEpNum, regVal);
 80097b2:	697a      	ldr	r2, [r7, #20]
 80097b4:	68b9      	ldr	r1, [r7, #8]
 80097b6:	68f8      	ldr	r0, [r7, #12]
 80097b8:	f7ff fe32 	bl	8009420 <pcd_set_endpoint>
} /* pcd_set_ep_rx_status */
 80097bc:	bf00      	nop
 80097be:	3718      	adds	r7, #24
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}

080097c4 <pcd_rx_dtog>:
  * @param  USBx USB peripheral instance register address.
  * @param  bEpNum Endpoint Number.
  * @retval None
  */
static inline void pcd_rx_dtog(USB_TypeDef * USBx,  uint32_t bEpNum)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b084      	sub	sp, #16
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	6039      	str	r1, [r7, #0]
  uint32_t regVal = pcd_get_endpoint(USBx, bEpNum);
 80097ce:	6839      	ldr	r1, [r7, #0]
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f7ff fe39 	bl	8009448 <pcd_get_endpoint>
 80097d6:	4603      	mov	r3, r0
 80097d8:	60fb      	str	r3, [r7, #12]
  regVal &= USB_EPREG_MASK;
 80097da:	68fa      	ldr	r2, [r7, #12]
 80097dc:	f648 738f 	movw	r3, #36751	; 0x8f8f
 80097e0:	4013      	ands	r3, r2
 80097e2:	60fb      	str	r3, [r7, #12]
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX|USB_EP_DTOG_RX;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80097ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097ee:	60fb      	str	r3, [r7, #12]
  pcd_set_endpoint(USBx, bEpNum, regVal);
 80097f0:	68fa      	ldr	r2, [r7, #12]
 80097f2:	6839      	ldr	r1, [r7, #0]
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f7ff fe13 	bl	8009420 <pcd_set_endpoint>
}
 80097fa:	bf00      	nop
 80097fc:	3710      	adds	r7, #16
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}

08009802 <pcd_tx_dtog>:

static inline void pcd_tx_dtog(USB_TypeDef * USBx,  uint32_t bEpNum)
{
 8009802:	b580      	push	{r7, lr}
 8009804:	b084      	sub	sp, #16
 8009806:	af00      	add	r7, sp, #0
 8009808:	6078      	str	r0, [r7, #4]
 800980a:	6039      	str	r1, [r7, #0]
  uint32_t regVal = pcd_get_endpoint(USBx, bEpNum);
 800980c:	6839      	ldr	r1, [r7, #0]
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f7ff fe1a 	bl	8009448 <pcd_get_endpoint>
 8009814:	4603      	mov	r3, r0
 8009816:	60fb      	str	r3, [r7, #12]
  regVal &= USB_EPREG_MASK;
 8009818:	68fa      	ldr	r2, [r7, #12]
 800981a:	f648 738f 	movw	r3, #36751	; 0x8f8f
 800981e:	4013      	ands	r3, r2
 8009820:	60fb      	str	r3, [r7, #12]
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX|USB_EP_DTOG_TX;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009828:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800982c:	60fb      	str	r3, [r7, #12]
  pcd_set_endpoint(USBx, bEpNum, regVal);
 800982e:	68fa      	ldr	r2, [r7, #12]
 8009830:	6839      	ldr	r1, [r7, #0]
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f7ff fdf4 	bl	8009420 <pcd_set_endpoint>
}
 8009838:	bf00      	nop
 800983a:	3710      	adds	r7, #16
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}

08009840 <pcd_clear_rx_dtog>:
  * @param  bEpNum Endpoint Number.
  * @retval None
  */

static inline void pcd_clear_rx_dtog(USB_TypeDef * USBx,  uint32_t bEpNum)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b084      	sub	sp, #16
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
 8009848:	6039      	str	r1, [r7, #0]
  uint32_t regVal = pcd_get_endpoint(USBx, bEpNum);
 800984a:	6839      	ldr	r1, [r7, #0]
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f7ff fdfb 	bl	8009448 <pcd_get_endpoint>
 8009852:	4603      	mov	r3, r0
 8009854:	60fb      	str	r3, [r7, #12]
  if((regVal & USB_EP_DTOG_RX) != 0)
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800985c:	2b00      	cmp	r3, #0
 800985e:	d003      	beq.n	8009868 <pcd_clear_rx_dtog+0x28>
  {
    pcd_rx_dtog(USBx,bEpNum);
 8009860:	6839      	ldr	r1, [r7, #0]
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f7ff ffae 	bl	80097c4 <pcd_rx_dtog>
  }
}
 8009868:	bf00      	nop
 800986a:	3710      	adds	r7, #16
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}

08009870 <pcd_clear_tx_dtog>:

static inline void pcd_clear_tx_dtog(USB_TypeDef * USBx,  uint32_t bEpNum)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b084      	sub	sp, #16
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	6039      	str	r1, [r7, #0]
  uint32_t regVal = pcd_get_endpoint(USBx, bEpNum);
 800987a:	6839      	ldr	r1, [r7, #0]
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f7ff fde3 	bl	8009448 <pcd_get_endpoint>
 8009882:	4603      	mov	r3, r0
 8009884:	60fb      	str	r3, [r7, #12]
  if((regVal & USB_EP_DTOG_TX) != 0)
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800988c:	2b00      	cmp	r3, #0
 800988e:	d003      	beq.n	8009898 <pcd_clear_tx_dtog+0x28>
  {
    pcd_tx_dtog(USBx,bEpNum);
 8009890:	6839      	ldr	r1, [r7, #0]
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f7ff ffb5 	bl	8009802 <pcd_tx_dtog>
  }
}
 8009898:	bf00      	nop
 800989a:	3710      	adds	r7, #16
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}

080098a0 <pcd_clear_ep_kind>:
  regVal &= USB_EPREG_MASK;
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX;
  pcd_set_endpoint(USBx, bEpNum, regVal);
}
static inline void pcd_clear_ep_kind(USB_TypeDef * USBx, uint32_t bEpNum)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b084      	sub	sp, #16
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
 80098a8:	6039      	str	r1, [r7, #0]
  uint32_t regVal = pcd_get_endpoint(USBx, bEpNum);
 80098aa:	6839      	ldr	r1, [r7, #0]
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f7ff fdcb 	bl	8009448 <pcd_get_endpoint>
 80098b2:	4603      	mov	r3, r0
 80098b4:	60fb      	str	r3, [r7, #12]
  regVal &= USB_EPKIND_MASK;
 80098b6:	68fa      	ldr	r2, [r7, #12]
 80098b8:	f648 638f 	movw	r3, #36495	; 0x8e8f
 80098bc:	4013      	ands	r3, r2
 80098be:	60fb      	str	r3, [r7, #12]
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098ca:	60fb      	str	r3, [r7, #12]
  pcd_set_endpoint(USBx, bEpNum, regVal);
 80098cc:	68fa      	ldr	r2, [r7, #12]
 80098ce:	6839      	ldr	r1, [r7, #0]
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f7ff fda5 	bl	8009420 <pcd_set_endpoint>
}
 80098d6:	bf00      	nop
 80098d8:	3710      	adds	r7, #16
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
	...

080098e0 <xfer_ctl_ptr>:
} xfer_ctl_t;

static xfer_ctl_t xfer_status[MAX_EP_COUNT][2];

static inline xfer_ctl_t* xfer_ctl_ptr(uint32_t epnum, uint32_t dir)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b083      	sub	sp, #12
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	6039      	str	r1, [r7, #0]
  return &xfer_status[epnum][dir];
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	461a      	mov	r2, r3
 80098ee:	0052      	lsls	r2, r2, #1
 80098f0:	441a      	add	r2, r3
 80098f2:	0093      	lsls	r3, r2, #2
 80098f4:	461a      	mov	r2, r3
 80098f6:	6879      	ldr	r1, [r7, #4]
 80098f8:	460b      	mov	r3, r1
 80098fa:	005b      	lsls	r3, r3, #1
 80098fc:	440b      	add	r3, r1
 80098fe:	00db      	lsls	r3, r3, #3
 8009900:	4413      	add	r3, r2
 8009902:	4a03      	ldr	r2, [pc, #12]	; (8009910 <xfer_ctl_ptr+0x30>)
 8009904:	4413      	add	r3, r2
}
 8009906:	4618      	mov	r0, r3
 8009908:	370c      	adds	r7, #12
 800990a:	46bd      	mov	sp, r7
 800990c:	bc80      	pop	{r7}
 800990e:	4770      	bx	lr
 8009910:	200025fc 	.word	0x200025fc

08009914 <reg16_clear_bits>:
static uint16_t dcd_ep_ctr_handler(void);


// Using a function due to better type checks
// This seems better than having to do type casts everywhere else
static inline void reg16_clear_bits(__IO uint16_t *reg, uint16_t mask) {
 8009914:	b480      	push	{r7}
 8009916:	b083      	sub	sp, #12
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	460b      	mov	r3, r1
 800991e:	807b      	strh	r3, [r7, #2]
  *reg = (uint16_t)(*reg & ~mask);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	881b      	ldrh	r3, [r3, #0]
 8009924:	b29b      	uxth	r3, r3
 8009926:	b21a      	sxth	r2, r3
 8009928:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800992c:	43db      	mvns	r3, r3
 800992e:	b21b      	sxth	r3, r3
 8009930:	4013      	ands	r3, r2
 8009932:	b21b      	sxth	r3, r3
 8009934:	b29a      	uxth	r2, r3
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	801a      	strh	r2, [r3, #0]
}
 800993a:	bf00      	nop
 800993c:	370c      	adds	r7, #12
 800993e:	46bd      	mov	sp, r7
 8009940:	bc80      	pop	{r7}
 8009942:	4770      	bx	lr

08009944 <dcd_init>:

void dcd_init (uint8_t rhport)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b088      	sub	sp, #32
 8009948:	af00      	add	r7, sp, #0
 800994a:	4603      	mov	r3, r0
 800994c:	71fb      	strb	r3, [r7, #7]
  /* Use __HAL_RCC_USB_CLK_ENABLE(); to enable the clocks before calling this function */

  /* The RM mentions to use a special ordering of PDWN and FRES, but this isn't done in HAL.
   * Here, the RM is followed. */

  for(uint32_t i = 0; i<200; i++) // should be a few us
 800994e:	2300      	movs	r3, #0
 8009950:	61fb      	str	r3, [r7, #28]
 8009952:	e003      	b.n	800995c <dcd_init+0x18>
  {
    asm("NOP");
 8009954:	bf00      	nop
  for(uint32_t i = 0; i<200; i++) // should be a few us
 8009956:	69fb      	ldr	r3, [r7, #28]
 8009958:	3301      	adds	r3, #1
 800995a:	61fb      	str	r3, [r7, #28]
 800995c:	69fb      	ldr	r3, [r7, #28]
 800995e:	2bc7      	cmp	r3, #199	; 0xc7
 8009960:	d9f8      	bls.n	8009954 <dcd_init+0x10>
  }
	// Perform USB peripheral reset
  USB->CNTR = USB_CNTR_FRES | USB_CNTR_PDWN;
 8009962:	4b2b      	ldr	r3, [pc, #172]	; (8009a10 <dcd_init+0xcc>)
 8009964:	2203      	movs	r2, #3
 8009966:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  for(uint32_t i = 0; i<200; i++) // should be a few us
 800996a:	2300      	movs	r3, #0
 800996c:	61bb      	str	r3, [r7, #24]
 800996e:	e003      	b.n	8009978 <dcd_init+0x34>
  {
    asm("NOP");
 8009970:	bf00      	nop
  for(uint32_t i = 0; i<200; i++) // should be a few us
 8009972:	69bb      	ldr	r3, [r7, #24]
 8009974:	3301      	adds	r3, #1
 8009976:	61bb      	str	r3, [r7, #24]
 8009978:	69bb      	ldr	r3, [r7, #24]
 800997a:	2bc7      	cmp	r3, #199	; 0xc7
 800997c:	d9f8      	bls.n	8009970 <dcd_init+0x2c>
  }
  reg16_clear_bits(&USB->CNTR, USB_CNTR_PDWN);// Remove powerdown
 800997e:	2102      	movs	r1, #2
 8009980:	4824      	ldr	r0, [pc, #144]	; (8009a14 <dcd_init+0xd0>)
 8009982:	f7ff ffc7 	bl	8009914 <reg16_clear_bits>
  // Wait startup time, for F042 and F070, this is <= 1 us.
  for(uint32_t i = 0; i<200; i++) // should be a few us
 8009986:	2300      	movs	r3, #0
 8009988:	617b      	str	r3, [r7, #20]
 800998a:	e003      	b.n	8009994 <dcd_init+0x50>
  {
    asm("NOP");
 800998c:	bf00      	nop
  for(uint32_t i = 0; i<200; i++) // should be a few us
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	3301      	adds	r3, #1
 8009992:	617b      	str	r3, [r7, #20]
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	2bc7      	cmp	r3, #199	; 0xc7
 8009998:	d9f8      	bls.n	800998c <dcd_init+0x48>
  }
  USB->CNTR = 0; // Enable USB
 800999a:	4b1d      	ldr	r3, [pc, #116]	; (8009a10 <dcd_init+0xcc>)
 800999c:	2200      	movs	r2, #0
 800999e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  USB->BTABLE = DCD_STM32_BTABLE_BASE;
 80099a2:	4b1b      	ldr	r3, [pc, #108]	; (8009a10 <dcd_init+0xcc>)
 80099a4:	2200      	movs	r2, #0
 80099a6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  reg16_clear_bits(&USB->ISTR, USB_ISTR_ALL_EVENTS); // Clear pending interrupts
 80099aa:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
 80099ae:	481a      	ldr	r0, [pc, #104]	; (8009a18 <dcd_init+0xd4>)
 80099b0:	f7ff ffb0 	bl	8009914 <reg16_clear_bits>

  // Reset endpoints to disabled
  for(uint32_t i=0; i<STFSDEV_EP_COUNT; i++)
 80099b4:	2300      	movs	r3, #0
 80099b6:	613b      	str	r3, [r7, #16]
 80099b8:	e007      	b.n	80099ca <dcd_init+0x86>
  {
    // This doesn't clear all bits since some bits are "toggle", but does set the type to DISABLED.
    pcd_set_endpoint(USB,i,0u);
 80099ba:	2200      	movs	r2, #0
 80099bc:	6939      	ldr	r1, [r7, #16]
 80099be:	4814      	ldr	r0, [pc, #80]	; (8009a10 <dcd_init+0xcc>)
 80099c0:	f7ff fd2e 	bl	8009420 <pcd_set_endpoint>
  for(uint32_t i=0; i<STFSDEV_EP_COUNT; i++)
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	3301      	adds	r3, #1
 80099c8:	613b      	str	r3, [r7, #16]
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	2b07      	cmp	r3, #7
 80099ce:	d9f4      	bls.n	80099ba <dcd_init+0x76>
  }

  // Initialize the BTABLE for EP0 at this point (though setting up the EP0R is unneeded)
  // This is actually not necessary, but helps debugging to start with a blank RAM area
  for(uint32_t i=0;i<(DCD_STM32_BTABLE_LENGTH>>1); i++)
 80099d0:	2300      	movs	r3, #0
 80099d2:	60fb      	str	r3, [r7, #12]
 80099d4:	e008      	b.n	80099e8 <dcd_init+0xa4>
  {
    pma[PMA_STRIDE*(DCD_STM32_BTABLE_BASE + i)] = 0u;
 80099d6:	4a11      	ldr	r2, [pc, #68]	; (8009a1c <dcd_init+0xd8>)
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	009b      	lsls	r3, r3, #2
 80099dc:	4413      	add	r3, r2
 80099de:	2200      	movs	r2, #0
 80099e0:	801a      	strh	r2, [r3, #0]
  for(uint32_t i=0;i<(DCD_STM32_BTABLE_LENGTH>>1); i++)
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	3301      	adds	r3, #1
 80099e6:	60fb      	str	r3, [r7, #12]
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	2bff      	cmp	r3, #255	; 0xff
 80099ec:	d9f3      	bls.n	80099d6 <dcd_init+0x92>
  }
  USB->CNTR |= USB_CNTR_RESETM | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_CTRM | USB_CNTR_SUSPM | USB_CNTR_WKUPM;
 80099ee:	4b08      	ldr	r3, [pc, #32]	; (8009a10 <dcd_init+0xcc>)
 80099f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80099f4:	b29a      	uxth	r2, r3
 80099f6:	4906      	ldr	r1, [pc, #24]	; (8009a10 <dcd_init+0xcc>)
 80099f8:	4b09      	ldr	r3, [pc, #36]	; (8009a20 <dcd_init+0xdc>)
 80099fa:	4313      	orrs	r3, r2
 80099fc:	b29b      	uxth	r3, r3
 80099fe:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
  dcd_handle_bus_reset();
 8009a02:	f000 f877 	bl	8009af4 <dcd_handle_bus_reset>
  USB->BCDR |= USB_BCDR_DPPU;
#else
  // FIXME: callback to the user to ask them to twiddle a GPIO to disable/enable D+???
#endif

}
 8009a06:	bf00      	nop
 8009a08:	3720      	adds	r7, #32
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}
 8009a0e:	bf00      	nop
 8009a10:	40005c00 	.word	0x40005c00
 8009a14:	40005c40 	.word	0x40005c40
 8009a18:	40005c44 	.word	0x40005c44
 8009a1c:	40006000 	.word	0x40006000
 8009a20:	ffff9f00 	.word	0xffff9f00

08009a24 <dcd_int_enable>:

// Enable device interrupt
void dcd_int_enable (uint8_t rhport)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b082      	sub	sp, #8
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("dsb 0xF":::"memory");
 8009a2e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009a32:	f3bf 8f6f 	isb	sy
#elif CFG_TUSB_MCU == OPT_MCU_STM32F3
  NVIC_EnableIRQ(USB_HP_CAN_TX_IRQn);
  NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
  NVIC_EnableIRQ(USBWakeUp_IRQn);
#elif CFG_TUSB_MCU == OPT_MCU_STM32F1
  NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8009a36:	2013      	movs	r0, #19
 8009a38:	f7ff fcb4 	bl	80093a4 <__NVIC_EnableIRQ>
  NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009a3c:	2014      	movs	r0, #20
 8009a3e:	f7ff fcb1 	bl	80093a4 <__NVIC_EnableIRQ>
  NVIC_EnableIRQ(USBWakeUp_IRQn);
 8009a42:	202a      	movs	r0, #42	; 0x2a
 8009a44:	f7ff fcae 	bl	80093a4 <__NVIC_EnableIRQ>
#else
  #error Unknown arch in USB driver
#endif
}
 8009a48:	bf00      	nop
 8009a4a:	3708      	adds	r7, #8
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}

08009a50 <dcd_int_disable>:

// Disable device interrupt
void dcd_int_disable(uint8_t rhport)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b082      	sub	sp, #8
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	4603      	mov	r3, r0
 8009a58:	71fb      	strb	r3, [r7, #7]
#elif CFG_TUSB_MCU == OPT_MCU_STM32F3
  NVIC_DisableIRQ(USB_HP_CAN_TX_IRQn);
  NVIC_DisableIRQ(USB_LP_CAN_RX0_IRQn);
  NVIC_DisableIRQ(USBWakeUp_IRQn);
#elif CFG_TUSB_MCU == OPT_MCU_STM32F1
  NVIC_DisableIRQ(USB_HP_CAN1_TX_IRQn);
 8009a5a:	2013      	movs	r0, #19
 8009a5c:	f7ff fcbe 	bl	80093dc <__NVIC_DisableIRQ>
  NVIC_DisableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009a60:	2014      	movs	r0, #20
 8009a62:	f7ff fcbb 	bl	80093dc <__NVIC_DisableIRQ>
  NVIC_DisableIRQ(USBWakeUp_IRQn);
 8009a66:	202a      	movs	r0, #42	; 0x2a
 8009a68:	f7ff fcb8 	bl	80093dc <__NVIC_DisableIRQ>
#else
  #error Unknown arch in USB driver
#endif

  // CMSIS has a membar after disabling interrupts
}
 8009a6c:	bf00      	nop
 8009a6e:	3708      	adds	r7, #8
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}

08009a74 <dcd_set_address>:

// Receive Set Address request, mcu port must also include status IN response
void dcd_set_address(uint8_t rhport, uint8_t dev_addr)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b082      	sub	sp, #8
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	460a      	mov	r2, r1
 8009a7e:	71fb      	strb	r3, [r7, #7]
 8009a80:	4613      	mov	r3, r2
 8009a82:	71bb      	strb	r3, [r7, #6]
  (void) rhport;
  (void) dev_addr;

  // Respond with status
  dcd_edpt_xfer(rhport, tu_edpt_addr(0, TUSB_DIR_IN), NULL, 0);
 8009a84:	2101      	movs	r1, #1
 8009a86:	2000      	movs	r0, #0
 8009a88:	f7ff fc73 	bl	8009372 <tu_edpt_addr>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	4619      	mov	r1, r3
 8009a90:	79f8      	ldrb	r0, [r7, #7]
 8009a92:	2300      	movs	r3, #0
 8009a94:	2200      	movs	r2, #0
 8009a96:	f000 fbed 	bl	800a274 <dcd_edpt_xfer>

  // DCD can only set address after status for this request is complete.
  // do it at dcd_edpt0_status_complete()
}
 8009a9a:	bf00      	nop
 8009a9c:	3708      	adds	r7, #8
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}

08009aa2 <dcd_set_config>:

// Receive Set Config request
void dcd_set_config (uint8_t rhport, uint8_t config_num)
{
 8009aa2:	b480      	push	{r7}
 8009aa4:	b083      	sub	sp, #12
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	460a      	mov	r2, r1
 8009aac:	71fb      	strb	r3, [r7, #7]
 8009aae:	4613      	mov	r3, r2
 8009ab0:	71bb      	strb	r3, [r7, #6]
  (void) rhport;
  (void) config_num;
  // Nothing to do? Handled by stack.
}
 8009ab2:	bf00      	nop
 8009ab4:	370c      	adds	r7, #12
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bc80      	pop	{r7}
 8009aba:	4770      	bx	lr

08009abc <dcd_remote_wakeup>:

void dcd_remote_wakeup(uint8_t rhport)
{
 8009abc:	b480      	push	{r7}
 8009abe:	b083      	sub	sp, #12
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  USB->CNTR |= (uint16_t) USB_CNTR_RESUME;
 8009ac6:	4b09      	ldr	r3, [pc, #36]	; (8009aec <dcd_remote_wakeup+0x30>)
 8009ac8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	4a07      	ldr	r2, [pc, #28]	; (8009aec <dcd_remote_wakeup+0x30>)
 8009ad0:	f043 0310 	orr.w	r3, r3, #16
 8009ad4:	b29b      	uxth	r3, r3
 8009ad6:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
  remoteWakeCountdown = 4u; // required to be 1 to 15 ms, ESOF should trigger every 1ms.
 8009ada:	4b05      	ldr	r3, [pc, #20]	; (8009af0 <dcd_remote_wakeup+0x34>)
 8009adc:	2204      	movs	r2, #4
 8009ade:	701a      	strb	r2, [r3, #0]
}
 8009ae0:	bf00      	nop
 8009ae2:	370c      	adds	r7, #12
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bc80      	pop	{r7}
 8009ae8:	4770      	bx	lr
 8009aea:	bf00      	nop
 8009aec:	40005c00 	.word	0x40005c00
 8009af0:	200026d4 	.word	0x200026d4

08009af4 <dcd_handle_bus_reset>:
#if defined(__GNUC__) && (__GNUC__ >= 7)
#pragma GCC diagnostic pop
#endif

static void dcd_handle_bus_reset(void)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b082      	sub	sp, #8
 8009af8:	af00      	add	r7, sp, #0
  //__IO uint16_t * const epreg = &(EPREG(0));
  USB->DADDR = 0u; // disable USB peripheral by clearing the EF flag
 8009afa:	4b12      	ldr	r3, [pc, #72]	; (8009b44 <dcd_handle_bus_reset+0x50>)
 8009afc:	2200      	movs	r2, #0
 8009afe:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  // Clear all EPREG (or maybe this is automatic? I'm not sure)
  for(uint32_t i=0; i<STFSDEV_EP_COUNT; i++)
 8009b02:	2300      	movs	r3, #0
 8009b04:	607b      	str	r3, [r7, #4]
 8009b06:	e007      	b.n	8009b18 <dcd_handle_bus_reset+0x24>
  {
    pcd_set_endpoint(USB,i,0u);
 8009b08:	2200      	movs	r2, #0
 8009b0a:	6879      	ldr	r1, [r7, #4]
 8009b0c:	480d      	ldr	r0, [pc, #52]	; (8009b44 <dcd_handle_bus_reset+0x50>)
 8009b0e:	f7ff fc87 	bl	8009420 <pcd_set_endpoint>
  for(uint32_t i=0; i<STFSDEV_EP_COUNT; i++)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	3301      	adds	r3, #1
 8009b16:	607b      	str	r3, [r7, #4]
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2b07      	cmp	r3, #7
 8009b1c:	d9f4      	bls.n	8009b08 <dcd_handle_bus_reset+0x14>
  }

  ep_buf_ptr = DCD_STM32_BTABLE_BASE + 8*MAX_EP_COUNT; // 8 bytes per endpoint (two TX and two RX words, each)
 8009b1e:	4b0a      	ldr	r3, [pc, #40]	; (8009b48 <dcd_handle_bus_reset+0x54>)
 8009b20:	2240      	movs	r2, #64	; 0x40
 8009b22:	801a      	strh	r2, [r3, #0]
  dcd_edpt_open (0, &ep0OUT_desc);
 8009b24:	4909      	ldr	r1, [pc, #36]	; (8009b4c <dcd_handle_bus_reset+0x58>)
 8009b26:	2000      	movs	r0, #0
 8009b28:	f000 fa86 	bl	800a038 <dcd_edpt_open>
  dcd_edpt_open (0, &ep0IN_desc);
 8009b2c:	4908      	ldr	r1, [pc, #32]	; (8009b50 <dcd_handle_bus_reset+0x5c>)
 8009b2e:	2000      	movs	r0, #0
 8009b30:	f000 fa82 	bl	800a038 <dcd_edpt_open>

  USB->DADDR = USB_DADDR_EF; // Set enable flag, and leaving the device address as zero.
 8009b34:	4b03      	ldr	r3, [pc, #12]	; (8009b44 <dcd_handle_bus_reset+0x50>)
 8009b36:	2280      	movs	r2, #128	; 0x80
 8009b38:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 8009b3c:	bf00      	nop
 8009b3e:	3708      	adds	r7, #8
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}
 8009b44:	40005c00 	.word	0x40005c00
 8009b48:	200026d6 	.word	0x200026d6
 8009b4c:	0800a8f0 	.word	0x0800a8f0
 8009b50:	0800a8f8 	.word	0x0800a8f8

08009b54 <dcd_ep_ctr_handler>:

// FIXME: Defined to return uint16 so that ASSERT can be used, even though a return value is not needed.
static uint16_t dcd_ep_ctr_handler(void)
{
 8009b54:	b590      	push	{r4, r7, lr}
 8009b56:	b08d      	sub	sp, #52	; 0x34
 8009b58:	af02      	add	r7, sp, #8
  uint32_t count=0U;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t EPindex;
  __IO uint16_t wIstr;
  __IO uint16_t wEPVal = 0U;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	813b      	strh	r3, [r7, #8]

  // stack variables to pass to USBD

  /* stay in loop while pending interrupts */
  while (((wIstr = USB->ISTR) & USB_ISTR_CTR) != 0U)
 8009b62:	e188      	b.n	8009e76 <dcd_ep_ctr_handler+0x322>
  {
    /* extract highest priority endpoint index */
    EPindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8009b64:	897b      	ldrh	r3, [r7, #10]
 8009b66:	b29b      	uxth	r3, r3
 8009b68:	b2db      	uxtb	r3, r3
 8009b6a:	f003 030f 	and.w	r3, r3, #15
 8009b6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    if (EPindex == 0U)
 8009b72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	f040 80d0 	bne.w	8009d1c <dcd_ep_ctr_handler+0x1c8>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8009b7c:	897b      	ldrh	r3, [r7, #10]
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	f003 0310 	and.w	r3, r3, #16
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d131      	bne.n	8009bec <dcd_ep_ctr_handler+0x98>
      {
        /* DIR = 0  => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        pcd_clear_tx_ep_ctr(USB, 0);
 8009b88:	2100      	movs	r1, #0
 8009b8a:	48b3      	ldr	r0, [pc, #716]	; (8009e58 <dcd_ep_ctr_handler+0x304>)
 8009b8c:	f7ff fcab 	bl	80094e6 <pcd_clear_tx_ep_ctr>

        xfer_ctl_t * xfer = xfer_ctl_ptr(EPindex,TUSB_DIR_IN);
 8009b90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009b94:	2101      	movs	r1, #1
 8009b96:	4618      	mov	r0, r3
 8009b98:	f7ff fea2 	bl	80098e0 <xfer_ctl_ptr>
 8009b9c:	60f8      	str	r0, [r7, #12]

        if((xfer->total_len == xfer->queued_len))
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	889a      	ldrh	r2, [r3, #4]
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	88db      	ldrh	r3, [r3, #6]
 8009ba6:	429a      	cmp	r2, r3
 8009ba8:	d118      	bne.n	8009bdc <dcd_ep_ctr_handler+0x88>
        {
          dcd_event_xfer_complete(0u, (uint8_t)(0x80 + EPindex), xfer->total_len, XFER_RESULT_SUCCESS, true);
 8009baa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009bae:	3b80      	subs	r3, #128	; 0x80
 8009bb0:	b2d9      	uxtb	r1, r3
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	889b      	ldrh	r3, [r3, #4]
 8009bb6:	461a      	mov	r2, r3
 8009bb8:	2301      	movs	r3, #1
 8009bba:	9300      	str	r3, [sp, #0]
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	2000      	movs	r0, #0
 8009bc0:	f7ff f85f 	bl	8008c82 <dcd_event_xfer_complete>

          if(xfer->total_len == 0) // Probably a status message?
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	889b      	ldrh	r3, [r3, #4]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	f040 8154 	bne.w	8009e76 <dcd_ep_ctr_handler+0x322>
          {
            pcd_clear_rx_dtog(USB,EPindex);
 8009bce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	48a0      	ldr	r0, [pc, #640]	; (8009e58 <dcd_ep_ctr_handler+0x304>)
 8009bd6:	f7ff fe33 	bl	8009840 <pcd_clear_rx_dtog>
 8009bda:	e14c      	b.n	8009e76 <dcd_ep_ctr_handler+0x322>
          }
        }
        else
        {
          dcd_transmit_packet(xfer,EPindex);
 8009bdc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009be0:	b29b      	uxth	r3, r3
 8009be2:	4619      	mov	r1, r3
 8009be4:	68f8      	ldr	r0, [r7, #12]
 8009be6:	f000 fb05 	bl	800a1f4 <dcd_transmit_packet>
 8009bea:	e144      	b.n	8009e76 <dcd_ep_ctr_handler+0x322>
      else
      {
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */

        xfer_ctl_t *xfer = xfer_ctl_ptr(EPindex,TUSB_DIR_OUT);
 8009bec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009bf0:	2100      	movs	r1, #0
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f7ff fe74 	bl	80098e0 <xfer_ctl_ptr>
 8009bf8:	6138      	str	r0, [r7, #16]

        //ep = &hpcd->OUT_ep[0];
        wEPVal = pcd_get_endpoint(USB, EPindex);
 8009bfa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009bfe:	4619      	mov	r1, r3
 8009c00:	4895      	ldr	r0, [pc, #596]	; (8009e58 <dcd_ep_ctr_handler+0x304>)
 8009c02:	f7ff fc21 	bl	8009448 <pcd_get_endpoint>
 8009c06:	4603      	mov	r3, r0
 8009c08:	813b      	strh	r3, [r7, #8]

        if ((wEPVal & USB_EP_SETUP) != 0U) // SETUP
 8009c0a:	893b      	ldrh	r3, [r7, #8]
 8009c0c:	b29b      	uxth	r3, r3
 8009c0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d02f      	beq.n	8009c76 <dcd_ep_ctr_handler+0x122>
        {
          // The setup_received function uses memcpy, so this must first copy the setup data into
          // user memory, to allow for the 32-bit access that memcpy performs.
          uint8_t userMemBuf[8];
          /* Get SETUP Packet*/
          count = pcd_get_ep_rx_cnt(USB, EPindex);
 8009c16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009c1a:	4619      	mov	r1, r3
 8009c1c:	488e      	ldr	r0, [pc, #568]	; (8009e58 <dcd_ep_ctr_handler+0x304>)
 8009c1e:	f7ff fc7b 	bl	8009518 <pcd_get_ep_rx_cnt>
 8009c22:	6278      	str	r0, [r7, #36]	; 0x24
          if(count == 8) // Setup packet should always be 8 bytes. If not, ignore it, and try again.
 8009c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c26:	2b08      	cmp	r3, #8
 8009c28:	d11e      	bne.n	8009c68 <dcd_ep_ctr_handler+0x114>
          {
            // Must reset EP to NAK (in case it had been stalling) (though, maybe too late here)
            pcd_set_ep_rx_status(USB,0u,USB_EP_RX_NAK);
 8009c2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009c2e:	2100      	movs	r1, #0
 8009c30:	4889      	ldr	r0, [pc, #548]	; (8009e58 <dcd_ep_ctr_handler+0x304>)
 8009c32:	f7ff fd95 	bl	8009760 <pcd_set_ep_rx_status>
            pcd_set_ep_tx_status(USB,0u,USB_EP_TX_NAK);
 8009c36:	2220      	movs	r2, #32
 8009c38:	2100      	movs	r1, #0
 8009c3a:	4887      	ldr	r0, [pc, #540]	; (8009e58 <dcd_ep_ctr_handler+0x304>)
 8009c3c:	f7ff fd5e 	bl	80096fc <pcd_set_ep_tx_status>
            dcd_read_packet_memory(userMemBuf, *pcd_ep_rx_address_ptr(USB,EPindex), 8);
 8009c40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009c44:	4619      	mov	r1, r3
 8009c46:	4884      	ldr	r0, [pc, #528]	; (8009e58 <dcd_ep_ctr_handler+0x304>)
 8009c48:	f7ff fd11 	bl	800966e <pcd_ep_rx_address_ptr>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	881b      	ldrh	r3, [r3, #0]
 8009c50:	b299      	uxth	r1, r3
 8009c52:	463b      	mov	r3, r7
 8009c54:	2208      	movs	r2, #8
 8009c56:	4618      	mov	r0, r3
 8009c58:	f000 fbf6 	bl	800a448 <dcd_read_packet_memory>
            dcd_event_setup_received(0, (uint8_t*)userMemBuf, true);
 8009c5c:	463b      	mov	r3, r7
 8009c5e:	2201      	movs	r2, #1
 8009c60:	4619      	mov	r1, r3
 8009c62:	2000      	movs	r0, #0
 8009c64:	f7fe ffea 	bl	8008c3c <dcd_event_setup_received>
          }
          /* SETUP bit kept frozen while CTR_RX = 1*/
          pcd_clear_rx_ep_ctr(USB, EPindex);
 8009c68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009c6c:	4619      	mov	r1, r3
 8009c6e:	487a      	ldr	r0, [pc, #488]	; (8009e58 <dcd_ep_ctr_handler+0x304>)
 8009c70:	f7ff fc20 	bl	80094b4 <pcd_clear_rx_ep_ctr>
 8009c74:	e0ff      	b.n	8009e76 <dcd_ep_ctr_handler+0x322>
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U) // OUT
 8009c76:	893b      	ldrh	r3, [r7, #8]
 8009c78:	b29b      	uxth	r3, r3
 8009c7a:	b21b      	sxth	r3, r3
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	f280 80fa 	bge.w	8009e76 <dcd_ep_ctr_handler+0x322>
        {

          pcd_clear_rx_ep_ctr(USB, EPindex);
 8009c82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009c86:	4619      	mov	r1, r3
 8009c88:	4873      	ldr	r0, [pc, #460]	; (8009e58 <dcd_ep_ctr_handler+0x304>)
 8009c8a:	f7ff fc13 	bl	80094b4 <pcd_clear_rx_ep_ctr>

          /* Get Control Data OUT Packet */
          count = pcd_get_ep_rx_cnt(USB,EPindex);
 8009c8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009c92:	4619      	mov	r1, r3
 8009c94:	4870      	ldr	r0, [pc, #448]	; (8009e58 <dcd_ep_ctr_handler+0x304>)
 8009c96:	f7ff fc3f 	bl	8009518 <pcd_get_ep_rx_cnt>
 8009c9a:	6278      	str	r0, [r7, #36]	; 0x24

          if (count != 0U)
 8009c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d017      	beq.n	8009cd2 <dcd_ep_ctr_handler+0x17e>
          {
            dcd_read_packet_memory(xfer->buffer, *pcd_ep_rx_address_ptr(USB,EPindex), count);
 8009ca2:	693b      	ldr	r3, [r7, #16]
 8009ca4:	681c      	ldr	r4, [r3, #0]
 8009ca6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009caa:	4619      	mov	r1, r3
 8009cac:	486a      	ldr	r0, [pc, #424]	; (8009e58 <dcd_ep_ctr_handler+0x304>)
 8009cae:	f7ff fcde 	bl	800966e <pcd_ep_rx_address_ptr>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	881b      	ldrh	r3, [r3, #0]
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cba:	4619      	mov	r1, r3
 8009cbc:	4620      	mov	r0, r4
 8009cbe:	f000 fbc3 	bl	800a448 <dcd_read_packet_memory>
            xfer->queued_len = (uint16_t)(xfer->queued_len + count);
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	88da      	ldrh	r2, [r3, #6]
 8009cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc8:	b29b      	uxth	r3, r3
 8009cca:	4413      	add	r3, r2
 8009ccc:	b29a      	uxth	r2, r3
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	80da      	strh	r2, [r3, #6]
          }

          /* Process Control Data OUT status Packet*/
          dcd_event_xfer_complete(0, EPindex, xfer->total_len, XFER_RESULT_SUCCESS, true);
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	889b      	ldrh	r3, [r3, #4]
 8009cd6:	461a      	mov	r2, r3
 8009cd8:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8009cdc:	2301      	movs	r3, #1
 8009cde:	9300      	str	r3, [sp, #0]
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	2000      	movs	r0, #0
 8009ce4:	f7fe ffcd 	bl	8008c82 <dcd_event_xfer_complete>

          pcd_set_ep_rx_cnt(USB, EPindex, CFG_TUD_ENDPOINT0_SIZE);
 8009ce8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009cec:	2240      	movs	r2, #64	; 0x40
 8009cee:	4619      	mov	r1, r3
 8009cf0:	4859      	ldr	r0, [pc, #356]	; (8009e58 <dcd_ep_ctr_handler+0x304>)
 8009cf2:	f7ff fcf0 	bl	80096d6 <pcd_set_ep_rx_cnt>
          if(EPindex == 0u && xfer->total_len == 0u)
 8009cf6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	f040 80bb 	bne.w	8009e76 <dcd_ep_ctr_handler+0x322>
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	889b      	ldrh	r3, [r3, #4]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	f040 80b6 	bne.w	8009e76 <dcd_ep_ctr_handler+0x322>
          {
            pcd_set_ep_rx_status(USB, EPindex, USB_EP_RX_VALID);// Await next SETUP
 8009d0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009d0e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8009d12:	4619      	mov	r1, r3
 8009d14:	4850      	ldr	r0, [pc, #320]	; (8009e58 <dcd_ep_ctr_handler+0x304>)
 8009d16:	f7ff fd23 	bl	8009760 <pcd_set_ep_rx_status>
 8009d1a:	e0ac      	b.n	8009e76 <dcd_ep_ctr_handler+0x322>
      }
    }
    else /* Decode and service non control endpoints interrupt  */
    {
      /* process related endpoint register */
      wEPVal = pcd_get_endpoint(USB, EPindex);
 8009d1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009d20:	4619      	mov	r1, r3
 8009d22:	484d      	ldr	r0, [pc, #308]	; (8009e58 <dcd_ep_ctr_handler+0x304>)
 8009d24:	f7ff fb90 	bl	8009448 <pcd_get_endpoint>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	813b      	strh	r3, [r7, #8]
      if ((wEPVal & USB_EP_CTR_RX) != 0U) // OUT
 8009d2c:	893b      	ldrh	r3, [r7, #8]
 8009d2e:	b29b      	uxth	r3, r3
 8009d30:	b21b      	sxth	r3, r3
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	da6e      	bge.n	8009e14 <dcd_ep_ctr_handler+0x2c0>
      {
        /* clear int flag */
        pcd_clear_rx_ep_ctr(USB, EPindex);
 8009d36:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009d3a:	4619      	mov	r1, r3
 8009d3c:	4846      	ldr	r0, [pc, #280]	; (8009e58 <dcd_ep_ctr_handler+0x304>)
 8009d3e:	f7ff fbb9 	bl	80094b4 <pcd_clear_rx_ep_ctr>

        xfer_ctl_t * xfer = xfer_ctl_ptr(EPindex,TUSB_DIR_OUT);
 8009d42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009d46:	2100      	movs	r1, #0
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f7ff fdc9 	bl	80098e0 <xfer_ctl_ptr>
 8009d4e:	61f8      	str	r0, [r7, #28]

        //ep = &hpcd->OUT_ep[EPindex];

        count = pcd_get_ep_rx_cnt(USB, EPindex);
 8009d50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009d54:	4619      	mov	r1, r3
 8009d56:	4840      	ldr	r0, [pc, #256]	; (8009e58 <dcd_ep_ctr_handler+0x304>)
 8009d58:	f7ff fbde 	bl	8009518 <pcd_get_ep_rx_cnt>
 8009d5c:	6278      	str	r0, [r7, #36]	; 0x24
        if (count != 0U)
 8009d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d012      	beq.n	8009d8a <dcd_ep_ctr_handler+0x236>
        {
          dcd_read_packet_memory(&(xfer->buffer[xfer->queued_len]),
 8009d64:	69fb      	ldr	r3, [r7, #28]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	69fa      	ldr	r2, [r7, #28]
 8009d6a:	88d2      	ldrh	r2, [r2, #6]
 8009d6c:	189c      	adds	r4, r3, r2
              *pcd_ep_rx_address_ptr(USB,EPindex), count);
 8009d6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009d72:	4619      	mov	r1, r3
 8009d74:	4838      	ldr	r0, [pc, #224]	; (8009e58 <dcd_ep_ctr_handler+0x304>)
 8009d76:	f7ff fc7a 	bl	800966e <pcd_ep_rx_address_ptr>
 8009d7a:	4603      	mov	r3, r0
          dcd_read_packet_memory(&(xfer->buffer[xfer->queued_len]),
 8009d7c:	881b      	ldrh	r3, [r3, #0]
 8009d7e:	b29b      	uxth	r3, r3
 8009d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d82:	4619      	mov	r1, r3
 8009d84:	4620      	mov	r0, r4
 8009d86:	f000 fb5f 	bl	800a448 <dcd_read_packet_memory>
        }

        /*multi-packet on the NON control OUT endpoint */
        xfer->queued_len = (uint16_t)(xfer->queued_len + count);
 8009d8a:	69fb      	ldr	r3, [r7, #28]
 8009d8c:	88da      	ldrh	r2, [r3, #6]
 8009d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d90:	b29b      	uxth	r3, r3
 8009d92:	4413      	add	r3, r2
 8009d94:	b29a      	uxth	r2, r3
 8009d96:	69fb      	ldr	r3, [r7, #28]
 8009d98:	80da      	strh	r2, [r3, #6]

        if ((count < xfer->max_packet_size) || (xfer->queued_len == xfer->total_len))
 8009d9a:	69fb      	ldr	r3, [r7, #28]
 8009d9c:	891b      	ldrh	r3, [r3, #8]
 8009d9e:	461a      	mov	r2, r3
 8009da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d305      	bcc.n	8009db2 <dcd_ep_ctr_handler+0x25e>
 8009da6:	69fb      	ldr	r3, [r7, #28]
 8009da8:	88da      	ldrh	r2, [r3, #6]
 8009daa:	69fb      	ldr	r3, [r7, #28]
 8009dac:	889b      	ldrh	r3, [r3, #4]
 8009dae:	429a      	cmp	r2, r3
 8009db0:	d10b      	bne.n	8009dca <dcd_ep_ctr_handler+0x276>
        {
          /* RX COMPLETE */
          dcd_event_xfer_complete(0, EPindex, xfer->queued_len, XFER_RESULT_SUCCESS, true);
 8009db2:	69fb      	ldr	r3, [r7, #28]
 8009db4:	88db      	ldrh	r3, [r3, #6]
 8009db6:	461a      	mov	r2, r3
 8009db8:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	9300      	str	r3, [sp, #0]
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	2000      	movs	r0, #0
 8009dc4:	f7fe ff5d 	bl	8008c82 <dcd_event_xfer_complete>
 8009dc8:	e024      	b.n	8009e14 <dcd_ep_ctr_handler+0x2c0>
          // Though the host could still send, we don't know.
          // Does the bulk pipe need to be reset to valid to allow for a ZLP?
        }
        else
        {
          uint32_t remaining = (uint32_t)xfer->total_len - (uint32_t)xfer->queued_len;
 8009dca:	69fb      	ldr	r3, [r7, #28]
 8009dcc:	889b      	ldrh	r3, [r3, #4]
 8009dce:	461a      	mov	r2, r3
 8009dd0:	69fb      	ldr	r3, [r7, #28]
 8009dd2:	88db      	ldrh	r3, [r3, #6]
 8009dd4:	1ad3      	subs	r3, r2, r3
 8009dd6:	61bb      	str	r3, [r7, #24]
          if(remaining >= xfer->max_packet_size) {
 8009dd8:	69fb      	ldr	r3, [r7, #28]
 8009dda:	891b      	ldrh	r3, [r3, #8]
 8009ddc:	461a      	mov	r2, r3
 8009dde:	69bb      	ldr	r3, [r7, #24]
 8009de0:	4293      	cmp	r3, r2
 8009de2:	d308      	bcc.n	8009df6 <dcd_ep_ctr_handler+0x2a2>
            pcd_set_ep_rx_cnt(USB, EPindex,xfer->max_packet_size);
 8009de4:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8009de8:	69fb      	ldr	r3, [r7, #28]
 8009dea:	891b      	ldrh	r3, [r3, #8]
 8009dec:	461a      	mov	r2, r3
 8009dee:	481a      	ldr	r0, [pc, #104]	; (8009e58 <dcd_ep_ctr_handler+0x304>)
 8009df0:	f7ff fc71 	bl	80096d6 <pcd_set_ep_rx_cnt>
 8009df4:	e006      	b.n	8009e04 <dcd_ep_ctr_handler+0x2b0>
          } else {
            pcd_set_ep_rx_cnt(USB, EPindex,remaining);
 8009df6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009dfa:	69ba      	ldr	r2, [r7, #24]
 8009dfc:	4619      	mov	r1, r3
 8009dfe:	4816      	ldr	r0, [pc, #88]	; (8009e58 <dcd_ep_ctr_handler+0x304>)
 8009e00:	f7ff fc69 	bl	80096d6 <pcd_set_ep_rx_cnt>
          }

          pcd_set_ep_rx_status(USB, EPindex, USB_EP_RX_VALID);
 8009e04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009e08:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8009e0c:	4619      	mov	r1, r3
 8009e0e:	4812      	ldr	r0, [pc, #72]	; (8009e58 <dcd_ep_ctr_handler+0x304>)
 8009e10:	f7ff fca6 	bl	8009760 <pcd_set_ep_rx_status>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U) // IN
 8009e14:	893b      	ldrh	r3, [r7, #8]
 8009e16:	b29b      	uxth	r3, r3
 8009e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d02a      	beq.n	8009e76 <dcd_ep_ctr_handler+0x322>
      {
        /* clear int flag */
        pcd_clear_tx_ep_ctr(USB, EPindex);
 8009e20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009e24:	4619      	mov	r1, r3
 8009e26:	480c      	ldr	r0, [pc, #48]	; (8009e58 <dcd_ep_ctr_handler+0x304>)
 8009e28:	f7ff fb5d 	bl	80094e6 <pcd_clear_tx_ep_ctr>

        xfer_ctl_t * xfer = xfer_ctl_ptr(EPindex,TUSB_DIR_IN);
 8009e2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009e30:	2101      	movs	r1, #1
 8009e32:	4618      	mov	r0, r3
 8009e34:	f7ff fd54 	bl	80098e0 <xfer_ctl_ptr>
 8009e38:	6178      	str	r0, [r7, #20]

        if (xfer->queued_len  != xfer->total_len) // data remaining in transfer?
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	88da      	ldrh	r2, [r3, #6]
 8009e3e:	697b      	ldr	r3, [r7, #20]
 8009e40:	889b      	ldrh	r3, [r3, #4]
 8009e42:	429a      	cmp	r2, r3
 8009e44:	d00a      	beq.n	8009e5c <dcd_ep_ctr_handler+0x308>
        {
          dcd_transmit_packet(xfer, EPindex);
 8009e46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009e4a:	b29b      	uxth	r3, r3
 8009e4c:	4619      	mov	r1, r3
 8009e4e:	6978      	ldr	r0, [r7, #20]
 8009e50:	f000 f9d0 	bl	800a1f4 <dcd_transmit_packet>
 8009e54:	e00f      	b.n	8009e76 <dcd_ep_ctr_handler+0x322>
 8009e56:	bf00      	nop
 8009e58:	40005c00 	.word	0x40005c00
        } else {
          dcd_event_xfer_complete(0, (uint8_t)(0x80 + EPindex), xfer->total_len, XFER_RESULT_SUCCESS, true);
 8009e5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009e60:	3b80      	subs	r3, #128	; 0x80
 8009e62:	b2d9      	uxtb	r1, r3
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	889b      	ldrh	r3, [r3, #4]
 8009e68:	461a      	mov	r2, r3
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	9300      	str	r3, [sp, #0]
 8009e6e:	2300      	movs	r3, #0
 8009e70:	2000      	movs	r0, #0
 8009e72:	f7fe ff06 	bl	8008c82 <dcd_event_xfer_complete>
  while (((wIstr = USB->ISTR) & USB_ISTR_CTR) != 0U)
 8009e76:	4b07      	ldr	r3, [pc, #28]	; (8009e94 <dcd_ep_ctr_handler+0x340>)
 8009e78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009e7c:	b29b      	uxth	r3, r3
 8009e7e:	461a      	mov	r2, r3
 8009e80:	817a      	strh	r2, [r7, #10]
 8009e82:	b21b      	sxth	r3, r3
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	f6ff ae6d 	blt.w	8009b64 <dcd_ep_ctr_handler+0x10>
        }
      }
    }
  }
  return 0;
 8009e8a:	2300      	movs	r3, #0
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	372c      	adds	r7, #44	; 0x2c
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd90      	pop	{r4, r7, pc}
 8009e94:	40005c00 	.word	0x40005c00

08009e98 <dcd_fs_irqHandler>:

static void dcd_fs_irqHandler(void) {
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b082      	sub	sp, #8
 8009e9c:	af00      	add	r7, sp, #0

  uint32_t int_status = USB->ISTR;
 8009e9e:	4b48      	ldr	r3, [pc, #288]	; (8009fc0 <dcd_fs_irqHandler+0x128>)
 8009ea0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009ea4:	b29b      	uxth	r3, r3
 8009ea6:	607b      	str	r3, [r7, #4]

  // The ST driver loops here on the CTR bit, but that loop has been moved into the
  // dcd_ep_ctr_handler(), so less need to loop here. The other interrupts shouldn't
  // be triggered repeatedly.

  if(int_status & USB_ISTR_RESET) {
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d00c      	beq.n	8009ecc <dcd_fs_irqHandler+0x34>
    // USBRST is start of reset.
    reg16_clear_bits(&USB->ISTR, USB_ISTR_RESET);
 8009eb2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009eb6:	4843      	ldr	r0, [pc, #268]	; (8009fc4 <dcd_fs_irqHandler+0x12c>)
 8009eb8:	f7ff fd2c 	bl	8009914 <reg16_clear_bits>
    dcd_handle_bus_reset();
 8009ebc:	f7ff fe1a 	bl	8009af4 <dcd_handle_bus_reset>
    dcd_event_bus_signal(0, DCD_EVENT_BUS_RESET, true);
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	2101      	movs	r1, #1
 8009ec4:	2000      	movs	r0, #0
 8009ec6:	f7fe fe9b 	bl	8008c00 <dcd_event_bus_signal>
    return; // Don't do the rest of the things here; perhaps they've been cleared?
 8009eca:	e076      	b.n	8009fba <dcd_fs_irqHandler+0x122>
  }

  if (int_status & USB_ISTR_CTR)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d006      	beq.n	8009ee4 <dcd_fs_irqHandler+0x4c>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    dcd_ep_ctr_handler();
 8009ed6:	f7ff fe3d 	bl	8009b54 <dcd_ep_ctr_handler>
    reg16_clear_bits(&USB->ISTR, USB_ISTR_CTR);
 8009eda:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009ede:	4839      	ldr	r0, [pc, #228]	; (8009fc4 <dcd_fs_irqHandler+0x12c>)
 8009ee0:	f7ff fd18 	bl	8009914 <reg16_clear_bits>
  }

  if (int_status & USB_ISTR_WKUP)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d011      	beq.n	8009f12 <dcd_fs_irqHandler+0x7a>
  {
    reg16_clear_bits(&USB->CNTR, USB_CNTR_LPMODE);
 8009eee:	2104      	movs	r1, #4
 8009ef0:	4835      	ldr	r0, [pc, #212]	; (8009fc8 <dcd_fs_irqHandler+0x130>)
 8009ef2:	f7ff fd0f 	bl	8009914 <reg16_clear_bits>
    reg16_clear_bits(&USB->CNTR, USB_CNTR_FSUSP);
 8009ef6:	2108      	movs	r1, #8
 8009ef8:	4833      	ldr	r0, [pc, #204]	; (8009fc8 <dcd_fs_irqHandler+0x130>)
 8009efa:	f7ff fd0b 	bl	8009914 <reg16_clear_bits>
    reg16_clear_bits(&USB->ISTR, USB_ISTR_WKUP);
 8009efe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009f02:	4830      	ldr	r0, [pc, #192]	; (8009fc4 <dcd_fs_irqHandler+0x12c>)
 8009f04:	f7ff fd06 	bl	8009914 <reg16_clear_bits>
    dcd_event_bus_signal(0, DCD_EVENT_RESUME, true);
 8009f08:	2201      	movs	r2, #1
 8009f0a:	2105      	movs	r1, #5
 8009f0c:	2000      	movs	r0, #0
 8009f0e:	f7fe fe77 	bl	8008c00 <dcd_event_bus_signal>
  }

  if (int_status & USB_ISTR_SUSP)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d01d      	beq.n	8009f58 <dcd_fs_irqHandler+0xc0>
  {
    /* Suspend is asserted for both suspend and unplug events. without Vbus monitoring,
     * these events cannot be differentiated, so we only trigger suspend. */

    /* Force low-power mode in the macrocell */
    USB->CNTR |= USB_CNTR_FSUSP;
 8009f1c:	4b28      	ldr	r3, [pc, #160]	; (8009fc0 <dcd_fs_irqHandler+0x128>)
 8009f1e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009f22:	b29b      	uxth	r3, r3
 8009f24:	4a26      	ldr	r2, [pc, #152]	; (8009fc0 <dcd_fs_irqHandler+0x128>)
 8009f26:	f043 0308 	orr.w	r3, r3, #8
 8009f2a:	b29b      	uxth	r3, r3
 8009f2c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    USB->CNTR |= USB_CNTR_LPMODE;
 8009f30:	4b23      	ldr	r3, [pc, #140]	; (8009fc0 <dcd_fs_irqHandler+0x128>)
 8009f32:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009f36:	b29b      	uxth	r3, r3
 8009f38:	4a21      	ldr	r2, [pc, #132]	; (8009fc0 <dcd_fs_irqHandler+0x128>)
 8009f3a:	f043 0304 	orr.w	r3, r3, #4
 8009f3e:	b29b      	uxth	r3, r3
 8009f40:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    reg16_clear_bits(&USB->ISTR, USB_ISTR_SUSP);
 8009f44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009f48:	481e      	ldr	r0, [pc, #120]	; (8009fc4 <dcd_fs_irqHandler+0x12c>)
 8009f4a:	f7ff fce3 	bl	8009914 <reg16_clear_bits>
    dcd_event_bus_signal(0, DCD_EVENT_SUSPEND, true);
 8009f4e:	2201      	movs	r2, #1
 8009f50:	2104      	movs	r1, #4
 8009f52:	2000      	movs	r0, #0
 8009f54:	f7fe fe54 	bl	8008c00 <dcd_event_bus_signal>
  }

  if(int_status & USB_ISTR_SOF) {
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d009      	beq.n	8009f76 <dcd_fs_irqHandler+0xde>
    reg16_clear_bits(&USB->ISTR, USB_ISTR_SOF);
 8009f62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009f66:	4817      	ldr	r0, [pc, #92]	; (8009fc4 <dcd_fs_irqHandler+0x12c>)
 8009f68:	f7ff fcd4 	bl	8009914 <reg16_clear_bits>
    dcd_event_bus_signal(0, DCD_EVENT_SOF, true);
 8009f6c:	2201      	movs	r2, #1
 8009f6e:	2103      	movs	r1, #3
 8009f70:	2000      	movs	r0, #0
 8009f72:	f7fe fe45 	bl	8008c00 <dcd_event_bus_signal>
  }

  if(int_status & USB_ISTR_ESOF) {
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d01c      	beq.n	8009fba <dcd_fs_irqHandler+0x122>
    if(remoteWakeCountdown == 1u)
 8009f80:	4b12      	ldr	r3, [pc, #72]	; (8009fcc <dcd_fs_irqHandler+0x134>)
 8009f82:	781b      	ldrb	r3, [r3, #0]
 8009f84:	2b01      	cmp	r3, #1
 8009f86:	d109      	bne.n	8009f9c <dcd_fs_irqHandler+0x104>
    {
      USB->CNTR &= (uint16_t)(~USB_CNTR_RESUME);
 8009f88:	4b0d      	ldr	r3, [pc, #52]	; (8009fc0 <dcd_fs_irqHandler+0x128>)
 8009f8a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009f8e:	b29b      	uxth	r3, r3
 8009f90:	4a0b      	ldr	r2, [pc, #44]	; (8009fc0 <dcd_fs_irqHandler+0x128>)
 8009f92:	f023 0310 	bic.w	r3, r3, #16
 8009f96:	b29b      	uxth	r3, r3
 8009f98:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    }
    if(remoteWakeCountdown > 0u)
 8009f9c:	4b0b      	ldr	r3, [pc, #44]	; (8009fcc <dcd_fs_irqHandler+0x134>)
 8009f9e:	781b      	ldrb	r3, [r3, #0]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d005      	beq.n	8009fb0 <dcd_fs_irqHandler+0x118>
    {
      remoteWakeCountdown--;
 8009fa4:	4b09      	ldr	r3, [pc, #36]	; (8009fcc <dcd_fs_irqHandler+0x134>)
 8009fa6:	781b      	ldrb	r3, [r3, #0]
 8009fa8:	3b01      	subs	r3, #1
 8009faa:	b2da      	uxtb	r2, r3
 8009fac:	4b07      	ldr	r3, [pc, #28]	; (8009fcc <dcd_fs_irqHandler+0x134>)
 8009fae:	701a      	strb	r2, [r3, #0]
    }
    reg16_clear_bits(&USB->ISTR, USB_ISTR_ESOF);
 8009fb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009fb4:	4803      	ldr	r0, [pc, #12]	; (8009fc4 <dcd_fs_irqHandler+0x12c>)
 8009fb6:	f7ff fcad 	bl	8009914 <reg16_clear_bits>
  }
}
 8009fba:	3708      	adds	r7, #8
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}
 8009fc0:	40005c00 	.word	0x40005c00
 8009fc4:	40005c44 	.word	0x40005c44
 8009fc8:	40005c40 	.word	0x40005c40
 8009fcc:	200026d4 	.word	0x200026d4

08009fd0 <dcd_edpt0_status_complete>:
//--------------------------------------------------------------------+

// Invoked when a control transfer's status stage is complete.
// May help DCD to prepare for next control transfer, this API is optional.
void dcd_edpt0_status_complete(uint8_t rhport, tusb_control_request_t const * request)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b084      	sub	sp, #16
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	6039      	str	r1, [r7, #0]
 8009fda:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  if (request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_DEVICE &&
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	781b      	ldrb	r3, [r3, #0]
 8009fe0:	f003 031f 	and.w	r3, r3, #31
 8009fe4:	b2db      	uxtb	r3, r3
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d11d      	bne.n	800a026 <dcd_edpt0_status_complete+0x56>
      request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD &&
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	781b      	ldrb	r3, [r3, #0]
 8009fee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ff2:	b2db      	uxtb	r3, r3
  if (request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_DEVICE &&
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d116      	bne.n	800a026 <dcd_edpt0_status_complete+0x56>
      request->bRequest == TUSB_REQ_SET_ADDRESS )
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	785b      	ldrb	r3, [r3, #1]
      request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD &&
 8009ffc:	2b05      	cmp	r3, #5
 8009ffe:	d112      	bne.n	800a026 <dcd_edpt0_status_complete+0x56>
  {
    uint8_t const dev_addr = (uint8_t) request->wValue;
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	885b      	ldrh	r3, [r3, #2]
 800a004:	b29b      	uxth	r3, r3
 800a006:	73fb      	strb	r3, [r7, #15]

    // Setting new address after the whole request is complete
    reg16_clear_bits(&USB->DADDR, USB_DADDR_ADD);
 800a008:	217f      	movs	r1, #127	; 0x7f
 800a00a:	4809      	ldr	r0, [pc, #36]	; (800a030 <dcd_edpt0_status_complete+0x60>)
 800a00c:	f7ff fc82 	bl	8009914 <reg16_clear_bits>
    USB->DADDR = (uint16_t)(USB->DADDR | dev_addr); // leave the enable bit set
 800a010:	4b08      	ldr	r3, [pc, #32]	; (800a034 <dcd_edpt0_status_complete+0x64>)
 800a012:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800a016:	b29a      	uxth	r2, r3
 800a018:	7bfb      	ldrb	r3, [r7, #15]
 800a01a:	b29b      	uxth	r3, r3
 800a01c:	4905      	ldr	r1, [pc, #20]	; (800a034 <dcd_edpt0_status_complete+0x64>)
 800a01e:	4313      	orrs	r3, r2
 800a020:	b29b      	uxth	r3, r3
 800a022:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
  }
}
 800a026:	bf00      	nop
 800a028:	3710      	adds	r7, #16
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}
 800a02e:	bf00      	nop
 800a030:	40005c4c 	.word	0x40005c4c
 800a034:	40005c00 	.word	0x40005c00

0800a038 <dcd_edpt_open>:

// The STM32F0 doesn't seem to like |= or &= to manipulate the EP#R registers,
// so I'm using the #define from HAL here, instead.

bool dcd_edpt_open (uint8_t rhport, tusb_desc_endpoint_t const * p_endpoint_desc)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b086      	sub	sp, #24
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	4603      	mov	r3, r0
 800a040:	6039      	str	r1, [r7, #0]
 800a042:	71fb      	strb	r3, [r7, #7]
  (void)rhport;
  uint8_t const epnum = tu_edpt_number(p_endpoint_desc->bEndpointAddress);
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	789b      	ldrb	r3, [r3, #2]
 800a048:	4618      	mov	r0, r3
 800a04a:	f7ff f984 	bl	8009356 <tu_edpt_number>
 800a04e:	4603      	mov	r3, r0
 800a050:	75fb      	strb	r3, [r7, #23]
  uint8_t const dir   = tu_edpt_dir(p_endpoint_desc->bEndpointAddress);
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	789b      	ldrb	r3, [r3, #2]
 800a056:	4618      	mov	r0, r3
 800a058:	f7ff f970 	bl	800933c <tu_edpt_dir>
 800a05c:	4603      	mov	r3, r0
 800a05e:	75bb      	strb	r3, [r7, #22]
  const uint16_t epMaxPktSize = p_endpoint_desc->wMaxPacketSize.size;
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	791a      	ldrb	r2, [r3, #4]
 800a064:	795b      	ldrb	r3, [r3, #5]
 800a066:	f003 0307 	and.w	r3, r3, #7
 800a06a:	021b      	lsls	r3, r3, #8
 800a06c:	4313      	orrs	r3, r2
 800a06e:	b29b      	uxth	r3, r3
 800a070:	82bb      	strh	r3, [r7, #20]
  // Isochronous not supported (yet), and some other driver assumptions.

  TU_ASSERT(p_endpoint_desc->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS);
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	78db      	ldrb	r3, [r3, #3]
 800a076:	f003 0303 	and.w	r3, r3, #3
 800a07a:	b2db      	uxtb	r3, r3
 800a07c:	2b01      	cmp	r3, #1
 800a07e:	d10a      	bne.n	800a096 <dcd_edpt_open+0x5e>
 800a080:	4b59      	ldr	r3, [pc, #356]	; (800a1e8 <dcd_edpt_open+0x1b0>)
 800a082:	60bb      	str	r3, [r7, #8]
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f003 0301 	and.w	r3, r3, #1
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d000      	beq.n	800a092 <dcd_edpt_open+0x5a>
 800a090:	be00      	bkpt	0x0000
 800a092:	2300      	movs	r3, #0
 800a094:	e0a4      	b.n	800a1e0 <dcd_edpt_open+0x1a8>
  TU_ASSERT(epnum < MAX_EP_COUNT);
 800a096:	7dfb      	ldrb	r3, [r7, #23]
 800a098:	2b07      	cmp	r3, #7
 800a09a:	d90a      	bls.n	800a0b2 <dcd_edpt_open+0x7a>
 800a09c:	4b52      	ldr	r3, [pc, #328]	; (800a1e8 <dcd_edpt_open+0x1b0>)
 800a09e:	60fb      	str	r3, [r7, #12]
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f003 0301 	and.w	r3, r3, #1
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d000      	beq.n	800a0ae <dcd_edpt_open+0x76>
 800a0ac:	be00      	bkpt	0x0000
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	e096      	b.n	800a1e0 <dcd_edpt_open+0x1a8>

  // Set type
  switch(p_endpoint_desc->bmAttributes.xfer) {
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	78db      	ldrb	r3, [r3, #3]
 800a0b6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800a0ba:	b2db      	uxtb	r3, r3
 800a0bc:	2b02      	cmp	r3, #2
 800a0be:	d00b      	beq.n	800a0d8 <dcd_edpt_open+0xa0>
 800a0c0:	2b03      	cmp	r3, #3
 800a0c2:	d010      	beq.n	800a0e6 <dcd_edpt_open+0xae>
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d116      	bne.n	800a0f6 <dcd_edpt_open+0xbe>
  case TUSB_XFER_CONTROL:
    pcd_set_eptype(USB, epnum, USB_EP_CONTROL);
 800a0c8:	7dfb      	ldrb	r3, [r7, #23]
 800a0ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a0ce:	4619      	mov	r1, r3
 800a0d0:	4846      	ldr	r0, [pc, #280]	; (800a1ec <dcd_edpt_open+0x1b4>)
 800a0d2:	f7ff f9cb 	bl	800946c <pcd_set_eptype>
    break;
 800a0d6:	e019      	b.n	800a10c <dcd_edpt_open+0xd4>
    pcd_set_eptype(USB, epnum, USB_EP_ISOCHRONOUS); break;
    break;
#endif

  case TUSB_XFER_BULK:
    pcd_set_eptype(USB, epnum, USB_EP_BULK);
 800a0d8:	7dfb      	ldrb	r3, [r7, #23]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	4619      	mov	r1, r3
 800a0de:	4843      	ldr	r0, [pc, #268]	; (800a1ec <dcd_edpt_open+0x1b4>)
 800a0e0:	f7ff f9c4 	bl	800946c <pcd_set_eptype>
    break;
 800a0e4:	e012      	b.n	800a10c <dcd_edpt_open+0xd4>

  case TUSB_XFER_INTERRUPT:
    pcd_set_eptype(USB, epnum, USB_EP_INTERRUPT);
 800a0e6:	7dfb      	ldrb	r3, [r7, #23]
 800a0e8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	483f      	ldr	r0, [pc, #252]	; (800a1ec <dcd_edpt_open+0x1b4>)
 800a0f0:	f7ff f9bc 	bl	800946c <pcd_set_eptype>
    break;
 800a0f4:	e00a      	b.n	800a10c <dcd_edpt_open+0xd4>

  default:
    TU_ASSERT(false);
 800a0f6:	4b3c      	ldr	r3, [pc, #240]	; (800a1e8 <dcd_edpt_open+0x1b0>)
 800a0f8:	613b      	str	r3, [r7, #16]
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f003 0301 	and.w	r3, r3, #1
 800a102:	2b00      	cmp	r3, #0
 800a104:	d000      	beq.n	800a108 <dcd_edpt_open+0xd0>
 800a106:	be00      	bkpt	0x0000
 800a108:	2300      	movs	r3, #0
 800a10a:	e069      	b.n	800a1e0 <dcd_edpt_open+0x1a8>
    return false;
  }

  pcd_set_ep_address(USB, epnum, epnum);
 800a10c:	7dfb      	ldrb	r3, [r7, #23]
 800a10e:	7dfa      	ldrb	r2, [r7, #23]
 800a110:	4619      	mov	r1, r3
 800a112:	4836      	ldr	r0, [pc, #216]	; (800a1ec <dcd_edpt_open+0x1b4>)
 800a114:	f7ff fa48 	bl	80095a8 <pcd_set_ep_address>
  // Be normal, for now, instead of only accepting zero-byte packets (on control endpoint)
  // or being double-buffered (bulk endpoints)
  pcd_clear_ep_kind(USB,0);
 800a118:	2100      	movs	r1, #0
 800a11a:	4834      	ldr	r0, [pc, #208]	; (800a1ec <dcd_edpt_open+0x1b4>)
 800a11c:	f7ff fbc0 	bl	80098a0 <pcd_clear_ep_kind>

  if(dir == TUSB_DIR_IN)
 800a120:	7dbb      	ldrb	r3, [r7, #22]
 800a122:	2b01      	cmp	r3, #1
 800a124:	d121      	bne.n	800a16a <dcd_edpt_open+0x132>
  {
    *pcd_ep_tx_address_ptr(USB, epnum) = ep_buf_ptr;
 800a126:	7dfb      	ldrb	r3, [r7, #23]
 800a128:	4619      	mov	r1, r3
 800a12a:	4830      	ldr	r0, [pc, #192]	; (800a1ec <dcd_edpt_open+0x1b4>)
 800a12c:	f7ff fa7e 	bl	800962c <pcd_ep_tx_address_ptr>
 800a130:	4602      	mov	r2, r0
 800a132:	4b2f      	ldr	r3, [pc, #188]	; (800a1f0 <dcd_edpt_open+0x1b8>)
 800a134:	881b      	ldrh	r3, [r3, #0]
 800a136:	8013      	strh	r3, [r2, #0]
    pcd_set_ep_tx_cnt(USB, epnum, p_endpoint_desc->wMaxPacketSize.size);
 800a138:	7df9      	ldrb	r1, [r7, #23]
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	791a      	ldrb	r2, [r3, #4]
 800a13e:	795b      	ldrb	r3, [r3, #5]
 800a140:	f003 0307 	and.w	r3, r3, #7
 800a144:	021b      	lsls	r3, r3, #8
 800a146:	4313      	orrs	r3, r2
 800a148:	b29b      	uxth	r3, r3
 800a14a:	461a      	mov	r2, r3
 800a14c:	4827      	ldr	r0, [pc, #156]	; (800a1ec <dcd_edpt_open+0x1b4>)
 800a14e:	f7ff fab0 	bl	80096b2 <pcd_set_ep_tx_cnt>
    pcd_clear_tx_dtog(USB, epnum);
 800a152:	7dfb      	ldrb	r3, [r7, #23]
 800a154:	4619      	mov	r1, r3
 800a156:	4825      	ldr	r0, [pc, #148]	; (800a1ec <dcd_edpt_open+0x1b4>)
 800a158:	f7ff fb8a 	bl	8009870 <pcd_clear_tx_dtog>
    pcd_set_ep_tx_status(USB,epnum,USB_EP_TX_NAK);
 800a15c:	7dfb      	ldrb	r3, [r7, #23]
 800a15e:	2220      	movs	r2, #32
 800a160:	4619      	mov	r1, r3
 800a162:	4822      	ldr	r0, [pc, #136]	; (800a1ec <dcd_edpt_open+0x1b4>)
 800a164:	f7ff faca 	bl	80096fc <pcd_set_ep_tx_status>
 800a168:	e021      	b.n	800a1ae <dcd_edpt_open+0x176>
  }
  else
  {
    *pcd_ep_rx_address_ptr(USB, epnum) = ep_buf_ptr;
 800a16a:	7dfb      	ldrb	r3, [r7, #23]
 800a16c:	4619      	mov	r1, r3
 800a16e:	481f      	ldr	r0, [pc, #124]	; (800a1ec <dcd_edpt_open+0x1b4>)
 800a170:	f7ff fa7d 	bl	800966e <pcd_ep_rx_address_ptr>
 800a174:	4602      	mov	r2, r0
 800a176:	4b1e      	ldr	r3, [pc, #120]	; (800a1f0 <dcd_edpt_open+0x1b8>)
 800a178:	881b      	ldrh	r3, [r3, #0]
 800a17a:	8013      	strh	r3, [r2, #0]
    pcd_set_ep_rx_cnt(USB, epnum, p_endpoint_desc->wMaxPacketSize.size);
 800a17c:	7df9      	ldrb	r1, [r7, #23]
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	791a      	ldrb	r2, [r3, #4]
 800a182:	795b      	ldrb	r3, [r3, #5]
 800a184:	f003 0307 	and.w	r3, r3, #7
 800a188:	021b      	lsls	r3, r3, #8
 800a18a:	4313      	orrs	r3, r2
 800a18c:	b29b      	uxth	r3, r3
 800a18e:	461a      	mov	r2, r3
 800a190:	4816      	ldr	r0, [pc, #88]	; (800a1ec <dcd_edpt_open+0x1b4>)
 800a192:	f7ff faa0 	bl	80096d6 <pcd_set_ep_rx_cnt>
    pcd_clear_rx_dtog(USB, epnum);
 800a196:	7dfb      	ldrb	r3, [r7, #23]
 800a198:	4619      	mov	r1, r3
 800a19a:	4814      	ldr	r0, [pc, #80]	; (800a1ec <dcd_edpt_open+0x1b4>)
 800a19c:	f7ff fb50 	bl	8009840 <pcd_clear_rx_dtog>
    pcd_set_ep_rx_status(USB, epnum, USB_EP_RX_NAK);
 800a1a0:	7dfb      	ldrb	r3, [r7, #23]
 800a1a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a1a6:	4619      	mov	r1, r3
 800a1a8:	4810      	ldr	r0, [pc, #64]	; (800a1ec <dcd_edpt_open+0x1b4>)
 800a1aa:	f7ff fad9 	bl	8009760 <pcd_set_ep_rx_status>
  }

  xfer_ctl_ptr(epnum, dir)->max_packet_size = epMaxPktSize;
 800a1ae:	7dfb      	ldrb	r3, [r7, #23]
 800a1b0:	7dba      	ldrb	r2, [r7, #22]
 800a1b2:	4611      	mov	r1, r2
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f7ff fb93 	bl	80098e0 <xfer_ctl_ptr>
 800a1ba:	4602      	mov	r2, r0
 800a1bc:	8abb      	ldrh	r3, [r7, #20]
 800a1be:	8113      	strh	r3, [r2, #8]
  ep_buf_ptr = (uint16_t)(ep_buf_ptr + p_endpoint_desc->wMaxPacketSize.size); // increment buffer pointer
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	791a      	ldrb	r2, [r3, #4]
 800a1c4:	795b      	ldrb	r3, [r3, #5]
 800a1c6:	f003 0307 	and.w	r3, r3, #7
 800a1ca:	021b      	lsls	r3, r3, #8
 800a1cc:	4313      	orrs	r3, r2
 800a1ce:	b29b      	uxth	r3, r3
 800a1d0:	461a      	mov	r2, r3
 800a1d2:	4b07      	ldr	r3, [pc, #28]	; (800a1f0 <dcd_edpt_open+0x1b8>)
 800a1d4:	881b      	ldrh	r3, [r3, #0]
 800a1d6:	4413      	add	r3, r2
 800a1d8:	b29a      	uxth	r2, r3
 800a1da:	4b05      	ldr	r3, [pc, #20]	; (800a1f0 <dcd_edpt_open+0x1b8>)
 800a1dc:	801a      	strh	r2, [r3, #0]

  return true;
 800a1de:	2301      	movs	r3, #1
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3718      	adds	r7, #24
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}
 800a1e8:	e000edf0 	.word	0xe000edf0
 800a1ec:	40005c00 	.word	0x40005c00
 800a1f0:	200026d6 	.word	0x200026d6

0800a1f4 <dcd_transmit_packet>:

// Currently, single-buffered, and only 64 bytes at a time (max)

static void dcd_transmit_packet(xfer_ctl_t * xfer, uint16_t ep_ix)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b084      	sub	sp, #16
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	460b      	mov	r3, r1
 800a1fe:	807b      	strh	r3, [r7, #2]
  uint16_t len = (uint16_t)(xfer->total_len - xfer->queued_len);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	889a      	ldrh	r2, [r3, #4]
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	88db      	ldrh	r3, [r3, #6]
 800a208:	1ad3      	subs	r3, r2, r3
 800a20a:	81fb      	strh	r3, [r7, #14]

  if(len > xfer->max_packet_size) // max packet size for FS transfer
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	891b      	ldrh	r3, [r3, #8]
 800a210:	89fa      	ldrh	r2, [r7, #14]
 800a212:	429a      	cmp	r2, r3
 800a214:	d902      	bls.n	800a21c <dcd_transmit_packet+0x28>
  {
    len = xfer->max_packet_size;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	891b      	ldrh	r3, [r3, #8]
 800a21a:	81fb      	strh	r3, [r7, #14]
  }
  uint16_t oldAddr = *pcd_ep_tx_address_ptr(USB,ep_ix);
 800a21c:	887b      	ldrh	r3, [r7, #2]
 800a21e:	4619      	mov	r1, r3
 800a220:	4813      	ldr	r0, [pc, #76]	; (800a270 <dcd_transmit_packet+0x7c>)
 800a222:	f7ff fa03 	bl	800962c <pcd_ep_tx_address_ptr>
 800a226:	4603      	mov	r3, r0
 800a228:	881b      	ldrh	r3, [r3, #0]
 800a22a:	81bb      	strh	r3, [r7, #12]
  dcd_write_packet_memory(oldAddr, &(xfer->buffer[xfer->queued_len]), len);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	687a      	ldr	r2, [r7, #4]
 800a232:	88d2      	ldrh	r2, [r2, #6]
 800a234:	1899      	adds	r1, r3, r2
 800a236:	89fa      	ldrh	r2, [r7, #14]
 800a238:	89bb      	ldrh	r3, [r7, #12]
 800a23a:	4618      	mov	r0, r3
 800a23c:	f000 f8c8 	bl	800a3d0 <dcd_write_packet_memory>
  xfer->queued_len = (uint16_t)(xfer->queued_len + len);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	88da      	ldrh	r2, [r3, #6]
 800a244:	89fb      	ldrh	r3, [r7, #14]
 800a246:	4413      	add	r3, r2
 800a248:	b29a      	uxth	r2, r3
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	80da      	strh	r2, [r3, #6]

  pcd_set_ep_tx_cnt(USB,ep_ix,len);
 800a24e:	887b      	ldrh	r3, [r7, #2]
 800a250:	89fa      	ldrh	r2, [r7, #14]
 800a252:	4619      	mov	r1, r3
 800a254:	4806      	ldr	r0, [pc, #24]	; (800a270 <dcd_transmit_packet+0x7c>)
 800a256:	f7ff fa2c 	bl	80096b2 <pcd_set_ep_tx_cnt>
  pcd_set_ep_tx_status(USB, ep_ix, USB_EP_TX_VALID);
 800a25a:	887b      	ldrh	r3, [r7, #2]
 800a25c:	2230      	movs	r2, #48	; 0x30
 800a25e:	4619      	mov	r1, r3
 800a260:	4803      	ldr	r0, [pc, #12]	; (800a270 <dcd_transmit_packet+0x7c>)
 800a262:	f7ff fa4b 	bl	80096fc <pcd_set_ep_tx_status>
}
 800a266:	bf00      	nop
 800a268:	3710      	adds	r7, #16
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}
 800a26e:	bf00      	nop
 800a270:	40005c00 	.word	0x40005c00

0800a274 <dcd_edpt_xfer>:

bool dcd_edpt_xfer (uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b084      	sub	sp, #16
 800a278:	af00      	add	r7, sp, #0
 800a27a:	603a      	str	r2, [r7, #0]
 800a27c:	461a      	mov	r2, r3
 800a27e:	4603      	mov	r3, r0
 800a280:	71fb      	strb	r3, [r7, #7]
 800a282:	460b      	mov	r3, r1
 800a284:	71bb      	strb	r3, [r7, #6]
 800a286:	4613      	mov	r3, r2
 800a288:	80bb      	strh	r3, [r7, #4]
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800a28a:	79bb      	ldrb	r3, [r7, #6]
 800a28c:	4618      	mov	r0, r3
 800a28e:	f7ff f862 	bl	8009356 <tu_edpt_number>
 800a292:	4603      	mov	r3, r0
 800a294:	73fb      	strb	r3, [r7, #15]
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 800a296:	79bb      	ldrb	r3, [r7, #6]
 800a298:	4618      	mov	r0, r3
 800a29a:	f7ff f84f 	bl	800933c <tu_edpt_dir>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	73bb      	strb	r3, [r7, #14]

  xfer_ctl_t * xfer = xfer_ctl_ptr(epnum,dir);
 800a2a2:	7bfb      	ldrb	r3, [r7, #15]
 800a2a4:	7bba      	ldrb	r2, [r7, #14]
 800a2a6:	4611      	mov	r1, r2
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	f7ff fb19 	bl	80098e0 <xfer_ctl_ptr>
 800a2ae:	60b8      	str	r0, [r7, #8]

  xfer->buffer = buffer;
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	683a      	ldr	r2, [r7, #0]
 800a2b4:	601a      	str	r2, [r3, #0]
  xfer->total_len = total_bytes;
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	88ba      	ldrh	r2, [r7, #4]
 800a2ba:	809a      	strh	r2, [r3, #4]
  xfer->queued_len = 0;
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	80da      	strh	r2, [r3, #6]

  if ( dir == TUSB_DIR_OUT )
 800a2c2:	7bbb      	ldrb	r3, [r7, #14]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d123      	bne.n	800a310 <dcd_edpt_xfer+0x9c>
  {
    // A setup token can occur immediately after an OUT STATUS packet so make sure we have a valid
    // buffer for the control endpoint.
    if (epnum == 0 && buffer == NULL)
 800a2c8:	7bfb      	ldrb	r3, [r7, #15]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d105      	bne.n	800a2da <dcd_edpt_xfer+0x66>
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d102      	bne.n	800a2da <dcd_edpt_xfer+0x66>
    {
        xfer->buffer = (uint8_t*)_setup_packet;
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	4a14      	ldr	r2, [pc, #80]	; (800a328 <dcd_edpt_xfer+0xb4>)
 800a2d8:	601a      	str	r2, [r3, #0]
    }
    if(total_bytes > xfer->max_packet_size)
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	891b      	ldrh	r3, [r3, #8]
 800a2de:	88ba      	ldrh	r2, [r7, #4]
 800a2e0:	429a      	cmp	r2, r3
 800a2e2:	d907      	bls.n	800a2f4 <dcd_edpt_xfer+0x80>
    {
      pcd_set_ep_rx_cnt(USB,epnum,xfer->max_packet_size);
 800a2e4:	7bf9      	ldrb	r1, [r7, #15]
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	891b      	ldrh	r3, [r3, #8]
 800a2ea:	461a      	mov	r2, r3
 800a2ec:	480f      	ldr	r0, [pc, #60]	; (800a32c <dcd_edpt_xfer+0xb8>)
 800a2ee:	f7ff f9f2 	bl	80096d6 <pcd_set_ep_rx_cnt>
 800a2f2:	e005      	b.n	800a300 <dcd_edpt_xfer+0x8c>
    } else {
      pcd_set_ep_rx_cnt(USB,epnum,total_bytes);
 800a2f4:	7bfb      	ldrb	r3, [r7, #15]
 800a2f6:	88ba      	ldrh	r2, [r7, #4]
 800a2f8:	4619      	mov	r1, r3
 800a2fa:	480c      	ldr	r0, [pc, #48]	; (800a32c <dcd_edpt_xfer+0xb8>)
 800a2fc:	f7ff f9eb 	bl	80096d6 <pcd_set_ep_rx_cnt>
    }
    pcd_set_ep_rx_status(USB, epnum, USB_EP_RX_VALID);
 800a300:	7bfb      	ldrb	r3, [r7, #15]
 800a302:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a306:	4619      	mov	r1, r3
 800a308:	4808      	ldr	r0, [pc, #32]	; (800a32c <dcd_edpt_xfer+0xb8>)
 800a30a:	f7ff fa29 	bl	8009760 <pcd_set_ep_rx_status>
 800a30e:	e005      	b.n	800a31c <dcd_edpt_xfer+0xa8>
  }
  else // IN
  {
    dcd_transmit_packet(xfer,epnum);
 800a310:	7bfb      	ldrb	r3, [r7, #15]
 800a312:	b29b      	uxth	r3, r3
 800a314:	4619      	mov	r1, r3
 800a316:	68b8      	ldr	r0, [r7, #8]
 800a318:	f7ff ff6c 	bl	800a1f4 <dcd_transmit_packet>
  }
  return true;
 800a31c:	2301      	movs	r3, #1
}
 800a31e:	4618      	mov	r0, r3
 800a320:	3710      	adds	r7, #16
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}
 800a326:	bf00      	nop
 800a328:	200026bc 	.word	0x200026bc
 800a32c:	40005c00 	.word	0x40005c00

0800a330 <dcd_edpt_stall>:

void dcd_edpt_stall (uint8_t rhport, uint8_t ep_addr)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b082      	sub	sp, #8
 800a334:	af00      	add	r7, sp, #0
 800a336:	4603      	mov	r3, r0
 800a338:	460a      	mov	r2, r1
 800a33a:	71fb      	strb	r3, [r7, #7]
 800a33c:	4613      	mov	r3, r2
 800a33e:	71bb      	strb	r3, [r7, #6]
  (void)rhport;

  if (ep_addr & 0x80)
 800a340:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a344:	2b00      	cmp	r3, #0
 800a346:	da08      	bge.n	800a35a <dcd_edpt_stall+0x2a>
  { // IN
    pcd_set_ep_tx_status(USB, ep_addr & 0x7F, USB_EP_TX_STALL);
 800a348:	79bb      	ldrb	r3, [r7, #6]
 800a34a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a34e:	2210      	movs	r2, #16
 800a350:	4619      	mov	r1, r3
 800a352:	4807      	ldr	r0, [pc, #28]	; (800a370 <dcd_edpt_stall+0x40>)
 800a354:	f7ff f9d2 	bl	80096fc <pcd_set_ep_tx_status>
  }
  else
  { // OUT
    pcd_set_ep_rx_status(USB, ep_addr, USB_EP_RX_STALL);
  }
}
 800a358:	e006      	b.n	800a368 <dcd_edpt_stall+0x38>
    pcd_set_ep_rx_status(USB, ep_addr, USB_EP_RX_STALL);
 800a35a:	79bb      	ldrb	r3, [r7, #6]
 800a35c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a360:	4619      	mov	r1, r3
 800a362:	4803      	ldr	r0, [pc, #12]	; (800a370 <dcd_edpt_stall+0x40>)
 800a364:	f7ff f9fc 	bl	8009760 <pcd_set_ep_rx_status>
}
 800a368:	bf00      	nop
 800a36a:	3708      	adds	r7, #8
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}
 800a370:	40005c00 	.word	0x40005c00

0800a374 <dcd_edpt_clear_stall>:

void dcd_edpt_clear_stall (uint8_t rhport, uint8_t ep_addr)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b082      	sub	sp, #8
 800a378:	af00      	add	r7, sp, #0
 800a37a:	4603      	mov	r3, r0
 800a37c:	460a      	mov	r2, r1
 800a37e:	71fb      	strb	r3, [r7, #7]
 800a380:	4613      	mov	r3, r2
 800a382:	71bb      	strb	r3, [r7, #6]
  (void)rhport;

  if (ep_addr & 0x80)
 800a384:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	da0f      	bge.n	800a3ac <dcd_edpt_clear_stall+0x38>
  { // IN
    ep_addr &= 0x7F;
 800a38c:	79bb      	ldrb	r3, [r7, #6]
 800a38e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a392:	71bb      	strb	r3, [r7, #6]

    pcd_set_ep_tx_status(USB,ep_addr, USB_EP_TX_NAK);
 800a394:	79bb      	ldrb	r3, [r7, #6]
 800a396:	2220      	movs	r2, #32
 800a398:	4619      	mov	r1, r3
 800a39a:	480c      	ldr	r0, [pc, #48]	; (800a3cc <dcd_edpt_clear_stall+0x58>)
 800a39c:	f7ff f9ae 	bl	80096fc <pcd_set_ep_tx_status>

    /* Reset to DATA0 if clearing stall condition. */
    pcd_clear_tx_dtog(USB,ep_addr);
 800a3a0:	79bb      	ldrb	r3, [r7, #6]
 800a3a2:	4619      	mov	r1, r3
 800a3a4:	4809      	ldr	r0, [pc, #36]	; (800a3cc <dcd_edpt_clear_stall+0x58>)
 800a3a6:	f7ff fa63 	bl	8009870 <pcd_clear_tx_dtog>
    /* Reset to DATA0 if clearing stall condition. */
    pcd_clear_rx_dtog(USB,ep_addr);

    pcd_set_ep_rx_status(USB,ep_addr, USB_EP_RX_NAK);
  }
}
 800a3aa:	e00b      	b.n	800a3c4 <dcd_edpt_clear_stall+0x50>
    pcd_clear_rx_dtog(USB,ep_addr);
 800a3ac:	79bb      	ldrb	r3, [r7, #6]
 800a3ae:	4619      	mov	r1, r3
 800a3b0:	4806      	ldr	r0, [pc, #24]	; (800a3cc <dcd_edpt_clear_stall+0x58>)
 800a3b2:	f7ff fa45 	bl	8009840 <pcd_clear_rx_dtog>
    pcd_set_ep_rx_status(USB,ep_addr, USB_EP_RX_NAK);
 800a3b6:	79bb      	ldrb	r3, [r7, #6]
 800a3b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a3bc:	4619      	mov	r1, r3
 800a3be:	4803      	ldr	r0, [pc, #12]	; (800a3cc <dcd_edpt_clear_stall+0x58>)
 800a3c0:	f7ff f9ce 	bl	8009760 <pcd_set_ep_rx_status>
}
 800a3c4:	bf00      	nop
 800a3c6:	3708      	adds	r7, #8
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}
 800a3cc:	40005c00 	.word	0x40005c00

0800a3d0 <dcd_write_packet_memory>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
static bool dcd_write_packet_memory(uint16_t dst, const void *__restrict src, size_t wNBytes)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b08b      	sub	sp, #44	; 0x2c
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	60b9      	str	r1, [r7, #8]
 800a3da:	607a      	str	r2, [r7, #4]
 800a3dc:	81fb      	strh	r3, [r7, #14]
  uint32_t n =  ((uint32_t)wNBytes + 1U) >> 1U;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	3301      	adds	r3, #1
 800a3e2:	085b      	lsrs	r3, r3, #1
 800a3e4:	61bb      	str	r3, [r7, #24]

  // The GCC optimizer will combine access to 32-bit sizes if we let it. Force
  // it volatile so that it won't do that.
  __IO uint16_t *pdwVal;

  srcVal = src;
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	623b      	str	r3, [r7, #32]
  pdwVal = &pma[PMA_STRIDE*(dst>>1)];
 800a3ea:	4a16      	ldr	r2, [pc, #88]	; (800a444 <dcd_write_packet_memory+0x74>)
 800a3ec:	89fb      	ldrh	r3, [r7, #14]
 800a3ee:	085b      	lsrs	r3, r3, #1
 800a3f0:	b29b      	uxth	r3, r3
 800a3f2:	009b      	lsls	r3, r3, #2
 800a3f4:	4413      	add	r3, r2
 800a3f6:	61fb      	str	r3, [r7, #28]

  for (i = n; i != 0; i--)
 800a3f8:	69bb      	ldr	r3, [r7, #24]
 800a3fa:	627b      	str	r3, [r7, #36]	; 0x24
 800a3fc:	e019      	b.n	800a432 <dcd_write_packet_memory+0x62>
  {
    temp1 = (uint16_t) *srcVal;
 800a3fe:	6a3b      	ldr	r3, [r7, #32]
 800a400:	781b      	ldrb	r3, [r3, #0]
 800a402:	82fb      	strh	r3, [r7, #22]
    srcVal++;
 800a404:	6a3b      	ldr	r3, [r7, #32]
 800a406:	3301      	adds	r3, #1
 800a408:	623b      	str	r3, [r7, #32]
    temp2 = temp1 | ((uint16_t)((uint16_t) ((*srcVal) << 8U))) ;
 800a40a:	6a3b      	ldr	r3, [r7, #32]
 800a40c:	781b      	ldrb	r3, [r3, #0]
 800a40e:	b29b      	uxth	r3, r3
 800a410:	021b      	lsls	r3, r3, #8
 800a412:	b29a      	uxth	r2, r3
 800a414:	8afb      	ldrh	r3, [r7, #22]
 800a416:	4313      	orrs	r3, r2
 800a418:	82bb      	strh	r3, [r7, #20]
    *pdwVal = temp2;
 800a41a:	69fb      	ldr	r3, [r7, #28]
 800a41c:	8aba      	ldrh	r2, [r7, #20]
 800a41e:	801a      	strh	r2, [r3, #0]
    pdwVal += PMA_STRIDE;
 800a420:	69fb      	ldr	r3, [r7, #28]
 800a422:	3304      	adds	r3, #4
 800a424:	61fb      	str	r3, [r7, #28]
    srcVal++;
 800a426:	6a3b      	ldr	r3, [r7, #32]
 800a428:	3301      	adds	r3, #1
 800a42a:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0; i--)
 800a42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a42e:	3b01      	subs	r3, #1
 800a430:	627b      	str	r3, [r7, #36]	; 0x24
 800a432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a434:	2b00      	cmp	r3, #0
 800a436:	d1e2      	bne.n	800a3fe <dcd_write_packet_memory+0x2e>
  }
  return true;
 800a438:	2301      	movs	r3, #1
}
 800a43a:	4618      	mov	r0, r3
 800a43c:	372c      	adds	r7, #44	; 0x2c
 800a43e:	46bd      	mov	sp, r7
 800a440:	bc80      	pop	{r7}
 800a442:	4770      	bx	lr
 800a444:	40006000 	.word	0x40006000

0800a448 <dcd_read_packet_memory>:
  *        Uses byte-access of system memory and 16-bit access of packet memory
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
static bool dcd_read_packet_memory(void *__restrict dst, uint16_t src, size_t wNBytes)
{
 800a448:	b480      	push	{r7}
 800a44a:	b08b      	sub	sp, #44	; 0x2c
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	60f8      	str	r0, [r7, #12]
 800a450:	460b      	mov	r3, r1
 800a452:	607a      	str	r2, [r7, #4]
 800a454:	817b      	strh	r3, [r7, #10]
  uint32_t n = (uint32_t)wNBytes >> 1U;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	085b      	lsrs	r3, r3, #1
 800a45a:	61bb      	str	r3, [r7, #24]
  // The GCC optimizer will combine access to 32-bit sizes if we let it. Force
  // it volatile so that it won't do that.
  __IO const uint16_t *pdwVal;
  uint32_t temp;

  pdwVal = &pma[PMA_STRIDE*(src>>1)];
 800a45c:	4a1e      	ldr	r2, [pc, #120]	; (800a4d8 <dcd_read_packet_memory+0x90>)
 800a45e:	897b      	ldrh	r3, [r7, #10]
 800a460:	085b      	lsrs	r3, r3, #1
 800a462:	b29b      	uxth	r3, r3
 800a464:	009b      	lsls	r3, r3, #2
 800a466:	4413      	add	r3, r2
 800a468:	623b      	str	r3, [r7, #32]
  uint8_t *dstVal = (uint8_t*)dst;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	61fb      	str	r3, [r7, #28]

  for (i = n; i != 0U; i--)
 800a46e:	69bb      	ldr	r3, [r7, #24]
 800a470:	627b      	str	r3, [r7, #36]	; 0x24
 800a472:	e016      	b.n	800a4a2 <dcd_read_packet_memory+0x5a>
  {
    temp = *pdwVal;
 800a474:	6a3b      	ldr	r3, [r7, #32]
 800a476:	881b      	ldrh	r3, [r3, #0]
 800a478:	b29b      	uxth	r3, r3
 800a47a:	617b      	str	r3, [r7, #20]
    pdwVal += PMA_STRIDE;
 800a47c:	6a3b      	ldr	r3, [r7, #32]
 800a47e:	3304      	adds	r3, #4
 800a480:	623b      	str	r3, [r7, #32]
    *dstVal++ = ((temp >> 0) & 0xFF);
 800a482:	69fb      	ldr	r3, [r7, #28]
 800a484:	1c5a      	adds	r2, r3, #1
 800a486:	61fa      	str	r2, [r7, #28]
 800a488:	697a      	ldr	r2, [r7, #20]
 800a48a:	b2d2      	uxtb	r2, r2
 800a48c:	701a      	strb	r2, [r3, #0]
    *dstVal++ = ((temp >> 8) & 0xFF);
 800a48e:	697b      	ldr	r3, [r7, #20]
 800a490:	0a19      	lsrs	r1, r3, #8
 800a492:	69fb      	ldr	r3, [r7, #28]
 800a494:	1c5a      	adds	r2, r3, #1
 800a496:	61fa      	str	r2, [r7, #28]
 800a498:	b2ca      	uxtb	r2, r1
 800a49a:	701a      	strb	r2, [r3, #0]
  for (i = n; i != 0U; i--)
 800a49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a49e:	3b01      	subs	r3, #1
 800a4a0:	627b      	str	r3, [r7, #36]	; 0x24
 800a4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d1e5      	bne.n	800a474 <dcd_read_packet_memory+0x2c>
  }

  if (wNBytes % 2)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f003 0301 	and.w	r3, r3, #1
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d00c      	beq.n	800a4cc <dcd_read_packet_memory+0x84>
  {
    temp = *pdwVal;
 800a4b2:	6a3b      	ldr	r3, [r7, #32]
 800a4b4:	881b      	ldrh	r3, [r3, #0]
 800a4b6:	b29b      	uxth	r3, r3
 800a4b8:	617b      	str	r3, [r7, #20]
    pdwVal += PMA_STRIDE;
 800a4ba:	6a3b      	ldr	r3, [r7, #32]
 800a4bc:	3304      	adds	r3, #4
 800a4be:	623b      	str	r3, [r7, #32]
    *dstVal++ = ((temp >> 0) & 0xFF);
 800a4c0:	69fb      	ldr	r3, [r7, #28]
 800a4c2:	1c5a      	adds	r2, r3, #1
 800a4c4:	61fa      	str	r2, [r7, #28]
 800a4c6:	697a      	ldr	r2, [r7, #20]
 800a4c8:	b2d2      	uxtb	r2, r2
 800a4ca:	701a      	strb	r2, [r3, #0]
  }
  return true;
 800a4cc:	2301      	movs	r3, #1
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	372c      	adds	r7, #44	; 0x2c
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bc80      	pop	{r7}
 800a4d6:	4770      	bx	lr
 800a4d8:	40006000 	.word	0x40006000

0800a4dc <USB_HP_CAN1_TX_IRQHandler>:
  dcd_fs_irqHandler();
}

#elif CFG_TUSB_MCU == OPT_MCU_STM32F1
void USB_HP_IRQHandler(void)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	af00      	add	r7, sp, #0
  dcd_fs_irqHandler();
 800a4e0:	f7ff fcda 	bl	8009e98 <dcd_fs_irqHandler>
}
 800a4e4:	bf00      	nop
 800a4e6:	bd80      	pop	{r7, pc}

0800a4e8 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_IRQHandler(void)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	af00      	add	r7, sp, #0
  dcd_fs_irqHandler();
 800a4ec:	f7ff fcd4 	bl	8009e98 <dcd_fs_irqHandler>
}
 800a4f0:	bf00      	nop
 800a4f2:	bd80      	pop	{r7, pc}

0800a4f4 <USBWakeUp_IRQHandler>:
void USBWakeUp_IRQHandler(void)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	af00      	add	r7, sp, #0
  dcd_fs_irqHandler();
 800a4f8:	f7ff fcce 	bl	8009e98 <dcd_fs_irqHandler>
}
 800a4fc:	bf00      	nop
 800a4fe:	bd80      	pop	{r7, pc}

0800a500 <tusb_init>:
#if TUSB_OPT_DEVICE_ENABLED
#include "device/usbd_pvt.h"
#endif

bool tusb_init(void)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b082      	sub	sp, #8
 800a504:	af00      	add	r7, sp, #0
  // skip if already initialized
  if (_initialized) return true;
 800a506:	4b10      	ldr	r3, [pc, #64]	; (800a548 <tusb_init+0x48>)
 800a508:	781b      	ldrb	r3, [r3, #0]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d001      	beq.n	800a512 <tusb_init+0x12>
 800a50e:	2301      	movs	r3, #1
 800a510:	e016      	b.n	800a540 <tusb_init+0x40>
#if TUSB_OPT_HOST_ENABLED
  TU_ASSERT( usbh_init() ); // init host stack
#endif

#if TUSB_OPT_DEVICE_ENABLED
  TU_ASSERT ( tud_init() ); // init device stack
 800a512:	f7fd fcfd 	bl	8007f10 <tud_init>
 800a516:	4603      	mov	r3, r0
 800a518:	f083 0301 	eor.w	r3, r3, #1
 800a51c:	b2db      	uxtb	r3, r3
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d00a      	beq.n	800a538 <tusb_init+0x38>
 800a522:	4b0a      	ldr	r3, [pc, #40]	; (800a54c <tusb_init+0x4c>)
 800a524:	607b      	str	r3, [r7, #4]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f003 0301 	and.w	r3, r3, #1
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d000      	beq.n	800a534 <tusb_init+0x34>
 800a532:	be00      	bkpt	0x0000
 800a534:	2300      	movs	r3, #0
 800a536:	e003      	b.n	800a540 <tusb_init+0x40>
#endif

  _initialized = true;
 800a538:	4b03      	ldr	r3, [pc, #12]	; (800a548 <tusb_init+0x48>)
 800a53a:	2201      	movs	r2, #1
 800a53c:	701a      	strb	r2, [r3, #0]

  return TUSB_ERROR_NONE;
 800a53e:	2300      	movs	r3, #0
}
 800a540:	4618      	mov	r0, r3
 800a542:	3708      	adds	r7, #8
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}
 800a548:	200026d8 	.word	0x200026d8
 800a54c:	e000edf0 	.word	0xe000edf0

0800a550 <tusb_inited>:

bool tusb_inited(void)
{
 800a550:	b480      	push	{r7}
 800a552:	af00      	add	r7, sp, #0
  return _initialized;
 800a554:	4b02      	ldr	r3, [pc, #8]	; (800a560 <tusb_inited+0x10>)
 800a556:	781b      	ldrb	r3, [r3, #0]
}
 800a558:	4618      	mov	r0, r3
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bc80      	pop	{r7}
 800a55e:	4770      	bx	lr
 800a560:	200026d8 	.word	0x200026d8

0800a564 <__libc_init_array>:
 800a564:	b570      	push	{r4, r5, r6, lr}
 800a566:	2500      	movs	r5, #0
 800a568:	4e0c      	ldr	r6, [pc, #48]	; (800a59c <__libc_init_array+0x38>)
 800a56a:	4c0d      	ldr	r4, [pc, #52]	; (800a5a0 <__libc_init_array+0x3c>)
 800a56c:	1ba4      	subs	r4, r4, r6
 800a56e:	10a4      	asrs	r4, r4, #2
 800a570:	42a5      	cmp	r5, r4
 800a572:	d109      	bne.n	800a588 <__libc_init_array+0x24>
 800a574:	f000 f846 	bl	800a604 <_init>
 800a578:	2500      	movs	r5, #0
 800a57a:	4e0a      	ldr	r6, [pc, #40]	; (800a5a4 <__libc_init_array+0x40>)
 800a57c:	4c0a      	ldr	r4, [pc, #40]	; (800a5a8 <__libc_init_array+0x44>)
 800a57e:	1ba4      	subs	r4, r4, r6
 800a580:	10a4      	asrs	r4, r4, #2
 800a582:	42a5      	cmp	r5, r4
 800a584:	d105      	bne.n	800a592 <__libc_init_array+0x2e>
 800a586:	bd70      	pop	{r4, r5, r6, pc}
 800a588:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a58c:	4798      	blx	r3
 800a58e:	3501      	adds	r5, #1
 800a590:	e7ee      	b.n	800a570 <__libc_init_array+0xc>
 800a592:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a596:	4798      	blx	r3
 800a598:	3501      	adds	r5, #1
 800a59a:	e7f2      	b.n	800a582 <__libc_init_array+0x1e>
 800a59c:	0800a900 	.word	0x0800a900
 800a5a0:	0800a900 	.word	0x0800a900
 800a5a4:	0800a900 	.word	0x0800a900
 800a5a8:	0800a904 	.word	0x0800a904

0800a5ac <memcpy>:
 800a5ac:	b510      	push	{r4, lr}
 800a5ae:	1e43      	subs	r3, r0, #1
 800a5b0:	440a      	add	r2, r1
 800a5b2:	4291      	cmp	r1, r2
 800a5b4:	d100      	bne.n	800a5b8 <memcpy+0xc>
 800a5b6:	bd10      	pop	{r4, pc}
 800a5b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a5c0:	e7f7      	b.n	800a5b2 <memcpy+0x6>

0800a5c2 <memmove>:
 800a5c2:	4288      	cmp	r0, r1
 800a5c4:	b510      	push	{r4, lr}
 800a5c6:	eb01 0302 	add.w	r3, r1, r2
 800a5ca:	d807      	bhi.n	800a5dc <memmove+0x1a>
 800a5cc:	1e42      	subs	r2, r0, #1
 800a5ce:	4299      	cmp	r1, r3
 800a5d0:	d00a      	beq.n	800a5e8 <memmove+0x26>
 800a5d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5d6:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a5da:	e7f8      	b.n	800a5ce <memmove+0xc>
 800a5dc:	4283      	cmp	r3, r0
 800a5de:	d9f5      	bls.n	800a5cc <memmove+0xa>
 800a5e0:	1881      	adds	r1, r0, r2
 800a5e2:	1ad2      	subs	r2, r2, r3
 800a5e4:	42d3      	cmn	r3, r2
 800a5e6:	d100      	bne.n	800a5ea <memmove+0x28>
 800a5e8:	bd10      	pop	{r4, pc}
 800a5ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a5ee:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a5f2:	e7f7      	b.n	800a5e4 <memmove+0x22>

0800a5f4 <memset>:
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	4402      	add	r2, r0
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d100      	bne.n	800a5fe <memset+0xa>
 800a5fc:	4770      	bx	lr
 800a5fe:	f803 1b01 	strb.w	r1, [r3], #1
 800a602:	e7f9      	b.n	800a5f8 <memset+0x4>

0800a604 <_init>:
 800a604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a606:	bf00      	nop
 800a608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a60a:	bc08      	pop	{r3}
 800a60c:	469e      	mov	lr, r3
 800a60e:	4770      	bx	lr

0800a610 <_fini>:
 800a610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a612:	bf00      	nop
 800a614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a616:	bc08      	pop	{r3}
 800a618:	469e      	mov	lr, r3
 800a61a:	4770      	bx	lr
