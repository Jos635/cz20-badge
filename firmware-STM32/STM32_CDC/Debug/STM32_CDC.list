
STM32_CDC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cc4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08006dd0  08006dd0  00016dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e38  08006e38  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  08006e38  08006e38  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006e38  08006e38  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e38  08006e38  00016e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e3c  08006e3c  00016e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08006e40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e44  20000184  08006fc4  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000fc8  08006fc4  00020fc8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   000139da  00000000  00000000  000201ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002edd  00000000  00000000  00033b87  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d10  00000000  00000000  00036a68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ba8  00000000  00000000  00037778  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000168cc  00000000  00000000  00038320  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000db73  00000000  00000000  0004ebec  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006f641  00000000  00000000  0005c75f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cbda0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003380  00000000  00000000  000cbe1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000184 	.word	0x20000184
 8000128:	00000000 	.word	0x00000000
 800012c:	08006db8 	.word	0x08006db8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000188 	.word	0x20000188
 8000148:	08006db8 	.word	0x08006db8

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fae7 	bl	8000724 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f839 	bl	80001cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f8bd 	bl	80002d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800015e:	f000 f88f 	bl	8000280 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000162:	f005 ffad 	bl	80060c0 <MX_USB_DEVICE_Init>
  MX_DMA_Init();
 8000166:	f000 f891 	bl	800028c <MX_DMA_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */
	if(systick) {
 800016a:	4b15      	ldr	r3, [pc, #84]	; (80001c0 <main+0x74>)
 800016c:	681b      	ldr	r3, [r3, #0]
 800016e:	2b00      	cmp	r3, #0
 8000170:	d0fb      	beq.n	800016a <main+0x1e>
		systick = 0;
 8000172:	4b13      	ldr	r3, [pc, #76]	; (80001c0 <main+0x74>)
 8000174:	2200      	movs	r2, #0
 8000176:	601a      	str	r2, [r3, #0]
		if (huart2.Instance->SR & UART_FLAG_IDLE && hdma_usart2_rx.State == HAL_DMA_STATE_BUSY) /* if Idle flag is set */
 8000178:	4b12      	ldr	r3, [pc, #72]	; (80001c4 <main+0x78>)
 800017a:	681b      	ldr	r3, [r3, #0]
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	f003 0310 	and.w	r3, r3, #16
 8000182:	2b00      	cmp	r3, #0
 8000184:	d0f1      	beq.n	800016a <main+0x1e>
 8000186:	4b10      	ldr	r3, [pc, #64]	; (80001c8 <main+0x7c>)
 8000188:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800018c:	2b02      	cmp	r3, #2
 800018e:	d1ec      	bne.n	800016a <main+0x1e>
				{
					volatile uint32_t tmp; /* Must be volatile to prevent optimizations */
					tmp = huart2.Instance->SR; /* Read status register */
 8000190:	4b0c      	ldr	r3, [pc, #48]	; (80001c4 <main+0x78>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	681b      	ldr	r3, [r3, #0]
 8000196:	603b      	str	r3, [r7, #0]
					tmp = huart2.Instance->DR; /* Read data register */ //This two reads clears the IDLE Flag
 8000198:	4b0a      	ldr	r3, [pc, #40]	; (80001c4 <main+0x78>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	685b      	ldr	r3, [r3, #4]
 800019e:	603b      	str	r3, [r7, #0]

					uint32_t cndtr = huart2.hdmarx->Instance->CNDTR;
 80001a0:	4b08      	ldr	r3, [pc, #32]	; (80001c4 <main+0x78>)
 80001a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80001a4:	681b      	ldr	r3, [r3, #0]
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	607b      	str	r3, [r7, #4]
					if(cndtr < 256) {
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	2bff      	cmp	r3, #255	; 0xff
 80001ae:	d8dc      	bhi.n	800016a <main+0x1e>
						HAL_UART_AbortReceive(&huart2);
 80001b0:	4804      	ldr	r0, [pc, #16]	; (80001c4 <main+0x78>)
 80001b2:	f002 fea3 	bl	8002efc <HAL_UART_AbortReceive>
						UART_Early_Exit(&huart2, cndtr);
 80001b6:	6879      	ldr	r1, [r7, #4]
 80001b8:	4802      	ldr	r0, [pc, #8]	; (80001c4 <main+0x78>)
 80001ba:	f006 f9b5 	bl	8006528 <UART_Early_Exit>
	if(systick) {
 80001be:	e7d4      	b.n	800016a <main+0x1e>
 80001c0:	2000048c 	.word	0x2000048c
 80001c4:	2000044c 	.word	0x2000044c
 80001c8:	200003c4 	.word	0x200003c4

080001cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b094      	sub	sp, #80	; 0x50
 80001d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001d6:	2228      	movs	r2, #40	; 0x28
 80001d8:	2100      	movs	r1, #0
 80001da:	4618      	mov	r0, r3
 80001dc:	f006 fde4 	bl	8006da8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001e0:	f107 0314 	add.w	r3, r7, #20
 80001e4:	2200      	movs	r2, #0
 80001e6:	601a      	str	r2, [r3, #0]
 80001e8:	605a      	str	r2, [r3, #4]
 80001ea:	609a      	str	r2, [r3, #8]
 80001ec:	60da      	str	r2, [r3, #12]
 80001ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001f0:	1d3b      	adds	r3, r7, #4
 80001f2:	2200      	movs	r2, #0
 80001f4:	601a      	str	r2, [r3, #0]
 80001f6:	605a      	str	r2, [r3, #4]
 80001f8:	609a      	str	r2, [r3, #8]
 80001fa:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001fc:	2301      	movs	r3, #1
 80001fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000200:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000204:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000206:	2300      	movs	r3, #0
 8000208:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800020a:	2301      	movs	r3, #1
 800020c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800020e:	2302      	movs	r3, #2
 8000210:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000212:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000216:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000218:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800021c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800021e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000222:	4618      	mov	r0, r3
 8000224:	f002 f832 	bl	800228c <HAL_RCC_OscConfig>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d001      	beq.n	8000232 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800022e:	f000 f891 	bl	8000354 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000232:	230f      	movs	r3, #15
 8000234:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000236:	2302      	movs	r3, #2
 8000238:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800023a:	2300      	movs	r3, #0
 800023c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800023e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000242:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000244:	2300      	movs	r3, #0
 8000246:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000248:	f107 0314 	add.w	r3, r7, #20
 800024c:	2102      	movs	r1, #2
 800024e:	4618      	mov	r0, r3
 8000250:	f002 fa9c 	bl	800278c <HAL_RCC_ClockConfig>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d001      	beq.n	800025e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800025a:	f000 f87b 	bl	8000354 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800025e:	2310      	movs	r3, #16
 8000260:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000262:	2300      	movs	r3, #0
 8000264:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000266:	1d3b      	adds	r3, r7, #4
 8000268:	4618      	mov	r0, r3
 800026a:	f002 fc2b 	bl	8002ac4 <HAL_RCCEx_PeriphCLKConfig>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d001      	beq.n	8000278 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000274:	f000 f86e 	bl	8000354 <Error_Handler>
  }
}
 8000278:	bf00      	nop
 800027a:	3750      	adds	r7, #80	; 0x50
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}

08000280 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */
	return;	//Dont init uart here. We do that in the CDC code
 8000284:	bf00      	nop
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000286:	46bd      	mov	sp, r7
 8000288:	bc80      	pop	{r7}
 800028a:	4770      	bx	lr

0800028c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000292:	4b10      	ldr	r3, [pc, #64]	; (80002d4 <MX_DMA_Init+0x48>)
 8000294:	695b      	ldr	r3, [r3, #20]
 8000296:	4a0f      	ldr	r2, [pc, #60]	; (80002d4 <MX_DMA_Init+0x48>)
 8000298:	f043 0301 	orr.w	r3, r3, #1
 800029c:	6153      	str	r3, [r2, #20]
 800029e:	4b0d      	ldr	r3, [pc, #52]	; (80002d4 <MX_DMA_Init+0x48>)
 80002a0:	695b      	ldr	r3, [r3, #20]
 80002a2:	f003 0301 	and.w	r3, r3, #1
 80002a6:	607b      	str	r3, [r7, #4]
 80002a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 1, 0);
 80002aa:	2200      	movs	r2, #0
 80002ac:	2101      	movs	r1, #1
 80002ae:	2010      	movs	r0, #16
 80002b0:	f000 fb93 	bl	80009da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80002b4:	2010      	movs	r0, #16
 80002b6:	f000 fbac 	bl	8000a12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 1, 0);
 80002ba:	2200      	movs	r2, #0
 80002bc:	2101      	movs	r1, #1
 80002be:	2011      	movs	r0, #17
 80002c0:	f000 fb8b 	bl	80009da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80002c4:	2011      	movs	r0, #17
 80002c6:	f000 fba4 	bl	8000a12 <HAL_NVIC_EnableIRQ>

}
 80002ca:	bf00      	nop
 80002cc:	3708      	adds	r7, #8
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	40021000 	.word	0x40021000

080002d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b086      	sub	sp, #24
 80002dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002de:	f107 0308 	add.w	r3, r7, #8
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002ec:	4b17      	ldr	r3, [pc, #92]	; (800034c <MX_GPIO_Init+0x74>)
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	4a16      	ldr	r2, [pc, #88]	; (800034c <MX_GPIO_Init+0x74>)
 80002f2:	f043 0320 	orr.w	r3, r3, #32
 80002f6:	6193      	str	r3, [r2, #24]
 80002f8:	4b14      	ldr	r3, [pc, #80]	; (800034c <MX_GPIO_Init+0x74>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	f003 0320 	and.w	r3, r3, #32
 8000300:	607b      	str	r3, [r7, #4]
 8000302:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000304:	4b11      	ldr	r3, [pc, #68]	; (800034c <MX_GPIO_Init+0x74>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	4a10      	ldr	r2, [pc, #64]	; (800034c <MX_GPIO_Init+0x74>)
 800030a:	f043 0304 	orr.w	r3, r3, #4
 800030e:	6193      	str	r3, [r2, #24]
 8000310:	4b0e      	ldr	r3, [pc, #56]	; (800034c <MX_GPIO_Init+0x74>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	f003 0304 	and.w	r3, r3, #4
 8000318:	603b      	str	r3, [r7, #0]
 800031a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800031c:	2200      	movs	r2, #0
 800031e:	2103      	movs	r1, #3
 8000320:	480b      	ldr	r0, [pc, #44]	; (8000350 <MX_GPIO_Init+0x78>)
 8000322:	f001 f8b9 	bl	8001498 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000326:	2303      	movs	r3, #3
 8000328:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800032a:	2311      	movs	r3, #17
 800032c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800032e:	2300      	movs	r3, #0
 8000330:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000332:	2302      	movs	r3, #2
 8000334:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000336:	f107 0308 	add.w	r3, r7, #8
 800033a:	4619      	mov	r1, r3
 800033c:	4804      	ldr	r0, [pc, #16]	; (8000350 <MX_GPIO_Init+0x78>)
 800033e:	f000 fe95 	bl	800106c <HAL_GPIO_Init>

}
 8000342:	bf00      	nop
 8000344:	3718      	adds	r7, #24
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	40021000 	.word	0x40021000
 8000350:	40010800 	.word	0x40010800

08000354 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000358:	bf00      	nop
 800035a:	46bd      	mov	sp, r7
 800035c:	bc80      	pop	{r7}
 800035e:	4770      	bx	lr

08000360 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b084      	sub	sp, #16
 8000364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000366:	4b27      	ldr	r3, [pc, #156]	; (8000404 <HAL_MspInit+0xa4>)
 8000368:	699b      	ldr	r3, [r3, #24]
 800036a:	4a26      	ldr	r2, [pc, #152]	; (8000404 <HAL_MspInit+0xa4>)
 800036c:	f043 0301 	orr.w	r3, r3, #1
 8000370:	6193      	str	r3, [r2, #24]
 8000372:	4b24      	ldr	r3, [pc, #144]	; (8000404 <HAL_MspInit+0xa4>)
 8000374:	699b      	ldr	r3, [r3, #24]
 8000376:	f003 0301 	and.w	r3, r3, #1
 800037a:	60bb      	str	r3, [r7, #8]
 800037c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800037e:	4b21      	ldr	r3, [pc, #132]	; (8000404 <HAL_MspInit+0xa4>)
 8000380:	69db      	ldr	r3, [r3, #28]
 8000382:	4a20      	ldr	r2, [pc, #128]	; (8000404 <HAL_MspInit+0xa4>)
 8000384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000388:	61d3      	str	r3, [r2, #28]
 800038a:	4b1e      	ldr	r3, [pc, #120]	; (8000404 <HAL_MspInit+0xa4>)
 800038c:	69db      	ldr	r3, [r3, #28]
 800038e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000392:	607b      	str	r3, [r7, #4]
 8000394:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 2, 0);
 8000396:	2200      	movs	r2, #0
 8000398:	2102      	movs	r1, #2
 800039a:	f06f 000b 	mvn.w	r0, #11
 800039e:	f000 fb1c 	bl	80009da <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 2, 0);
 80003a2:	2200      	movs	r2, #0
 80003a4:	2102      	movs	r1, #2
 80003a6:	f06f 000a 	mvn.w	r0, #10
 80003aa:	f000 fb16 	bl	80009da <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 2, 0);
 80003ae:	2200      	movs	r2, #0
 80003b0:	2102      	movs	r1, #2
 80003b2:	f06f 0009 	mvn.w	r0, #9
 80003b6:	f000 fb10 	bl	80009da <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 80003ba:	2200      	movs	r2, #0
 80003bc:	2102      	movs	r1, #2
 80003be:	f06f 0004 	mvn.w	r0, #4
 80003c2:	f000 fb0a 	bl	80009da <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 2, 0);
 80003c6:	2200      	movs	r2, #0
 80003c8:	2102      	movs	r1, #2
 80003ca:	f06f 0003 	mvn.w	r0, #3
 80003ce:	f000 fb04 	bl	80009da <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 2, 0);
 80003d2:	2200      	movs	r2, #0
 80003d4:	2102      	movs	r1, #2
 80003d6:	f06f 0001 	mvn.w	r0, #1
 80003da:	f000 fafe 	bl	80009da <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003de:	4b0a      	ldr	r3, [pc, #40]	; (8000408 <HAL_MspInit+0xa8>)
 80003e0:	685b      	ldr	r3, [r3, #4]
 80003e2:	60fb      	str	r3, [r7, #12]
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003ea:	60fb      	str	r3, [r7, #12]
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003f2:	60fb      	str	r3, [r7, #12]
 80003f4:	4a04      	ldr	r2, [pc, #16]	; (8000408 <HAL_MspInit+0xa8>)
 80003f6:	68fb      	ldr	r3, [r7, #12]
 80003f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003fa:	bf00      	nop
 80003fc:	3710      	adds	r7, #16
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	40021000 	.word	0x40021000
 8000408:	40010000 	.word	0x40010000

0800040c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b088      	sub	sp, #32
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000414:	f107 0310 	add.w	r3, r7, #16
 8000418:	2200      	movs	r2, #0
 800041a:	601a      	str	r2, [r3, #0]
 800041c:	605a      	str	r2, [r3, #4]
 800041e:	609a      	str	r2, [r3, #8]
 8000420:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	4a4a      	ldr	r2, [pc, #296]	; (8000550 <HAL_UART_MspInit+0x144>)
 8000428:	4293      	cmp	r3, r2
 800042a:	f040 808c 	bne.w	8000546 <HAL_UART_MspInit+0x13a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */
	  __HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	68da      	ldr	r2, [r3, #12]
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	f042 0210 	orr.w	r2, r2, #16
 800043c:	60da      	str	r2, [r3, #12]
  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800043e:	4b45      	ldr	r3, [pc, #276]	; (8000554 <HAL_UART_MspInit+0x148>)
 8000440:	69db      	ldr	r3, [r3, #28]
 8000442:	4a44      	ldr	r2, [pc, #272]	; (8000554 <HAL_UART_MspInit+0x148>)
 8000444:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000448:	61d3      	str	r3, [r2, #28]
 800044a:	4b42      	ldr	r3, [pc, #264]	; (8000554 <HAL_UART_MspInit+0x148>)
 800044c:	69db      	ldr	r3, [r3, #28]
 800044e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000452:	60fb      	str	r3, [r7, #12]
 8000454:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000456:	4b3f      	ldr	r3, [pc, #252]	; (8000554 <HAL_UART_MspInit+0x148>)
 8000458:	699b      	ldr	r3, [r3, #24]
 800045a:	4a3e      	ldr	r2, [pc, #248]	; (8000554 <HAL_UART_MspInit+0x148>)
 800045c:	f043 0304 	orr.w	r3, r3, #4
 8000460:	6193      	str	r3, [r2, #24]
 8000462:	4b3c      	ldr	r3, [pc, #240]	; (8000554 <HAL_UART_MspInit+0x148>)
 8000464:	699b      	ldr	r3, [r3, #24]
 8000466:	f003 0304 	and.w	r3, r3, #4
 800046a:	60bb      	str	r3, [r7, #8]
 800046c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800046e:	2304      	movs	r3, #4
 8000470:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000472:	2302      	movs	r3, #2
 8000474:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000476:	2303      	movs	r3, #3
 8000478:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800047a:	f107 0310 	add.w	r3, r7, #16
 800047e:	4619      	mov	r1, r3
 8000480:	4835      	ldr	r0, [pc, #212]	; (8000558 <HAL_UART_MspInit+0x14c>)
 8000482:	f000 fdf3 	bl	800106c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000486:	2308      	movs	r3, #8
 8000488:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800048a:	2300      	movs	r3, #0
 800048c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048e:	2300      	movs	r3, #0
 8000490:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000492:	f107 0310 	add.w	r3, r7, #16
 8000496:	4619      	mov	r1, r3
 8000498:	482f      	ldr	r0, [pc, #188]	; (8000558 <HAL_UART_MspInit+0x14c>)
 800049a:	f000 fde7 	bl	800106c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800049e:	4b2f      	ldr	r3, [pc, #188]	; (800055c <HAL_UART_MspInit+0x150>)
 80004a0:	4a2f      	ldr	r2, [pc, #188]	; (8000560 <HAL_UART_MspInit+0x154>)
 80004a2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80004a4:	4b2d      	ldr	r3, [pc, #180]	; (800055c <HAL_UART_MspInit+0x150>)
 80004a6:	2210      	movs	r2, #16
 80004a8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80004aa:	4b2c      	ldr	r3, [pc, #176]	; (800055c <HAL_UART_MspInit+0x150>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80004b0:	4b2a      	ldr	r3, [pc, #168]	; (800055c <HAL_UART_MspInit+0x150>)
 80004b2:	2280      	movs	r2, #128	; 0x80
 80004b4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80004b6:	4b29      	ldr	r3, [pc, #164]	; (800055c <HAL_UART_MspInit+0x150>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80004bc:	4b27      	ldr	r3, [pc, #156]	; (800055c <HAL_UART_MspInit+0x150>)
 80004be:	2200      	movs	r2, #0
 80004c0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80004c2:	4b26      	ldr	r3, [pc, #152]	; (800055c <HAL_UART_MspInit+0x150>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80004c8:	4b24      	ldr	r3, [pc, #144]	; (800055c <HAL_UART_MspInit+0x150>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80004ce:	4823      	ldr	r0, [pc, #140]	; (800055c <HAL_UART_MspInit+0x150>)
 80004d0:	f000 fac8 	bl	8000a64 <HAL_DMA_Init>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 80004da:	f7ff ff3b 	bl	8000354 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	4a1e      	ldr	r2, [pc, #120]	; (800055c <HAL_UART_MspInit+0x150>)
 80004e2:	631a      	str	r2, [r3, #48]	; 0x30
 80004e4:	4a1d      	ldr	r2, [pc, #116]	; (800055c <HAL_UART_MspInit+0x150>)
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80004ea:	4b1e      	ldr	r3, [pc, #120]	; (8000564 <HAL_UART_MspInit+0x158>)
 80004ec:	4a1e      	ldr	r2, [pc, #120]	; (8000568 <HAL_UART_MspInit+0x15c>)
 80004ee:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80004f0:	4b1c      	ldr	r3, [pc, #112]	; (8000564 <HAL_UART_MspInit+0x158>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80004f6:	4b1b      	ldr	r3, [pc, #108]	; (8000564 <HAL_UART_MspInit+0x158>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80004fc:	4b19      	ldr	r3, [pc, #100]	; (8000564 <HAL_UART_MspInit+0x158>)
 80004fe:	2280      	movs	r2, #128	; 0x80
 8000500:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000502:	4b18      	ldr	r3, [pc, #96]	; (8000564 <HAL_UART_MspInit+0x158>)
 8000504:	2200      	movs	r2, #0
 8000506:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000508:	4b16      	ldr	r3, [pc, #88]	; (8000564 <HAL_UART_MspInit+0x158>)
 800050a:	2200      	movs	r2, #0
 800050c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800050e:	4b15      	ldr	r3, [pc, #84]	; (8000564 <HAL_UART_MspInit+0x158>)
 8000510:	2200      	movs	r2, #0
 8000512:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000514:	4b13      	ldr	r3, [pc, #76]	; (8000564 <HAL_UART_MspInit+0x158>)
 8000516:	2200      	movs	r2, #0
 8000518:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800051a:	4812      	ldr	r0, [pc, #72]	; (8000564 <HAL_UART_MspInit+0x158>)
 800051c:	f000 faa2 	bl	8000a64 <HAL_DMA_Init>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <HAL_UART_MspInit+0x11e>
    {
      Error_Handler();
 8000526:	f7ff ff15 	bl	8000354 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	4a0d      	ldr	r2, [pc, #52]	; (8000564 <HAL_UART_MspInit+0x158>)
 800052e:	635a      	str	r2, [r3, #52]	; 0x34
 8000530:	4a0c      	ldr	r2, [pc, #48]	; (8000564 <HAL_UART_MspInit+0x158>)
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8000536:	2200      	movs	r2, #0
 8000538:	2101      	movs	r1, #1
 800053a:	2026      	movs	r0, #38	; 0x26
 800053c:	f000 fa4d 	bl	80009da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000540:	2026      	movs	r0, #38	; 0x26
 8000542:	f000 fa66 	bl	8000a12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000546:	bf00      	nop
 8000548:	3720      	adds	r7, #32
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	40004400 	.word	0x40004400
 8000554:	40021000 	.word	0x40021000
 8000558:	40010800 	.word	0x40010800
 800055c:	20000408 	.word	0x20000408
 8000560:	40020080 	.word	0x40020080
 8000564:	200003c4 	.word	0x200003c4
 8000568:	4002006c 	.word	0x4002006c

0800056c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART2)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a0e      	ldr	r2, [pc, #56]	; (80005b4 <HAL_UART_MspDeInit+0x48>)
 800057a:	4293      	cmp	r3, r2
 800057c:	d116      	bne.n	80005ac <HAL_UART_MspDeInit+0x40>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 800057e:	4b0e      	ldr	r3, [pc, #56]	; (80005b8 <HAL_UART_MspDeInit+0x4c>)
 8000580:	69db      	ldr	r3, [r3, #28]
 8000582:	4a0d      	ldr	r2, [pc, #52]	; (80005b8 <HAL_UART_MspDeInit+0x4c>)
 8000584:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000588:	61d3      	str	r3, [r2, #28]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 800058a:	210c      	movs	r1, #12
 800058c:	480b      	ldr	r0, [pc, #44]	; (80005bc <HAL_UART_MspDeInit+0x50>)
 800058e:	f000 fec7 	bl	8001320 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmatx);
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	4618      	mov	r0, r3
 8000598:	f000 fabe 	bl	8000b18 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 fab9 	bl	8000b18 <HAL_DMA_DeInit>

    /* USART2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80005a6:	2026      	movs	r0, #38	; 0x26
 80005a8:	f000 fa41 	bl	8000a2e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 80005ac:	bf00      	nop
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40004400 	.word	0x40004400
 80005b8:	40021000 	.word	0x40021000
 80005bc:	40010800 	.word	0x40010800

080005c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr

080005cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005d0:	e7fe      	b.n	80005d0 <HardFault_Handler+0x4>

080005d2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005d2:	b480      	push	{r7}
 80005d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005d6:	e7fe      	b.n	80005d6 <MemManage_Handler+0x4>

080005d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005dc:	e7fe      	b.n	80005dc <BusFault_Handler+0x4>

080005de <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005de:	b480      	push	{r7}
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005e2:	e7fe      	b.n	80005e2 <UsageFault_Handler+0x4>

080005e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bc80      	pop	{r7}
 80005ee:	4770      	bx	lr

080005f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005f4:	bf00      	nop
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bc80      	pop	{r7}
 80005fa:	4770      	bx	lr

080005fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000600:	bf00      	nop
 8000602:	46bd      	mov	sp, r7
 8000604:	bc80      	pop	{r7}
 8000606:	4770      	bx	lr

08000608 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800060c:	f000 f8d0 	bl	80007b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  systick = 1;
 8000610:	4b02      	ldr	r3, [pc, #8]	; (800061c <SysTick_Handler+0x14>)
 8000612:	2201      	movs	r2, #1
 8000614:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	2000048c 	.word	0x2000048c

08000620 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000624:	4802      	ldr	r0, [pc, #8]	; (8000630 <DMA1_Channel6_IRQHandler+0x10>)
 8000626:	f000 fbe3 	bl	8000df0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	200003c4 	.word	0x200003c4

08000634 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000638:	4802      	ldr	r0, [pc, #8]	; (8000644 <DMA1_Channel7_IRQHandler+0x10>)
 800063a:	f000 fbd9 	bl	8000df0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20000408 	.word	0x20000408

08000648 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800064c:	4802      	ldr	r0, [pc, #8]	; (8000658 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800064e:	f001 f842 	bl	80016d6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	20000d5c 	.word	0x20000d5c

0800065c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000660:	4802      	ldr	r0, [pc, #8]	; (800066c <USART2_IRQHandler+0x10>)
 8000662:	f002 fc97 	bl	8002f94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	2000044c 	.word	0x2000044c

08000670 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000674:	4b15      	ldr	r3, [pc, #84]	; (80006cc <SystemInit+0x5c>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a14      	ldr	r2, [pc, #80]	; (80006cc <SystemInit+0x5c>)
 800067a:	f043 0301 	orr.w	r3, r3, #1
 800067e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000680:	4b12      	ldr	r3, [pc, #72]	; (80006cc <SystemInit+0x5c>)
 8000682:	685a      	ldr	r2, [r3, #4]
 8000684:	4911      	ldr	r1, [pc, #68]	; (80006cc <SystemInit+0x5c>)
 8000686:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <SystemInit+0x60>)
 8000688:	4013      	ands	r3, r2
 800068a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800068c:	4b0f      	ldr	r3, [pc, #60]	; (80006cc <SystemInit+0x5c>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a0e      	ldr	r2, [pc, #56]	; (80006cc <SystemInit+0x5c>)
 8000692:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000696:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800069a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800069c:	4b0b      	ldr	r3, [pc, #44]	; (80006cc <SystemInit+0x5c>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a0a      	ldr	r2, [pc, #40]	; (80006cc <SystemInit+0x5c>)
 80006a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006a6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80006a8:	4b08      	ldr	r3, [pc, #32]	; (80006cc <SystemInit+0x5c>)
 80006aa:	685b      	ldr	r3, [r3, #4]
 80006ac:	4a07      	ldr	r2, [pc, #28]	; (80006cc <SystemInit+0x5c>)
 80006ae:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80006b2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80006b4:	4b05      	ldr	r3, [pc, #20]	; (80006cc <SystemInit+0x5c>)
 80006b6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80006ba:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80006bc:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <SystemInit+0x64>)
 80006be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006c2:	609a      	str	r2, [r3, #8]
#endif 
}
 80006c4:	bf00      	nop
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bc80      	pop	{r7}
 80006ca:	4770      	bx	lr
 80006cc:	40021000 	.word	0x40021000
 80006d0:	f8ff0000 	.word	0xf8ff0000
 80006d4:	e000ed00 	.word	0xe000ed00

080006d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80006d8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80006da:	e003      	b.n	80006e4 <LoopCopyDataInit>

080006dc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80006dc:	4b0b      	ldr	r3, [pc, #44]	; (800070c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80006de:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80006e0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80006e2:	3104      	adds	r1, #4

080006e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80006e4:	480a      	ldr	r0, [pc, #40]	; (8000710 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80006e6:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80006e8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80006ea:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80006ec:	d3f6      	bcc.n	80006dc <CopyDataInit>
  ldr r2, =_sbss
 80006ee:	4a0a      	ldr	r2, [pc, #40]	; (8000718 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80006f0:	e002      	b.n	80006f8 <LoopFillZerobss>

080006f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80006f2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80006f4:	f842 3b04 	str.w	r3, [r2], #4

080006f8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80006f8:	4b08      	ldr	r3, [pc, #32]	; (800071c <LoopFillZerobss+0x24>)
  cmp r2, r3
 80006fa:	429a      	cmp	r2, r3
  bcc FillZerobss
 80006fc:	d3f9      	bcc.n	80006f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006fe:	f7ff ffb7 	bl	8000670 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000702:	f006 fb2d 	bl	8006d60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000706:	f7ff fd21 	bl	800014c <main>
  bx lr
 800070a:	4770      	bx	lr
  ldr r3, =_sidata
 800070c:	08006e40 	.word	0x08006e40
  ldr r0, =_sdata
 8000710:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000714:	20000184 	.word	0x20000184
  ldr r2, =_sbss
 8000718:	20000184 	.word	0x20000184
  ldr r3, = _ebss
 800071c:	20000fc8 	.word	0x20000fc8

08000720 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000720:	e7fe      	b.n	8000720 <ADC1_2_IRQHandler>
	...

08000724 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000728:	4b08      	ldr	r3, [pc, #32]	; (800074c <HAL_Init+0x28>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a07      	ldr	r2, [pc, #28]	; (800074c <HAL_Init+0x28>)
 800072e:	f043 0310 	orr.w	r3, r3, #16
 8000732:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000734:	2003      	movs	r0, #3
 8000736:	f000 f945 	bl	80009c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800073a:	2000      	movs	r0, #0
 800073c:	f000 f808 	bl	8000750 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000740:	f7ff fe0e 	bl	8000360 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000744:	2300      	movs	r3, #0
}
 8000746:	4618      	mov	r0, r3
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40022000 	.word	0x40022000

08000750 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000758:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <HAL_InitTick+0x54>)
 800075a:	681a      	ldr	r2, [r3, #0]
 800075c:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <HAL_InitTick+0x58>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	4619      	mov	r1, r3
 8000762:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000766:	fbb3 f3f1 	udiv	r3, r3, r1
 800076a:	fbb2 f3f3 	udiv	r3, r2, r3
 800076e:	4618      	mov	r0, r3
 8000770:	f000 f96b 	bl	8000a4a <HAL_SYSTICK_Config>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800077a:	2301      	movs	r3, #1
 800077c:	e00e      	b.n	800079c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	2b0f      	cmp	r3, #15
 8000782:	d80a      	bhi.n	800079a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000784:	2200      	movs	r2, #0
 8000786:	6879      	ldr	r1, [r7, #4]
 8000788:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800078c:	f000 f925 	bl	80009da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000790:	4a06      	ldr	r2, [pc, #24]	; (80007ac <HAL_InitTick+0x5c>)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000796:	2300      	movs	r3, #0
 8000798:	e000      	b.n	800079c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800079a:	2301      	movs	r3, #1
}
 800079c:	4618      	mov	r0, r3
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20000000 	.word	0x20000000
 80007a8:	20000008 	.word	0x20000008
 80007ac:	20000004 	.word	0x20000004

080007b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007b4:	4b05      	ldr	r3, [pc, #20]	; (80007cc <HAL_IncTick+0x1c>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	461a      	mov	r2, r3
 80007ba:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <HAL_IncTick+0x20>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4413      	add	r3, r2
 80007c0:	4a03      	ldr	r2, [pc, #12]	; (80007d0 <HAL_IncTick+0x20>)
 80007c2:	6013      	str	r3, [r2, #0]
}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bc80      	pop	{r7}
 80007ca:	4770      	bx	lr
 80007cc:	20000008 	.word	0x20000008
 80007d0:	20000490 	.word	0x20000490

080007d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  return uwTick;
 80007d8:	4b02      	ldr	r3, [pc, #8]	; (80007e4 <HAL_GetTick+0x10>)
 80007da:	681b      	ldr	r3, [r3, #0]
}
 80007dc:	4618      	mov	r0, r3
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr
 80007e4:	20000490 	.word	0x20000490

080007e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b085      	sub	sp, #20
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	f003 0307 	and.w	r3, r3, #7
 80007f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007f8:	4b0c      	ldr	r3, [pc, #48]	; (800082c <__NVIC_SetPriorityGrouping+0x44>)
 80007fa:	68db      	ldr	r3, [r3, #12]
 80007fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007fe:	68ba      	ldr	r2, [r7, #8]
 8000800:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000804:	4013      	ands	r3, r2
 8000806:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000810:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000818:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800081a:	4a04      	ldr	r2, [pc, #16]	; (800082c <__NVIC_SetPriorityGrouping+0x44>)
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	60d3      	str	r3, [r2, #12]
}
 8000820:	bf00      	nop
 8000822:	3714      	adds	r7, #20
 8000824:	46bd      	mov	sp, r7
 8000826:	bc80      	pop	{r7}
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	e000ed00 	.word	0xe000ed00

08000830 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000834:	4b04      	ldr	r3, [pc, #16]	; (8000848 <__NVIC_GetPriorityGrouping+0x18>)
 8000836:	68db      	ldr	r3, [r3, #12]
 8000838:	0a1b      	lsrs	r3, r3, #8
 800083a:	f003 0307 	and.w	r3, r3, #7
}
 800083e:	4618      	mov	r0, r3
 8000840:	46bd      	mov	sp, r7
 8000842:	bc80      	pop	{r7}
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	e000ed00 	.word	0xe000ed00

0800084c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085a:	2b00      	cmp	r3, #0
 800085c:	db0b      	blt.n	8000876 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800085e:	79fb      	ldrb	r3, [r7, #7]
 8000860:	f003 021f 	and.w	r2, r3, #31
 8000864:	4906      	ldr	r1, [pc, #24]	; (8000880 <__NVIC_EnableIRQ+0x34>)
 8000866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086a:	095b      	lsrs	r3, r3, #5
 800086c:	2001      	movs	r0, #1
 800086e:	fa00 f202 	lsl.w	r2, r0, r2
 8000872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000876:	bf00      	nop
 8000878:	370c      	adds	r7, #12
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr
 8000880:	e000e100 	.word	0xe000e100

08000884 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800088e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000892:	2b00      	cmp	r3, #0
 8000894:	db10      	blt.n	80008b8 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	f003 021f 	and.w	r2, r3, #31
 800089c:	4909      	ldr	r1, [pc, #36]	; (80008c4 <__NVIC_DisableIRQ+0x40>)
 800089e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a2:	095b      	lsrs	r3, r3, #5
 80008a4:	2001      	movs	r0, #1
 80008a6:	fa00 f202 	lsl.w	r2, r0, r2
 80008aa:	3320      	adds	r3, #32
 80008ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80008b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008b4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80008b8:	bf00      	nop
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	bc80      	pop	{r7}
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	e000e100 	.word	0xe000e100

080008c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	6039      	str	r1, [r7, #0]
 80008d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	db0a      	blt.n	80008f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	b2da      	uxtb	r2, r3
 80008e0:	490c      	ldr	r1, [pc, #48]	; (8000914 <__NVIC_SetPriority+0x4c>)
 80008e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e6:	0112      	lsls	r2, r2, #4
 80008e8:	b2d2      	uxtb	r2, r2
 80008ea:	440b      	add	r3, r1
 80008ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008f0:	e00a      	b.n	8000908 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	b2da      	uxtb	r2, r3
 80008f6:	4908      	ldr	r1, [pc, #32]	; (8000918 <__NVIC_SetPriority+0x50>)
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	f003 030f 	and.w	r3, r3, #15
 80008fe:	3b04      	subs	r3, #4
 8000900:	0112      	lsls	r2, r2, #4
 8000902:	b2d2      	uxtb	r2, r2
 8000904:	440b      	add	r3, r1
 8000906:	761a      	strb	r2, [r3, #24]
}
 8000908:	bf00      	nop
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	bc80      	pop	{r7}
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	e000e100 	.word	0xe000e100
 8000918:	e000ed00 	.word	0xe000ed00

0800091c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800091c:	b480      	push	{r7}
 800091e:	b089      	sub	sp, #36	; 0x24
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	f003 0307 	and.w	r3, r3, #7
 800092e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000930:	69fb      	ldr	r3, [r7, #28]
 8000932:	f1c3 0307 	rsb	r3, r3, #7
 8000936:	2b04      	cmp	r3, #4
 8000938:	bf28      	it	cs
 800093a:	2304      	movcs	r3, #4
 800093c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	3304      	adds	r3, #4
 8000942:	2b06      	cmp	r3, #6
 8000944:	d902      	bls.n	800094c <NVIC_EncodePriority+0x30>
 8000946:	69fb      	ldr	r3, [r7, #28]
 8000948:	3b03      	subs	r3, #3
 800094a:	e000      	b.n	800094e <NVIC_EncodePriority+0x32>
 800094c:	2300      	movs	r3, #0
 800094e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000950:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000954:	69bb      	ldr	r3, [r7, #24]
 8000956:	fa02 f303 	lsl.w	r3, r2, r3
 800095a:	43da      	mvns	r2, r3
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	401a      	ands	r2, r3
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000964:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	fa01 f303 	lsl.w	r3, r1, r3
 800096e:	43d9      	mvns	r1, r3
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000974:	4313      	orrs	r3, r2
         );
}
 8000976:	4618      	mov	r0, r3
 8000978:	3724      	adds	r7, #36	; 0x24
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr

08000980 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	3b01      	subs	r3, #1
 800098c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000990:	d301      	bcc.n	8000996 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000992:	2301      	movs	r3, #1
 8000994:	e00f      	b.n	80009b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000996:	4a0a      	ldr	r2, [pc, #40]	; (80009c0 <SysTick_Config+0x40>)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	3b01      	subs	r3, #1
 800099c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800099e:	210f      	movs	r1, #15
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009a4:	f7ff ff90 	bl	80008c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009a8:	4b05      	ldr	r3, [pc, #20]	; (80009c0 <SysTick_Config+0x40>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009ae:	4b04      	ldr	r3, [pc, #16]	; (80009c0 <SysTick_Config+0x40>)
 80009b0:	2207      	movs	r2, #7
 80009b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009b4:	2300      	movs	r3, #0
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	e000e010 	.word	0xe000e010

080009c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009cc:	6878      	ldr	r0, [r7, #4]
 80009ce:	f7ff ff0b 	bl	80007e8 <__NVIC_SetPriorityGrouping>
}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009da:	b580      	push	{r7, lr}
 80009dc:	b086      	sub	sp, #24
 80009de:	af00      	add	r7, sp, #0
 80009e0:	4603      	mov	r3, r0
 80009e2:	60b9      	str	r1, [r7, #8]
 80009e4:	607a      	str	r2, [r7, #4]
 80009e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009e8:	2300      	movs	r3, #0
 80009ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009ec:	f7ff ff20 	bl	8000830 <__NVIC_GetPriorityGrouping>
 80009f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009f2:	687a      	ldr	r2, [r7, #4]
 80009f4:	68b9      	ldr	r1, [r7, #8]
 80009f6:	6978      	ldr	r0, [r7, #20]
 80009f8:	f7ff ff90 	bl	800091c <NVIC_EncodePriority>
 80009fc:	4602      	mov	r2, r0
 80009fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a02:	4611      	mov	r1, r2
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff ff5f 	bl	80008c8 <__NVIC_SetPriority>
}
 8000a0a:	bf00      	nop
 8000a0c:	3718      	adds	r7, #24
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b082      	sub	sp, #8
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	4603      	mov	r3, r0
 8000a1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff ff13 	bl	800084c <__NVIC_EnableIRQ>
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b082      	sub	sp, #8
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	4603      	mov	r3, r0
 8000a36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff ff21 	bl	8000884 <__NVIC_DisableIRQ>
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b082      	sub	sp, #8
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a52:	6878      	ldr	r0, [r7, #4]
 8000a54:	f7ff ff94 	bl	8000980 <SysTick_Config>
 8000a58:	4603      	mov	r3, r0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
	...

08000a64 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d101      	bne.n	8000a7a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000a76:	2301      	movs	r3, #1
 8000a78:	e043      	b.n	8000b02 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	461a      	mov	r2, r3
 8000a80:	4b22      	ldr	r3, [pc, #136]	; (8000b0c <HAL_DMA_Init+0xa8>)
 8000a82:	4413      	add	r3, r2
 8000a84:	4a22      	ldr	r2, [pc, #136]	; (8000b10 <HAL_DMA_Init+0xac>)
 8000a86:	fba2 2303 	umull	r2, r3, r2, r3
 8000a8a:	091b      	lsrs	r3, r3, #4
 8000a8c:	009a      	lsls	r2, r3, #2
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4a1f      	ldr	r2, [pc, #124]	; (8000b14 <HAL_DMA_Init+0xb0>)
 8000a96:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2202      	movs	r2, #2
 8000a9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000aae:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000ab2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000abc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	68db      	ldr	r3, [r3, #12]
 8000ac2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ac8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	695b      	ldr	r3, [r3, #20]
 8000ace:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ad4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	69db      	ldr	r3, [r3, #28]
 8000ada:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000adc:	68fa      	ldr	r2, [r7, #12]
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	68fa      	ldr	r2, [r7, #12]
 8000ae8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2200      	movs	r2, #0
 8000aee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2201      	movs	r2, #1
 8000af4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2200      	movs	r2, #0
 8000afc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000b00:	2300      	movs	r3, #0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3714      	adds	r7, #20
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr
 8000b0c:	bffdfff8 	.word	0xbffdfff8
 8000b10:	cccccccd 	.word	0xcccccccd
 8000b14:	40020000 	.word	0x40020000

08000b18 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d101      	bne.n	8000b2a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8000b26:	2301      	movs	r3, #1
 8000b28:	e046      	b.n	8000bb8 <HAL_DMA_DeInit+0xa0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f022 0201 	bic.w	r2, r2, #1
 8000b38:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	2200      	movs	r2, #0
 8000b48:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	2200      	movs	r2, #0
 8000b58:	60da      	str	r2, [r3, #12]
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	461a      	mov	r2, r3
 8000b60:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <HAL_DMA_DeInit+0xac>)
 8000b62:	4413      	add	r3, r2
 8000b64:	4a18      	ldr	r2, [pc, #96]	; (8000bc8 <HAL_DMA_DeInit+0xb0>)
 8000b66:	fba2 2303 	umull	r2, r3, r2, r3
 8000b6a:	091b      	lsrs	r3, r3, #4
 8000b6c:	009a      	lsls	r2, r3, #2
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4a15      	ldr	r2, [pc, #84]	; (8000bcc <HAL_DMA_DeInit+0xb4>)
 8000b76:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b80:	2101      	movs	r1, #1
 8000b82:	fa01 f202 	lsl.w	r2, r1, r2
 8000b86:	605a      	str	r2, [r3, #4]

  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2200      	movs	r2, #0
 8000b92:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2200      	movs	r2, #0
 8000b98:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000bb6:	2300      	movs	r3, #0
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bc80      	pop	{r7}
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	bffdfff8 	.word	0xbffdfff8
 8000bc8:	cccccccd 	.word	0xcccccccd
 8000bcc:	40020000 	.word	0x40020000

08000bd0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b086      	sub	sp, #24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	60b9      	str	r1, [r7, #8]
 8000bda:	607a      	str	r2, [r7, #4]
 8000bdc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000bde:	2300      	movs	r3, #0
 8000be0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d101      	bne.n	8000bf0 <HAL_DMA_Start_IT+0x20>
 8000bec:	2302      	movs	r3, #2
 8000bee:	e04a      	b.n	8000c86 <HAL_DMA_Start_IT+0xb6>
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d13a      	bne.n	8000c78 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	2202      	movs	r2, #2
 8000c06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f022 0201 	bic.w	r2, r2, #1
 8000c1e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	68b9      	ldr	r1, [r7, #8]
 8000c26:	68f8      	ldr	r0, [r7, #12]
 8000c28:	f000 f9f3 	bl	8001012 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d008      	beq.n	8000c46 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f042 020e 	orr.w	r2, r2, #14
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	e00f      	b.n	8000c66 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f022 0204 	bic.w	r2, r2, #4
 8000c54:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f042 020a 	orr.w	r2, r2, #10
 8000c64:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f042 0201 	orr.w	r2, r2, #1
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	e005      	b.n	8000c84 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000c80:	2302      	movs	r3, #2
 8000c82:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000c84:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3718      	adds	r7, #24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	b085      	sub	sp, #20
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c96:	2300      	movs	r3, #0
 8000c98:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ca0:	2b02      	cmp	r3, #2
 8000ca2:	d008      	beq.n	8000cb6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2204      	movs	r2, #4
 8000ca8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2200      	movs	r2, #0
 8000cae:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e020      	b.n	8000cf8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f022 020e 	bic.w	r2, r2, #14
 8000cc4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f022 0201 	bic.w	r2, r2, #1
 8000cd4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cde:	2101      	movs	r1, #1
 8000ce0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ce4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2201      	movs	r2, #1
 8000cea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3714      	adds	r7, #20
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bc80      	pop	{r7}
 8000d00:	4770      	bx	lr
	...

08000d04 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d16:	2b02      	cmp	r3, #2
 8000d18:	d005      	beq.n	8000d26 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2204      	movs	r2, #4
 8000d1e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000d20:	2301      	movs	r3, #1
 8000d22:	73fb      	strb	r3, [r7, #15]
 8000d24:	e051      	b.n	8000dca <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f022 020e 	bic.w	r2, r2, #14
 8000d34:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f022 0201 	bic.w	r2, r2, #1
 8000d44:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a22      	ldr	r2, [pc, #136]	; (8000dd4 <HAL_DMA_Abort_IT+0xd0>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d029      	beq.n	8000da4 <HAL_DMA_Abort_IT+0xa0>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a20      	ldr	r2, [pc, #128]	; (8000dd8 <HAL_DMA_Abort_IT+0xd4>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d022      	beq.n	8000da0 <HAL_DMA_Abort_IT+0x9c>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a1f      	ldr	r2, [pc, #124]	; (8000ddc <HAL_DMA_Abort_IT+0xd8>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d01a      	beq.n	8000d9a <HAL_DMA_Abort_IT+0x96>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a1d      	ldr	r2, [pc, #116]	; (8000de0 <HAL_DMA_Abort_IT+0xdc>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d012      	beq.n	8000d94 <HAL_DMA_Abort_IT+0x90>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a1c      	ldr	r2, [pc, #112]	; (8000de4 <HAL_DMA_Abort_IT+0xe0>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d00a      	beq.n	8000d8e <HAL_DMA_Abort_IT+0x8a>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a1a      	ldr	r2, [pc, #104]	; (8000de8 <HAL_DMA_Abort_IT+0xe4>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d102      	bne.n	8000d88 <HAL_DMA_Abort_IT+0x84>
 8000d82:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d86:	e00e      	b.n	8000da6 <HAL_DMA_Abort_IT+0xa2>
 8000d88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d8c:	e00b      	b.n	8000da6 <HAL_DMA_Abort_IT+0xa2>
 8000d8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d92:	e008      	b.n	8000da6 <HAL_DMA_Abort_IT+0xa2>
 8000d94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d98:	e005      	b.n	8000da6 <HAL_DMA_Abort_IT+0xa2>
 8000d9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d9e:	e002      	b.n	8000da6 <HAL_DMA_Abort_IT+0xa2>
 8000da0:	2310      	movs	r3, #16
 8000da2:	e000      	b.n	8000da6 <HAL_DMA_Abort_IT+0xa2>
 8000da4:	2301      	movs	r3, #1
 8000da6:	4a11      	ldr	r2, [pc, #68]	; (8000dec <HAL_DMA_Abort_IT+0xe8>)
 8000da8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2201      	movs	r2, #1
 8000dae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2200      	movs	r2, #0
 8000db6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d003      	beq.n	8000dca <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	4798      	blx	r3
    } 
  }
  return status;
 8000dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3710      	adds	r7, #16
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40020008 	.word	0x40020008
 8000dd8:	4002001c 	.word	0x4002001c
 8000ddc:	40020030 	.word	0x40020030
 8000de0:	40020044 	.word	0x40020044
 8000de4:	40020058 	.word	0x40020058
 8000de8:	4002006c 	.word	0x4002006c
 8000dec:	40020000 	.word	0x40020000

08000df0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0c:	2204      	movs	r2, #4
 8000e0e:	409a      	lsls	r2, r3
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	4013      	ands	r3, r2
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d04f      	beq.n	8000eb8 <HAL_DMA_IRQHandler+0xc8>
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	f003 0304 	and.w	r3, r3, #4
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d04a      	beq.n	8000eb8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f003 0320 	and.w	r3, r3, #32
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d107      	bne.n	8000e40 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f022 0204 	bic.w	r2, r2, #4
 8000e3e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a66      	ldr	r2, [pc, #408]	; (8000fe0 <HAL_DMA_IRQHandler+0x1f0>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d029      	beq.n	8000e9e <HAL_DMA_IRQHandler+0xae>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a65      	ldr	r2, [pc, #404]	; (8000fe4 <HAL_DMA_IRQHandler+0x1f4>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d022      	beq.n	8000e9a <HAL_DMA_IRQHandler+0xaa>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a63      	ldr	r2, [pc, #396]	; (8000fe8 <HAL_DMA_IRQHandler+0x1f8>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d01a      	beq.n	8000e94 <HAL_DMA_IRQHandler+0xa4>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a62      	ldr	r2, [pc, #392]	; (8000fec <HAL_DMA_IRQHandler+0x1fc>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d012      	beq.n	8000e8e <HAL_DMA_IRQHandler+0x9e>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a60      	ldr	r2, [pc, #384]	; (8000ff0 <HAL_DMA_IRQHandler+0x200>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d00a      	beq.n	8000e88 <HAL_DMA_IRQHandler+0x98>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a5f      	ldr	r2, [pc, #380]	; (8000ff4 <HAL_DMA_IRQHandler+0x204>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d102      	bne.n	8000e82 <HAL_DMA_IRQHandler+0x92>
 8000e7c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e80:	e00e      	b.n	8000ea0 <HAL_DMA_IRQHandler+0xb0>
 8000e82:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000e86:	e00b      	b.n	8000ea0 <HAL_DMA_IRQHandler+0xb0>
 8000e88:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000e8c:	e008      	b.n	8000ea0 <HAL_DMA_IRQHandler+0xb0>
 8000e8e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e92:	e005      	b.n	8000ea0 <HAL_DMA_IRQHandler+0xb0>
 8000e94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e98:	e002      	b.n	8000ea0 <HAL_DMA_IRQHandler+0xb0>
 8000e9a:	2340      	movs	r3, #64	; 0x40
 8000e9c:	e000      	b.n	8000ea0 <HAL_DMA_IRQHandler+0xb0>
 8000e9e:	2304      	movs	r3, #4
 8000ea0:	4a55      	ldr	r2, [pc, #340]	; (8000ff8 <HAL_DMA_IRQHandler+0x208>)
 8000ea2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	f000 8094 	beq.w	8000fd6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000eb6:	e08e      	b.n	8000fd6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebc:	2202      	movs	r2, #2
 8000ebe:	409a      	lsls	r2, r3
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d056      	beq.n	8000f76 <HAL_DMA_IRQHandler+0x186>
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	f003 0302 	and.w	r3, r3, #2
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d051      	beq.n	8000f76 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f003 0320 	and.w	r3, r3, #32
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d10b      	bne.n	8000ef8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f022 020a 	bic.w	r2, r2, #10
 8000eee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a38      	ldr	r2, [pc, #224]	; (8000fe0 <HAL_DMA_IRQHandler+0x1f0>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d029      	beq.n	8000f56 <HAL_DMA_IRQHandler+0x166>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a37      	ldr	r2, [pc, #220]	; (8000fe4 <HAL_DMA_IRQHandler+0x1f4>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d022      	beq.n	8000f52 <HAL_DMA_IRQHandler+0x162>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a35      	ldr	r2, [pc, #212]	; (8000fe8 <HAL_DMA_IRQHandler+0x1f8>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d01a      	beq.n	8000f4c <HAL_DMA_IRQHandler+0x15c>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a34      	ldr	r2, [pc, #208]	; (8000fec <HAL_DMA_IRQHandler+0x1fc>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d012      	beq.n	8000f46 <HAL_DMA_IRQHandler+0x156>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a32      	ldr	r2, [pc, #200]	; (8000ff0 <HAL_DMA_IRQHandler+0x200>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d00a      	beq.n	8000f40 <HAL_DMA_IRQHandler+0x150>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a31      	ldr	r2, [pc, #196]	; (8000ff4 <HAL_DMA_IRQHandler+0x204>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d102      	bne.n	8000f3a <HAL_DMA_IRQHandler+0x14a>
 8000f34:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f38:	e00e      	b.n	8000f58 <HAL_DMA_IRQHandler+0x168>
 8000f3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f3e:	e00b      	b.n	8000f58 <HAL_DMA_IRQHandler+0x168>
 8000f40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f44:	e008      	b.n	8000f58 <HAL_DMA_IRQHandler+0x168>
 8000f46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f4a:	e005      	b.n	8000f58 <HAL_DMA_IRQHandler+0x168>
 8000f4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f50:	e002      	b.n	8000f58 <HAL_DMA_IRQHandler+0x168>
 8000f52:	2320      	movs	r3, #32
 8000f54:	e000      	b.n	8000f58 <HAL_DMA_IRQHandler+0x168>
 8000f56:	2302      	movs	r3, #2
 8000f58:	4a27      	ldr	r2, [pc, #156]	; (8000ff8 <HAL_DMA_IRQHandler+0x208>)
 8000f5a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d034      	beq.n	8000fd6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000f74:	e02f      	b.n	8000fd6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	2208      	movs	r2, #8
 8000f7c:	409a      	lsls	r2, r3
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	4013      	ands	r3, r2
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d028      	beq.n	8000fd8 <HAL_DMA_IRQHandler+0x1e8>
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	f003 0308 	and.w	r3, r3, #8
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d023      	beq.n	8000fd8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f022 020e 	bic.w	r2, r2, #14
 8000f9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fa8:	2101      	movs	r1, #1
 8000faa:	fa01 f202 	lsl.w	r2, r1, r2
 8000fae:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2201      	movs	r2, #1
 8000fba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d004      	beq.n	8000fd8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	4798      	blx	r3
    }
  }
  return;
 8000fd6:	bf00      	nop
 8000fd8:	bf00      	nop
}
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40020008 	.word	0x40020008
 8000fe4:	4002001c 	.word	0x4002001c
 8000fe8:	40020030 	.word	0x40020030
 8000fec:	40020044 	.word	0x40020044
 8000ff0:	40020058 	.word	0x40020058
 8000ff4:	4002006c 	.word	0x4002006c
 8000ff8:	40020000 	.word	0x40020000

08000ffc <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8001008:	4618      	mov	r0, r3
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	bc80      	pop	{r7}
 8001010:	4770      	bx	lr

08001012 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001012:	b480      	push	{r7}
 8001014:	b085      	sub	sp, #20
 8001016:	af00      	add	r7, sp, #0
 8001018:	60f8      	str	r0, [r7, #12]
 800101a:	60b9      	str	r1, [r7, #8]
 800101c:	607a      	str	r2, [r7, #4]
 800101e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001028:	2101      	movs	r1, #1
 800102a:	fa01 f202 	lsl.w	r2, r1, r2
 800102e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	683a      	ldr	r2, [r7, #0]
 8001036:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	2b10      	cmp	r3, #16
 800103e:	d108      	bne.n	8001052 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	68ba      	ldr	r2, [r7, #8]
 800104e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001050:	e007      	b.n	8001062 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	68ba      	ldr	r2, [r7, #8]
 8001058:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	60da      	str	r2, [r3, #12]
}
 8001062:	bf00      	nop
 8001064:	3714      	adds	r7, #20
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr

0800106c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800106c:	b480      	push	{r7}
 800106e:	b08b      	sub	sp, #44	; 0x2c
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001076:	2300      	movs	r3, #0
 8001078:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800107a:	2300      	movs	r3, #0
 800107c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800107e:	e127      	b.n	80012d0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001080:	2201      	movs	r2, #1
 8001082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	69fa      	ldr	r2, [r7, #28]
 8001090:	4013      	ands	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	429a      	cmp	r2, r3
 800109a:	f040 8116 	bne.w	80012ca <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	2b12      	cmp	r3, #18
 80010a4:	d034      	beq.n	8001110 <HAL_GPIO_Init+0xa4>
 80010a6:	2b12      	cmp	r3, #18
 80010a8:	d80d      	bhi.n	80010c6 <HAL_GPIO_Init+0x5a>
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d02b      	beq.n	8001106 <HAL_GPIO_Init+0x9a>
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d804      	bhi.n	80010bc <HAL_GPIO_Init+0x50>
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d031      	beq.n	800111a <HAL_GPIO_Init+0xae>
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d01c      	beq.n	80010f4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010ba:	e048      	b.n	800114e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80010bc:	2b03      	cmp	r3, #3
 80010be:	d043      	beq.n	8001148 <HAL_GPIO_Init+0xdc>
 80010c0:	2b11      	cmp	r3, #17
 80010c2:	d01b      	beq.n	80010fc <HAL_GPIO_Init+0x90>
          break;
 80010c4:	e043      	b.n	800114e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80010c6:	4a89      	ldr	r2, [pc, #548]	; (80012ec <HAL_GPIO_Init+0x280>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d026      	beq.n	800111a <HAL_GPIO_Init+0xae>
 80010cc:	4a87      	ldr	r2, [pc, #540]	; (80012ec <HAL_GPIO_Init+0x280>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d806      	bhi.n	80010e0 <HAL_GPIO_Init+0x74>
 80010d2:	4a87      	ldr	r2, [pc, #540]	; (80012f0 <HAL_GPIO_Init+0x284>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d020      	beq.n	800111a <HAL_GPIO_Init+0xae>
 80010d8:	4a86      	ldr	r2, [pc, #536]	; (80012f4 <HAL_GPIO_Init+0x288>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d01d      	beq.n	800111a <HAL_GPIO_Init+0xae>
          break;
 80010de:	e036      	b.n	800114e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80010e0:	4a85      	ldr	r2, [pc, #532]	; (80012f8 <HAL_GPIO_Init+0x28c>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d019      	beq.n	800111a <HAL_GPIO_Init+0xae>
 80010e6:	4a85      	ldr	r2, [pc, #532]	; (80012fc <HAL_GPIO_Init+0x290>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d016      	beq.n	800111a <HAL_GPIO_Init+0xae>
 80010ec:	4a84      	ldr	r2, [pc, #528]	; (8001300 <HAL_GPIO_Init+0x294>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d013      	beq.n	800111a <HAL_GPIO_Init+0xae>
          break;
 80010f2:	e02c      	b.n	800114e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	623b      	str	r3, [r7, #32]
          break;
 80010fa:	e028      	b.n	800114e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	3304      	adds	r3, #4
 8001102:	623b      	str	r3, [r7, #32]
          break;
 8001104:	e023      	b.n	800114e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	68db      	ldr	r3, [r3, #12]
 800110a:	3308      	adds	r3, #8
 800110c:	623b      	str	r3, [r7, #32]
          break;
 800110e:	e01e      	b.n	800114e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	330c      	adds	r3, #12
 8001116:	623b      	str	r3, [r7, #32]
          break;
 8001118:	e019      	b.n	800114e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d102      	bne.n	8001128 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001122:	2304      	movs	r3, #4
 8001124:	623b      	str	r3, [r7, #32]
          break;
 8001126:	e012      	b.n	800114e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d105      	bne.n	800113c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001130:	2308      	movs	r3, #8
 8001132:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	69fa      	ldr	r2, [r7, #28]
 8001138:	611a      	str	r2, [r3, #16]
          break;
 800113a:	e008      	b.n	800114e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800113c:	2308      	movs	r3, #8
 800113e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	69fa      	ldr	r2, [r7, #28]
 8001144:	615a      	str	r2, [r3, #20]
          break;
 8001146:	e002      	b.n	800114e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001148:	2300      	movs	r3, #0
 800114a:	623b      	str	r3, [r7, #32]
          break;
 800114c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	2bff      	cmp	r3, #255	; 0xff
 8001152:	d801      	bhi.n	8001158 <HAL_GPIO_Init+0xec>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	e001      	b.n	800115c <HAL_GPIO_Init+0xf0>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3304      	adds	r3, #4
 800115c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	2bff      	cmp	r3, #255	; 0xff
 8001162:	d802      	bhi.n	800116a <HAL_GPIO_Init+0xfe>
 8001164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	e002      	b.n	8001170 <HAL_GPIO_Init+0x104>
 800116a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116c:	3b08      	subs	r3, #8
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	210f      	movs	r1, #15
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	fa01 f303 	lsl.w	r3, r1, r3
 800117e:	43db      	mvns	r3, r3
 8001180:	401a      	ands	r2, r3
 8001182:	6a39      	ldr	r1, [r7, #32]
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	fa01 f303 	lsl.w	r3, r1, r3
 800118a:	431a      	orrs	r2, r3
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001198:	2b00      	cmp	r3, #0
 800119a:	f000 8096 	beq.w	80012ca <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800119e:	4b59      	ldr	r3, [pc, #356]	; (8001304 <HAL_GPIO_Init+0x298>)
 80011a0:	699b      	ldr	r3, [r3, #24]
 80011a2:	4a58      	ldr	r2, [pc, #352]	; (8001304 <HAL_GPIO_Init+0x298>)
 80011a4:	f043 0301 	orr.w	r3, r3, #1
 80011a8:	6193      	str	r3, [r2, #24]
 80011aa:	4b56      	ldr	r3, [pc, #344]	; (8001304 <HAL_GPIO_Init+0x298>)
 80011ac:	699b      	ldr	r3, [r3, #24]
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	60bb      	str	r3, [r7, #8]
 80011b4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011b6:	4a54      	ldr	r2, [pc, #336]	; (8001308 <HAL_GPIO_Init+0x29c>)
 80011b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ba:	089b      	lsrs	r3, r3, #2
 80011bc:	3302      	adds	r3, #2
 80011be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c6:	f003 0303 	and.w	r3, r3, #3
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	220f      	movs	r2, #15
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43db      	mvns	r3, r3
 80011d4:	68fa      	ldr	r2, [r7, #12]
 80011d6:	4013      	ands	r3, r2
 80011d8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a4b      	ldr	r2, [pc, #300]	; (800130c <HAL_GPIO_Init+0x2a0>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d013      	beq.n	800120a <HAL_GPIO_Init+0x19e>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a4a      	ldr	r2, [pc, #296]	; (8001310 <HAL_GPIO_Init+0x2a4>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d00d      	beq.n	8001206 <HAL_GPIO_Init+0x19a>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a49      	ldr	r2, [pc, #292]	; (8001314 <HAL_GPIO_Init+0x2a8>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d007      	beq.n	8001202 <HAL_GPIO_Init+0x196>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a48      	ldr	r2, [pc, #288]	; (8001318 <HAL_GPIO_Init+0x2ac>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d101      	bne.n	80011fe <HAL_GPIO_Init+0x192>
 80011fa:	2303      	movs	r3, #3
 80011fc:	e006      	b.n	800120c <HAL_GPIO_Init+0x1a0>
 80011fe:	2304      	movs	r3, #4
 8001200:	e004      	b.n	800120c <HAL_GPIO_Init+0x1a0>
 8001202:	2302      	movs	r3, #2
 8001204:	e002      	b.n	800120c <HAL_GPIO_Init+0x1a0>
 8001206:	2301      	movs	r3, #1
 8001208:	e000      	b.n	800120c <HAL_GPIO_Init+0x1a0>
 800120a:	2300      	movs	r3, #0
 800120c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800120e:	f002 0203 	and.w	r2, r2, #3
 8001212:	0092      	lsls	r2, r2, #2
 8001214:	4093      	lsls	r3, r2
 8001216:	68fa      	ldr	r2, [r7, #12]
 8001218:	4313      	orrs	r3, r2
 800121a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800121c:	493a      	ldr	r1, [pc, #232]	; (8001308 <HAL_GPIO_Init+0x29c>)
 800121e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001220:	089b      	lsrs	r3, r3, #2
 8001222:	3302      	adds	r3, #2
 8001224:	68fa      	ldr	r2, [r7, #12]
 8001226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d006      	beq.n	8001244 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001236:	4b39      	ldr	r3, [pc, #228]	; (800131c <HAL_GPIO_Init+0x2b0>)
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	4938      	ldr	r1, [pc, #224]	; (800131c <HAL_GPIO_Init+0x2b0>)
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	4313      	orrs	r3, r2
 8001240:	600b      	str	r3, [r1, #0]
 8001242:	e006      	b.n	8001252 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001244:	4b35      	ldr	r3, [pc, #212]	; (800131c <HAL_GPIO_Init+0x2b0>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	43db      	mvns	r3, r3
 800124c:	4933      	ldr	r1, [pc, #204]	; (800131c <HAL_GPIO_Init+0x2b0>)
 800124e:	4013      	ands	r3, r2
 8001250:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d006      	beq.n	800126c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800125e:	4b2f      	ldr	r3, [pc, #188]	; (800131c <HAL_GPIO_Init+0x2b0>)
 8001260:	685a      	ldr	r2, [r3, #4]
 8001262:	492e      	ldr	r1, [pc, #184]	; (800131c <HAL_GPIO_Init+0x2b0>)
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	4313      	orrs	r3, r2
 8001268:	604b      	str	r3, [r1, #4]
 800126a:	e006      	b.n	800127a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800126c:	4b2b      	ldr	r3, [pc, #172]	; (800131c <HAL_GPIO_Init+0x2b0>)
 800126e:	685a      	ldr	r2, [r3, #4]
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	43db      	mvns	r3, r3
 8001274:	4929      	ldr	r1, [pc, #164]	; (800131c <HAL_GPIO_Init+0x2b0>)
 8001276:	4013      	ands	r3, r2
 8001278:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d006      	beq.n	8001294 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001286:	4b25      	ldr	r3, [pc, #148]	; (800131c <HAL_GPIO_Init+0x2b0>)
 8001288:	689a      	ldr	r2, [r3, #8]
 800128a:	4924      	ldr	r1, [pc, #144]	; (800131c <HAL_GPIO_Init+0x2b0>)
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	4313      	orrs	r3, r2
 8001290:	608b      	str	r3, [r1, #8]
 8001292:	e006      	b.n	80012a2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001294:	4b21      	ldr	r3, [pc, #132]	; (800131c <HAL_GPIO_Init+0x2b0>)
 8001296:	689a      	ldr	r2, [r3, #8]
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	43db      	mvns	r3, r3
 800129c:	491f      	ldr	r1, [pc, #124]	; (800131c <HAL_GPIO_Init+0x2b0>)
 800129e:	4013      	ands	r3, r2
 80012a0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d006      	beq.n	80012bc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012ae:	4b1b      	ldr	r3, [pc, #108]	; (800131c <HAL_GPIO_Init+0x2b0>)
 80012b0:	68da      	ldr	r2, [r3, #12]
 80012b2:	491a      	ldr	r1, [pc, #104]	; (800131c <HAL_GPIO_Init+0x2b0>)
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	60cb      	str	r3, [r1, #12]
 80012ba:	e006      	b.n	80012ca <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012bc:	4b17      	ldr	r3, [pc, #92]	; (800131c <HAL_GPIO_Init+0x2b0>)
 80012be:	68da      	ldr	r2, [r3, #12]
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	43db      	mvns	r3, r3
 80012c4:	4915      	ldr	r1, [pc, #84]	; (800131c <HAL_GPIO_Init+0x2b0>)
 80012c6:	4013      	ands	r3, r2
 80012c8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80012ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012cc:	3301      	adds	r3, #1
 80012ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d6:	fa22 f303 	lsr.w	r3, r2, r3
 80012da:	2b00      	cmp	r3, #0
 80012dc:	f47f aed0 	bne.w	8001080 <HAL_GPIO_Init+0x14>
  }
}
 80012e0:	bf00      	nop
 80012e2:	372c      	adds	r7, #44	; 0x2c
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bc80      	pop	{r7}
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	10210000 	.word	0x10210000
 80012f0:	10110000 	.word	0x10110000
 80012f4:	10120000 	.word	0x10120000
 80012f8:	10310000 	.word	0x10310000
 80012fc:	10320000 	.word	0x10320000
 8001300:	10220000 	.word	0x10220000
 8001304:	40021000 	.word	0x40021000
 8001308:	40010000 	.word	0x40010000
 800130c:	40010800 	.word	0x40010800
 8001310:	40010c00 	.word	0x40010c00
 8001314:	40011000 	.word	0x40011000
 8001318:	40011400 	.word	0x40011400
 800131c:	40010400 	.word	0x40010400

08001320 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001320:	b480      	push	{r7}
 8001322:	b089      	sub	sp, #36	; 0x24
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800132a:	2300      	movs	r3, #0
 800132c:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800132e:	e09a      	b.n	8001466 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001330:	2201      	movs	r2, #1
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	683a      	ldr	r2, [r7, #0]
 800133a:	4013      	ands	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	2b00      	cmp	r3, #0
 8001342:	f000 808d 	beq.w	8001460 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8001346:	4a4e      	ldr	r2, [pc, #312]	; (8001480 <HAL_GPIO_DeInit+0x160>)
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	089b      	lsrs	r3, r3, #2
 800134c:	3302      	adds	r3, #2
 800134e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001352:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	f003 0303 	and.w	r3, r3, #3
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	220f      	movs	r2, #15
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	697a      	ldr	r2, [r7, #20]
 8001364:	4013      	ands	r3, r2
 8001366:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4a46      	ldr	r2, [pc, #280]	; (8001484 <HAL_GPIO_DeInit+0x164>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d013      	beq.n	8001398 <HAL_GPIO_DeInit+0x78>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4a45      	ldr	r2, [pc, #276]	; (8001488 <HAL_GPIO_DeInit+0x168>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d00d      	beq.n	8001394 <HAL_GPIO_DeInit+0x74>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	4a44      	ldr	r2, [pc, #272]	; (800148c <HAL_GPIO_DeInit+0x16c>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d007      	beq.n	8001390 <HAL_GPIO_DeInit+0x70>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4a43      	ldr	r2, [pc, #268]	; (8001490 <HAL_GPIO_DeInit+0x170>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d101      	bne.n	800138c <HAL_GPIO_DeInit+0x6c>
 8001388:	2303      	movs	r3, #3
 800138a:	e006      	b.n	800139a <HAL_GPIO_DeInit+0x7a>
 800138c:	2304      	movs	r3, #4
 800138e:	e004      	b.n	800139a <HAL_GPIO_DeInit+0x7a>
 8001390:	2302      	movs	r3, #2
 8001392:	e002      	b.n	800139a <HAL_GPIO_DeInit+0x7a>
 8001394:	2301      	movs	r3, #1
 8001396:	e000      	b.n	800139a <HAL_GPIO_DeInit+0x7a>
 8001398:	2300      	movs	r3, #0
 800139a:	69fa      	ldr	r2, [r7, #28]
 800139c:	f002 0203 	and.w	r2, r2, #3
 80013a0:	0092      	lsls	r2, r2, #2
 80013a2:	4093      	lsls	r3, r2
 80013a4:	697a      	ldr	r2, [r7, #20]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d132      	bne.n	8001410 <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	f003 0303 	and.w	r3, r3, #3
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	220f      	movs	r2, #15
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80013ba:	4a31      	ldr	r2, [pc, #196]	; (8001480 <HAL_GPIO_DeInit+0x160>)
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	089b      	lsrs	r3, r3, #2
 80013c0:	3302      	adds	r3, #2
 80013c2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	43da      	mvns	r2, r3
 80013ca:	482d      	ldr	r0, [pc, #180]	; (8001480 <HAL_GPIO_DeInit+0x160>)
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	089b      	lsrs	r3, r3, #2
 80013d0:	400a      	ands	r2, r1
 80013d2:	3302      	adds	r3, #2
 80013d4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80013d8:	4b2e      	ldr	r3, [pc, #184]	; (8001494 <HAL_GPIO_DeInit+0x174>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	43db      	mvns	r3, r3
 80013e0:	492c      	ldr	r1, [pc, #176]	; (8001494 <HAL_GPIO_DeInit+0x174>)
 80013e2:	4013      	ands	r3, r2
 80013e4:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80013e6:	4b2b      	ldr	r3, [pc, #172]	; (8001494 <HAL_GPIO_DeInit+0x174>)
 80013e8:	685a      	ldr	r2, [r3, #4]
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	43db      	mvns	r3, r3
 80013ee:	4929      	ldr	r1, [pc, #164]	; (8001494 <HAL_GPIO_DeInit+0x174>)
 80013f0:	4013      	ands	r3, r2
 80013f2:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80013f4:	4b27      	ldr	r3, [pc, #156]	; (8001494 <HAL_GPIO_DeInit+0x174>)
 80013f6:	689a      	ldr	r2, [r3, #8]
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	43db      	mvns	r3, r3
 80013fc:	4925      	ldr	r1, [pc, #148]	; (8001494 <HAL_GPIO_DeInit+0x174>)
 80013fe:	4013      	ands	r3, r2
 8001400:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8001402:	4b24      	ldr	r3, [pc, #144]	; (8001494 <HAL_GPIO_DeInit+0x174>)
 8001404:	68da      	ldr	r2, [r3, #12]
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	43db      	mvns	r3, r3
 800140a:	4922      	ldr	r1, [pc, #136]	; (8001494 <HAL_GPIO_DeInit+0x174>)
 800140c:	4013      	ands	r3, r2
 800140e:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	2bff      	cmp	r3, #255	; 0xff
 8001414:	d801      	bhi.n	800141a <HAL_GPIO_DeInit+0xfa>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	e001      	b.n	800141e <HAL_GPIO_DeInit+0xfe>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	3304      	adds	r3, #4
 800141e:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	2bff      	cmp	r3, #255	; 0xff
 8001424:	d802      	bhi.n	800142c <HAL_GPIO_DeInit+0x10c>
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	e002      	b.n	8001432 <HAL_GPIO_DeInit+0x112>
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	3b08      	subs	r3, #8
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	210f      	movs	r1, #15
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	fa01 f303 	lsl.w	r3, r1, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	401a      	ands	r2, r3
 8001444:	2104      	movs	r1, #4
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	fa01 f303 	lsl.w	r3, r1, r3
 800144c:	431a      	orrs	r2, r3
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	68da      	ldr	r2, [r3, #12]
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	43db      	mvns	r3, r3
 800145a:	401a      	ands	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	3301      	adds	r3, #1
 8001464:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8001466:	683a      	ldr	r2, [r7, #0]
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	fa22 f303 	lsr.w	r3, r2, r3
 800146e:	2b00      	cmp	r3, #0
 8001470:	f47f af5e 	bne.w	8001330 <HAL_GPIO_DeInit+0x10>
  }
}
 8001474:	bf00      	nop
 8001476:	3724      	adds	r7, #36	; 0x24
 8001478:	46bd      	mov	sp, r7
 800147a:	bc80      	pop	{r7}
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	40010000 	.word	0x40010000
 8001484:	40010800 	.word	0x40010800
 8001488:	40010c00 	.word	0x40010c00
 800148c:	40011000 	.word	0x40011000
 8001490:	40011400 	.word	0x40011400
 8001494:	40010400 	.word	0x40010400

08001498 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	460b      	mov	r3, r1
 80014a2:	807b      	strh	r3, [r7, #2]
 80014a4:	4613      	mov	r3, r2
 80014a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014a8:	787b      	ldrb	r3, [r7, #1]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014ae:	887a      	ldrh	r2, [r7, #2]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014b4:	e003      	b.n	80014be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014b6:	887b      	ldrh	r3, [r7, #2]
 80014b8:	041a      	lsls	r2, r3, #16
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	611a      	str	r2, [r3, #16]
}
 80014be:	bf00      	nop
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr

080014c8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80014c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ca:	b08b      	sub	sp, #44	; 0x2c
 80014cc:	af06      	add	r7, sp, #24
 80014ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d101      	bne.n	80014da <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e0d3      	b.n	8001682 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d106      	bne.n	80014f4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f005 f998 	bl	8006824 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2203      	movs	r2, #3
 80014f8:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4618      	mov	r0, r3
 8001502:	f002 f94e 	bl	80037a2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	603b      	str	r3, [r7, #0]
 800150c:	687e      	ldr	r6, [r7, #4]
 800150e:	466d      	mov	r5, sp
 8001510:	f106 0410 	add.w	r4, r6, #16
 8001514:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001516:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001518:	6823      	ldr	r3, [r4, #0]
 800151a:	602b      	str	r3, [r5, #0]
 800151c:	1d33      	adds	r3, r6, #4
 800151e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001520:	6838      	ldr	r0, [r7, #0]
 8001522:	f002 f917 	bl	8003754 <USB_CoreInit>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d005      	beq.n	8001538 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2202      	movs	r2, #2
 8001530:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e0a4      	b.n	8001682 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2100      	movs	r1, #0
 800153e:	4618      	mov	r0, r3
 8001540:	f002 f94b 	bl	80037da <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001544:	2300      	movs	r3, #0
 8001546:	73fb      	strb	r3, [r7, #15]
 8001548:	e035      	b.n	80015b6 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800154a:	7bfb      	ldrb	r3, [r7, #15]
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	015b      	lsls	r3, r3, #5
 8001550:	4413      	add	r3, r2
 8001552:	3329      	adds	r3, #41	; 0x29
 8001554:	2201      	movs	r2, #1
 8001556:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001558:	7bfb      	ldrb	r3, [r7, #15]
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	015b      	lsls	r3, r3, #5
 800155e:	4413      	add	r3, r2
 8001560:	3328      	adds	r3, #40	; 0x28
 8001562:	7bfa      	ldrb	r2, [r7, #15]
 8001564:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001566:	7bfb      	ldrb	r3, [r7, #15]
 8001568:	7bfa      	ldrb	r2, [r7, #15]
 800156a:	b291      	uxth	r1, r2
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	015b      	lsls	r3, r3, #5
 8001570:	4413      	add	r3, r2
 8001572:	3336      	adds	r3, #54	; 0x36
 8001574:	460a      	mov	r2, r1
 8001576:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001578:	7bfb      	ldrb	r3, [r7, #15]
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	015b      	lsls	r3, r3, #5
 800157e:	4413      	add	r3, r2
 8001580:	332b      	adds	r3, #43	; 0x2b
 8001582:	2200      	movs	r2, #0
 8001584:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001586:	7bfb      	ldrb	r3, [r7, #15]
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	015b      	lsls	r3, r3, #5
 800158c:	4413      	add	r3, r2
 800158e:	3338      	adds	r3, #56	; 0x38
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001594:	7bfb      	ldrb	r3, [r7, #15]
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	015b      	lsls	r3, r3, #5
 800159a:	4413      	add	r3, r2
 800159c:	333c      	adds	r3, #60	; 0x3c
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	3302      	adds	r3, #2
 80015a8:	015b      	lsls	r3, r3, #5
 80015aa:	4413      	add	r3, r2
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015b0:	7bfb      	ldrb	r3, [r7, #15]
 80015b2:	3301      	adds	r3, #1
 80015b4:	73fb      	strb	r3, [r7, #15]
 80015b6:	7bfa      	ldrb	r2, [r7, #15]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d3c4      	bcc.n	800154a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015c0:	2300      	movs	r3, #0
 80015c2:	73fb      	strb	r3, [r7, #15]
 80015c4:	e031      	b.n	800162a <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80015c6:	7bfb      	ldrb	r3, [r7, #15]
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	015b      	lsls	r3, r3, #5
 80015cc:	4413      	add	r3, r2
 80015ce:	f203 1329 	addw	r3, r3, #297	; 0x129
 80015d2:	2200      	movs	r2, #0
 80015d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80015d6:	7bfb      	ldrb	r3, [r7, #15]
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	015b      	lsls	r3, r3, #5
 80015dc:	4413      	add	r3, r2
 80015de:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80015e2:	7bfa      	ldrb	r2, [r7, #15]
 80015e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80015e6:	7bfb      	ldrb	r3, [r7, #15]
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	015b      	lsls	r3, r3, #5
 80015ec:	4413      	add	r3, r2
 80015ee:	f203 132b 	addw	r3, r3, #299	; 0x12b
 80015f2:	2200      	movs	r2, #0
 80015f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80015f6:	7bfb      	ldrb	r3, [r7, #15]
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	015b      	lsls	r3, r3, #5
 80015fc:	4413      	add	r3, r2
 80015fe:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001606:	7bfb      	ldrb	r3, [r7, #15]
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	015b      	lsls	r3, r3, #5
 800160c:	4413      	add	r3, r2
 800160e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001616:	7bfb      	ldrb	r3, [r7, #15]
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	330a      	adds	r3, #10
 800161c:	015b      	lsls	r3, r3, #5
 800161e:	4413      	add	r3, r2
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001624:	7bfb      	ldrb	r3, [r7, #15]
 8001626:	3301      	adds	r3, #1
 8001628:	73fb      	strb	r3, [r7, #15]
 800162a:	7bfa      	ldrb	r2, [r7, #15]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	429a      	cmp	r2, r3
 8001632:	d3c8      	bcc.n	80015c6 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	603b      	str	r3, [r7, #0]
 800163a:	687e      	ldr	r6, [r7, #4]
 800163c:	466d      	mov	r5, sp
 800163e:	f106 0410 	add.w	r4, r6, #16
 8001642:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001644:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001646:	6823      	ldr	r3, [r4, #0]
 8001648:	602b      	str	r3, [r5, #0]
 800164a:	1d33      	adds	r3, r6, #4
 800164c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800164e:	6838      	ldr	r0, [r7, #0]
 8001650:	f002 f8cf 	bl	80037f2 <USB_DevInit>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d005      	beq.n	8001666 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2202      	movs	r2, #2
 800165e:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e00d      	b.n	8001682 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2201      	movs	r2, #1
 8001672:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4618      	mov	r0, r3
 800167c:	f003 f90d 	bl	800489a <USB_DevDisconnect>

  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3714      	adds	r7, #20
 8001686:	46bd      	mov	sp, r7
 8001688:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800168a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b082      	sub	sp, #8
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001698:	2b01      	cmp	r3, #1
 800169a:	d101      	bne.n	80016a0 <HAL_PCD_Start+0x16>
 800169c:	2302      	movs	r3, #2
 800169e:	e016      	b.n	80016ce <HAL_PCD_Start+0x44>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2201      	movs	r2, #1
 80016a4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80016a8:	2101      	movs	r1, #1
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f005 fb21 	bl	8006cf2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f003 f8e6 	bl	8004886 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4618      	mov	r0, r3
 80016c0:	f002 f858 	bl	8003774 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b082      	sub	sp, #8
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f003 f8e3 	bl	80048ae <USB_ReadInterrupts>
 80016e8:	4603      	mov	r3, r0
 80016ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016f2:	d102      	bne.n	80016fa <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f000 faf3 	bl	8001ce0 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f003 f8d5 	bl	80048ae <USB_ReadInterrupts>
 8001704:	4603      	mov	r3, r0
 8001706:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800170a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800170e:	d112      	bne.n	8001736 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001718:	b29a      	uxth	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001722:	b292      	uxth	r2, r2
 8001724:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f005 f8f0 	bl	800690e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800172e:	2100      	movs	r1, #0
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f000 f8de 	bl	80018f2 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	f003 f8b7 	bl	80048ae <USB_ReadInterrupts>
 8001740:	4603      	mov	r3, r0
 8001742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001746:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800174a:	d10b      	bne.n	8001764 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001754:	b29a      	uxth	r2, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800175e:	b292      	uxth	r2, r2
 8001760:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4618      	mov	r0, r3
 800176a:	f003 f8a0 	bl	80048ae <USB_ReadInterrupts>
 800176e:	4603      	mov	r3, r0
 8001770:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001774:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001778:	d10b      	bne.n	8001792 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001782:	b29a      	uxth	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800178c:	b292      	uxth	r2, r2
 800178e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f003 f889 	bl	80048ae <USB_ReadInterrupts>
 800179c:	4603      	mov	r3, r0
 800179e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017a6:	d126      	bne.n	80017f6 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f022 0204 	bic.w	r2, r2, #4
 80017ba:	b292      	uxth	r2, r2
 80017bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017c8:	b29a      	uxth	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f022 0208 	bic.w	r2, r2, #8
 80017d2:	b292      	uxth	r2, r2
 80017d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f005 f8d1 	bl	8006980 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017e6:	b29a      	uxth	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80017f0:	b292      	uxth	r2, r2
 80017f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f003 f857 	bl	80048ae <USB_ReadInterrupts>
 8001800:	4603      	mov	r3, r0
 8001802:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001806:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800180a:	d13d      	bne.n	8001888 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001814:	b29a      	uxth	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f042 0208 	orr.w	r2, r2, #8
 800181e:	b292      	uxth	r2, r2
 8001820:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800182c:	b29a      	uxth	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001836:	b292      	uxth	r2, r2
 8001838:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001844:	b29a      	uxth	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f042 0204 	orr.w	r2, r2, #4
 800184e:	b292      	uxth	r2, r2
 8001850:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4618      	mov	r0, r3
 800185a:	f003 f828 	bl	80048ae <USB_ReadInterrupts>
 800185e:	4603      	mov	r3, r0
 8001860:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001864:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001868:	d10b      	bne.n	8001882 <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001872:	b29a      	uxth	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800187c:	b292      	uxth	r2, r2
 800187e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f005 f862 	bl	800694c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f003 f80e 	bl	80048ae <USB_ReadInterrupts>
 8001892:	4603      	mov	r3, r0
 8001894:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001898:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800189c:	d10e      	bne.n	80018bc <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80018b0:	b292      	uxth	r2, r2
 80018b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f005 f81b 	bl	80068f2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f002 fff4 	bl	80048ae <USB_ReadInterrupts>
 80018c6:	4603      	mov	r3, r0
 80018c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018d0:	d10b      	bne.n	80018ea <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018da:	b29a      	uxth	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018e4:	b292      	uxth	r2, r2
 80018e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80018ea:	bf00      	nop
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b082      	sub	sp, #8
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
 80018fa:	460b      	mov	r3, r1
 80018fc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001904:	2b01      	cmp	r3, #1
 8001906:	d101      	bne.n	800190c <HAL_PCD_SetAddress+0x1a>
 8001908:	2302      	movs	r3, #2
 800190a:	e013      	b.n	8001934 <HAL_PCD_SetAddress+0x42>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2201      	movs	r2, #1
 8001910:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	78fa      	ldrb	r2, [r7, #3]
 8001918:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	78fa      	ldrb	r2, [r7, #3]
 8001922:	4611      	mov	r1, r2
 8001924:	4618      	mov	r0, r3
 8001926:	f002 ff9b 	bl	8004860 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001932:	2300      	movs	r3, #0
}
 8001934:	4618      	mov	r0, r3
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	4608      	mov	r0, r1
 8001946:	4611      	mov	r1, r2
 8001948:	461a      	mov	r2, r3
 800194a:	4603      	mov	r3, r0
 800194c:	70fb      	strb	r3, [r7, #3]
 800194e:	460b      	mov	r3, r1
 8001950:	803b      	strh	r3, [r7, #0]
 8001952:	4613      	mov	r3, r2
 8001954:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001956:	2300      	movs	r3, #0
 8001958:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800195a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800195e:	2b00      	cmp	r3, #0
 8001960:	da0b      	bge.n	800197a <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001962:	78fb      	ldrb	r3, [r7, #3]
 8001964:	f003 0307 	and.w	r3, r3, #7
 8001968:	015b      	lsls	r3, r3, #5
 800196a:	3328      	adds	r3, #40	; 0x28
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	4413      	add	r3, r2
 8001970:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2201      	movs	r2, #1
 8001976:	705a      	strb	r2, [r3, #1]
 8001978:	e00b      	b.n	8001992 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800197a:	78fb      	ldrb	r3, [r7, #3]
 800197c:	f003 0307 	and.w	r3, r3, #7
 8001980:	015b      	lsls	r3, r3, #5
 8001982:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	4413      	add	r3, r2
 800198a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2200      	movs	r2, #0
 8001990:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001992:	78fb      	ldrb	r3, [r7, #3]
 8001994:	f003 0307 	and.w	r3, r3, #7
 8001998:	b2da      	uxtb	r2, r3
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800199e:	883a      	ldrh	r2, [r7, #0]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	78ba      	ldrb	r2, [r7, #2]
 80019a8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	785b      	ldrb	r3, [r3, #1]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d004      	beq.n	80019bc <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	b29a      	uxth	r2, r3
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80019bc:	78bb      	ldrb	r3, [r7, #2]
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d102      	bne.n	80019c8 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2200      	movs	r2, #0
 80019c6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d101      	bne.n	80019d6 <HAL_PCD_EP_Open+0x9a>
 80019d2:	2302      	movs	r3, #2
 80019d4:	e00e      	b.n	80019f4 <HAL_PCD_EP_Open+0xb8>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2201      	movs	r2, #1
 80019da:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	68f9      	ldr	r1, [r7, #12]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f001 ff29 	bl	800383c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 80019f2:	7afb      	ldrb	r3, [r7, #11]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3710      	adds	r7, #16
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	460b      	mov	r3, r1
 8001a06:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	da0b      	bge.n	8001a28 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a10:	78fb      	ldrb	r3, [r7, #3]
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	015b      	lsls	r3, r3, #5
 8001a18:	3328      	adds	r3, #40	; 0x28
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2201      	movs	r2, #1
 8001a24:	705a      	strb	r2, [r3, #1]
 8001a26:	e00b      	b.n	8001a40 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a28:	78fb      	ldrb	r3, [r7, #3]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	015b      	lsls	r3, r3, #5
 8001a30:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	4413      	add	r3, r2
 8001a38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001a40:	78fb      	ldrb	r3, [r7, #3]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d101      	bne.n	8001a5a <HAL_PCD_EP_Close+0x5e>
 8001a56:	2302      	movs	r3, #2
 8001a58:	e00e      	b.n	8001a78 <HAL_PCD_EP_Close+0x7c>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68f9      	ldr	r1, [r7, #12]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f002 f9d5 	bl	8003e18 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3710      	adds	r7, #16
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	607a      	str	r2, [r7, #4]
 8001a8a:	603b      	str	r3, [r7, #0]
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a90:	7afb      	ldrb	r3, [r7, #11]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	015b      	lsls	r3, r3, #5
 8001a98:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a9c:	68fa      	ldr	r2, [r7, #12]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001aba:	7afb      	ldrb	r3, [r7, #11]
 8001abc:	f003 0307 	and.w	r3, r3, #7
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ac6:	7afb      	ldrb	r3, [r7, #11]
 8001ac8:	f003 0307 	and.w	r3, r3, #7
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d106      	bne.n	8001ade <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	6979      	ldr	r1, [r7, #20]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f002 fb34 	bl	8004144 <USB_EPStartXfer>
 8001adc:	e005      	b.n	8001aea <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	6979      	ldr	r1, [r7, #20]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f002 fb2d 	bl	8004144 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3718      	adds	r7, #24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	460b      	mov	r3, r1
 8001afe:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001b00:	78fb      	ldrb	r3, [r7, #3]
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	330a      	adds	r3, #10
 8001b0a:	015b      	lsls	r3, r3, #5
 8001b0c:	4413      	add	r3, r2
 8001b0e:	3304      	adds	r3, #4
 8001b10:	681b      	ldr	r3, [r3, #0]
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr

08001b1c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	607a      	str	r2, [r7, #4]
 8001b26:	603b      	str	r3, [r7, #0]
 8001b28:	460b      	mov	r3, r1
 8001b2a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b2c:	7afb      	ldrb	r3, [r7, #11]
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	015b      	lsls	r3, r3, #5
 8001b34:	3328      	adds	r3, #40	; 0x28
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	4413      	add	r3, r2
 8001b3a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	2201      	movs	r2, #1
 8001b52:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b54:	7afb      	ldrb	r3, [r7, #11]
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	b2da      	uxtb	r2, r3
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b60:	7afb      	ldrb	r3, [r7, #11]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d106      	bne.n	8001b78 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	6979      	ldr	r1, [r7, #20]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f002 fae7 	bl	8004144 <USB_EPStartXfer>
 8001b76:	e005      	b.n	8001b84 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6979      	ldr	r1, [r7, #20]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f002 fae0 	bl	8004144 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3718      	adds	r7, #24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b084      	sub	sp, #16
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
 8001b96:	460b      	mov	r3, r1
 8001b98:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001b9a:	78fb      	ldrb	r3, [r7, #3]
 8001b9c:	f003 0207 	and.w	r2, r3, #7
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d901      	bls.n	8001bac <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e046      	b.n	8001c3a <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001bac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	da0b      	bge.n	8001bcc <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bb4:	78fb      	ldrb	r3, [r7, #3]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	015b      	lsls	r3, r3, #5
 8001bbc:	3328      	adds	r3, #40	; 0x28
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	705a      	strb	r2, [r3, #1]
 8001bca:	e009      	b.n	8001be0 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001bcc:	78fb      	ldrb	r3, [r7, #3]
 8001bce:	015b      	lsls	r3, r3, #5
 8001bd0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2201      	movs	r2, #1
 8001be4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001be6:	78fb      	ldrb	r3, [r7, #3]
 8001be8:	f003 0307 	and.w	r3, r3, #7
 8001bec:	b2da      	uxtb	r2, r3
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d101      	bne.n	8001c00 <HAL_PCD_EP_SetStall+0x72>
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	e01c      	b.n	8001c3a <HAL_PCD_EP_SetStall+0xac>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	68f9      	ldr	r1, [r7, #12]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f002 fd50 	bl	80046b4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c14:	78fb      	ldrb	r3, [r7, #3]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d108      	bne.n	8001c30 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4610      	mov	r0, r2
 8001c2c:	f002 fe4e 	bl	80048cc <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b084      	sub	sp, #16
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001c4e:	78fb      	ldrb	r3, [r7, #3]
 8001c50:	f003 020f 	and.w	r2, r3, #15
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d901      	bls.n	8001c60 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e03a      	b.n	8001cd6 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	da0b      	bge.n	8001c80 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c68:	78fb      	ldrb	r3, [r7, #3]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	015b      	lsls	r3, r3, #5
 8001c70:	3328      	adds	r3, #40	; 0x28
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	4413      	add	r3, r2
 8001c76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	705a      	strb	r2, [r3, #1]
 8001c7e:	e00b      	b.n	8001c98 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c80:	78fb      	ldrb	r3, [r7, #3]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	015b      	lsls	r3, r3, #5
 8001c88:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	4413      	add	r3, r2
 8001c90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2200      	movs	r2, #0
 8001c96:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c9e:	78fb      	ldrb	r3, [r7, #3]
 8001ca0:	f003 0307 	and.w	r3, r3, #7
 8001ca4:	b2da      	uxtb	r2, r3
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d101      	bne.n	8001cb8 <HAL_PCD_EP_ClrStall+0x76>
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	e00e      	b.n	8001cd6 <HAL_PCD_EP_ClrStall+0x94>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68f9      	ldr	r1, [r7, #12]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f002 fd36 	bl	8004738 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
	...

08001ce0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001ce0:	b590      	push	{r4, r7, lr}
 8001ce2:	b089      	sub	sp, #36	; 0x24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001ce8:	e282      	b.n	80021f0 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cf2:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001cf4:	8afb      	ldrh	r3, [r7, #22]
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	f003 030f 	and.w	r3, r3, #15
 8001cfc:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8001cfe:	7d7b      	ldrb	r3, [r7, #21]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	f040 8142 	bne.w	8001f8a <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001d06:	8afb      	ldrh	r3, [r7, #22]
 8001d08:	f003 0310 	and.w	r3, r3, #16
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d151      	bne.n	8001db4 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	881b      	ldrh	r3, [r3, #0]
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001d1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d20:	b29c      	uxth	r4, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8001d2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	3328      	adds	r3, #40	; 0x28
 8001d36:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	461a      	mov	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	4413      	add	r3, r2
 8001d4c:	3302      	adds	r3, #2
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	6812      	ldr	r2, [r2, #0]
 8001d54:	4413      	add	r3, r2
 8001d56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d5a:	881b      	ldrh	r3, [r3, #0]
 8001d5c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	695a      	ldr	r2, [r3, #20]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	69db      	ldr	r3, [r3, #28]
 8001d6c:	441a      	add	r2, r3
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001d72:	2100      	movs	r1, #0
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f004 fda5 	bl	80068c4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	f000 8234 	beq.w	80021f0 <PCD_EP_ISR_Handler+0x510>
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f040 822f 	bne.w	80021f0 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d9e:	b2da      	uxtb	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	b292      	uxth	r2, r2
 8001da6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001db2:	e21d      	b.n	80021f0 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001dba:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	881b      	ldrh	r3, [r3, #0]
 8001dc2:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001dc4:	8a7b      	ldrh	r3, [r7, #18]
 8001dc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d033      	beq.n	8001e36 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	461a      	mov	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	4413      	add	r3, r2
 8001de2:	3306      	adds	r3, #6
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	6812      	ldr	r2, [r2, #0]
 8001dea:	4413      	add	r3, r2
 8001dec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001df0:	881b      	ldrh	r3, [r3, #0]
 8001df2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6818      	ldr	r0, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	f002 fdac 	bl	800496a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	881b      	ldrh	r3, [r3, #0]
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001e1e:	4013      	ands	r3, r2
 8001e20:	b29c      	uxth	r4, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001e2a:	b292      	uxth	r2, r2
 8001e2c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f004 fd1e 	bl	8006870 <HAL_PCD_SetupStageCallback>
 8001e34:	e1dc      	b.n	80021f0 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001e36:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f280 81d8 	bge.w	80021f0 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	881b      	ldrh	r3, [r3, #0]
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	b29c      	uxth	r4, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001e58:	b292      	uxth	r2, r2
 8001e5a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	461a      	mov	r2, r3
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	4413      	add	r3, r2
 8001e70:	3306      	adds	r3, #6
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	6812      	ldr	r2, [r2, #0]
 8001e78:	4413      	add	r3, r2
 8001e7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e7e:	881b      	ldrh	r3, [r3, #0]
 8001e80:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	69db      	ldr	r3, [r3, #28]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d019      	beq.n	8001ec4 <PCD_EP_ISR_Handler+0x1e4>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	695b      	ldr	r3, [r3, #20]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d015      	beq.n	8001ec4 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6818      	ldr	r0, [r3, #0]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6959      	ldr	r1, [r3, #20]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	f002 fd5e 	bl	800496a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	695a      	ldr	r2, [r3, #20]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	441a      	add	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f004 fce8 	bl	8006894 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	461c      	mov	r4, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	441c      	add	r4, r3
 8001ed6:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 8001eda:	461c      	mov	r4, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d10e      	bne.n	8001f02 <PCD_EP_ISR_Handler+0x222>
 8001ee4:	8823      	ldrh	r3, [r4, #0]
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	8023      	strh	r3, [r4, #0]
 8001ef0:	8823      	ldrh	r3, [r4, #0]
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ef8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	8023      	strh	r3, [r4, #0]
 8001f00:	e02d      	b.n	8001f5e <PCD_EP_ISR_Handler+0x27e>
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	2b3e      	cmp	r3, #62	; 0x3e
 8001f08:	d812      	bhi.n	8001f30 <PCD_EP_ISR_Handler+0x250>
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	085b      	lsrs	r3, r3, #1
 8001f10:	61bb      	str	r3, [r7, #24]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d002      	beq.n	8001f24 <PCD_EP_ISR_Handler+0x244>
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	3301      	adds	r3, #1
 8001f22:	61bb      	str	r3, [r7, #24]
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	029b      	lsls	r3, r3, #10
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	8023      	strh	r3, [r4, #0]
 8001f2e:	e016      	b.n	8001f5e <PCD_EP_ISR_Handler+0x27e>
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	691b      	ldr	r3, [r3, #16]
 8001f34:	095b      	lsrs	r3, r3, #5
 8001f36:	61bb      	str	r3, [r7, #24]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	f003 031f 	and.w	r3, r3, #31
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d102      	bne.n	8001f4a <PCD_EP_ISR_Handler+0x26a>
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	3b01      	subs	r3, #1
 8001f48:	61bb      	str	r3, [r7, #24]
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	029b      	lsls	r3, r3, #10
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	881b      	ldrh	r3, [r3, #0]
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f6e:	b29c      	uxth	r4, r3
 8001f70:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8001f74:	b29c      	uxth	r4, r3
 8001f76:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8001f7a:	b29c      	uxth	r4, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	4ba2      	ldr	r3, [pc, #648]	; (800220c <PCD_EP_ISR_Handler+0x52c>)
 8001f82:	4323      	orrs	r3, r4
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	8013      	strh	r3, [r2, #0]
 8001f88:	e132      	b.n	80021f0 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	7d7b      	ldrb	r3, [r7, #21]
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	4413      	add	r3, r2
 8001f96:	881b      	ldrh	r3, [r3, #0]
 8001f98:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001f9a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f280 80d1 	bge.w	8002146 <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	461a      	mov	r2, r3
 8001faa:	7d7b      	ldrb	r3, [r7, #21]
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4413      	add	r3, r2
 8001fb0:	881b      	ldrh	r3, [r3, #0]
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001fb8:	4013      	ands	r3, r2
 8001fba:	b29c      	uxth	r4, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	7d7b      	ldrb	r3, [r7, #21]
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	4413      	add	r3, r2
 8001fc8:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001fcc:	b292      	uxth	r2, r2
 8001fce:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001fd0:	7d7b      	ldrb	r3, [r7, #21]
 8001fd2:	015b      	lsls	r3, r3, #5
 8001fd4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	4413      	add	r3, r2
 8001fdc:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	7b1b      	ldrb	r3, [r3, #12]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d121      	bne.n	800202a <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	4413      	add	r3, r2
 8001ffa:	3306      	adds	r3, #6
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	6812      	ldr	r2, [r2, #0]
 8002002:	4413      	add	r3, r2
 8002004:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002008:	881b      	ldrh	r3, [r3, #0]
 800200a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800200e:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8002010:	8bfb      	ldrh	r3, [r7, #30]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d072      	beq.n	80020fc <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6818      	ldr	r0, [r3, #0]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6959      	ldr	r1, [r3, #20]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	88da      	ldrh	r2, [r3, #6]
 8002022:	8bfb      	ldrh	r3, [r7, #30]
 8002024:	f002 fca1 	bl	800496a <USB_ReadPMA>
 8002028:	e068      	b.n	80020fc <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	461a      	mov	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4413      	add	r3, r2
 8002038:	881b      	ldrh	r3, [r3, #0]
 800203a:	b29b      	uxth	r3, r3
 800203c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d021      	beq.n	8002088 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800204c:	b29b      	uxth	r3, r3
 800204e:	461a      	mov	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	4413      	add	r3, r2
 8002058:	3302      	adds	r3, #2
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	6812      	ldr	r2, [r2, #0]
 8002060:	4413      	add	r3, r2
 8002062:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002066:	881b      	ldrh	r3, [r3, #0]
 8002068:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800206c:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800206e:	8bfb      	ldrh	r3, [r7, #30]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d02a      	beq.n	80020ca <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6818      	ldr	r0, [r3, #0]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6959      	ldr	r1, [r3, #20]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	891a      	ldrh	r2, [r3, #8]
 8002080:	8bfb      	ldrh	r3, [r7, #30]
 8002082:	f002 fc72 	bl	800496a <USB_ReadPMA>
 8002086:	e020      	b.n	80020ca <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002090:	b29b      	uxth	r3, r3
 8002092:	461a      	mov	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	4413      	add	r3, r2
 800209c:	3306      	adds	r3, #6
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	6812      	ldr	r2, [r2, #0]
 80020a4:	4413      	add	r3, r2
 80020a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020aa:	881b      	ldrh	r3, [r3, #0]
 80020ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020b0:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80020b2:	8bfb      	ldrh	r3, [r7, #30]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d008      	beq.n	80020ca <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6818      	ldr	r0, [r3, #0]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6959      	ldr	r1, [r3, #20]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	895a      	ldrh	r2, [r3, #10]
 80020c4:	8bfb      	ldrh	r3, [r7, #30]
 80020c6:	f002 fc50 	bl	800496a <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	461a      	mov	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4413      	add	r3, r2
 80020d8:	881b      	ldrh	r3, [r3, #0]
 80020da:	b29b      	uxth	r3, r3
 80020dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020e4:	b29c      	uxth	r4, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	461a      	mov	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	441a      	add	r2, r3
 80020f4:	4b46      	ldr	r3, [pc, #280]	; (8002210 <PCD_EP_ISR_Handler+0x530>)
 80020f6:	4323      	orrs	r3, r4
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	69da      	ldr	r2, [r3, #28]
 8002100:	8bfb      	ldrh	r3, [r7, #30]
 8002102:	441a      	add	r2, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	695a      	ldr	r2, [r3, #20]
 800210c:	8bfb      	ldrh	r3, [r7, #30]
 800210e:	441a      	add	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d004      	beq.n	8002126 <PCD_EP_ISR_Handler+0x446>
 800211c:	8bfa      	ldrh	r2, [r7, #30]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	429a      	cmp	r2, r3
 8002124:	d206      	bcs.n	8002134 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	4619      	mov	r1, r3
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f004 fbb1 	bl	8006894 <HAL_PCD_DataOutStageCallback>
 8002132:	e008      	b.n	8002146 <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	7819      	ldrb	r1, [r3, #0]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	695a      	ldr	r2, [r3, #20]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f7ff fc9d 	bl	8001a80 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002146:	8a7b      	ldrh	r3, [r7, #18]
 8002148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800214c:	2b00      	cmp	r3, #0
 800214e:	d04f      	beq.n	80021f0 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8002150:	7d7b      	ldrb	r3, [r7, #21]
 8002152:	015b      	lsls	r3, r3, #5
 8002154:	3328      	adds	r3, #40	; 0x28
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	4413      	add	r3, r2
 800215a:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	461a      	mov	r2, r3
 8002162:	7d7b      	ldrb	r3, [r7, #21]
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	4413      	add	r3, r2
 8002168:	881b      	ldrh	r3, [r3, #0]
 800216a:	b29b      	uxth	r3, r3
 800216c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002170:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002174:	b29c      	uxth	r4, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	461a      	mov	r2, r3
 800217c:	7d7b      	ldrb	r3, [r7, #21]
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	441a      	add	r2, r3
 8002182:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8002186:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800218a:	b29b      	uxth	r3, r3
 800218c:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002196:	b29b      	uxth	r3, r3
 8002198:	461a      	mov	r2, r3
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	4413      	add	r3, r2
 80021a2:	3302      	adds	r3, #2
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	6812      	ldr	r2, [r2, #0]
 80021aa:	4413      	add	r3, r2
 80021ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021b0:	881b      	ldrh	r3, [r3, #0]
 80021b2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	695a      	ldr	r2, [r3, #20]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	441a      	add	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d106      	bne.n	80021de <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	4619      	mov	r1, r3
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f004 fb74 	bl	80068c4 <HAL_PCD_DataInStageCallback>
 80021dc:	e008      	b.n	80021f0 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	7819      	ldrb	r1, [r3, #0]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	695a      	ldr	r2, [r3, #20]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f7ff fc96 	bl	8001b1c <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	b21b      	sxth	r3, r3
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f6ff ad74 	blt.w	8001cea <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8002202:	2300      	movs	r3, #0
}
 8002204:	4618      	mov	r0, r3
 8002206:	3724      	adds	r7, #36	; 0x24
 8002208:	46bd      	mov	sp, r7
 800220a:	bd90      	pop	{r4, r7, pc}
 800220c:	ffff8080 	.word	0xffff8080
 8002210:	ffff80c0 	.word	0xffff80c0

08002214 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8002214:	b480      	push	{r7}
 8002216:	b087      	sub	sp, #28
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	607b      	str	r3, [r7, #4]
 800221e:	460b      	mov	r3, r1
 8002220:	817b      	strh	r3, [r7, #10]
 8002222:	4613      	mov	r3, r2
 8002224:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002226:	897b      	ldrh	r3, [r7, #10]
 8002228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800222c:	b29b      	uxth	r3, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d008      	beq.n	8002244 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002232:	897b      	ldrh	r3, [r7, #10]
 8002234:	f003 0307 	and.w	r3, r3, #7
 8002238:	015b      	lsls	r3, r3, #5
 800223a:	3328      	adds	r3, #40	; 0x28
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	4413      	add	r3, r2
 8002240:	617b      	str	r3, [r7, #20]
 8002242:	e006      	b.n	8002252 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002244:	897b      	ldrh	r3, [r7, #10]
 8002246:	015b      	lsls	r3, r3, #5
 8002248:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	4413      	add	r3, r2
 8002250:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002252:	893b      	ldrh	r3, [r7, #8]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d107      	bne.n	8002268 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	2200      	movs	r2, #0
 800225c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	b29a      	uxth	r2, r3
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	80da      	strh	r2, [r3, #6]
 8002266:	e00b      	b.n	8002280 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	2201      	movs	r2, #1
 800226c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	b29a      	uxth	r2, r3
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	0c1b      	lsrs	r3, r3, #16
 800227a:	b29a      	uxth	r2, r3
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	371c      	adds	r7, #28
 8002286:	46bd      	mov	sp, r7
 8002288:	bc80      	pop	{r7}
 800228a:	4770      	bx	lr

0800228c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e26c      	b.n	8002778 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f000 8087 	beq.w	80023ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022ac:	4b92      	ldr	r3, [pc, #584]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f003 030c 	and.w	r3, r3, #12
 80022b4:	2b04      	cmp	r3, #4
 80022b6:	d00c      	beq.n	80022d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022b8:	4b8f      	ldr	r3, [pc, #572]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f003 030c 	and.w	r3, r3, #12
 80022c0:	2b08      	cmp	r3, #8
 80022c2:	d112      	bne.n	80022ea <HAL_RCC_OscConfig+0x5e>
 80022c4:	4b8c      	ldr	r3, [pc, #560]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022d0:	d10b      	bne.n	80022ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d2:	4b89      	ldr	r3, [pc, #548]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d06c      	beq.n	80023b8 <HAL_RCC_OscConfig+0x12c>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d168      	bne.n	80023b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e246      	b.n	8002778 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022f2:	d106      	bne.n	8002302 <HAL_RCC_OscConfig+0x76>
 80022f4:	4b80      	ldr	r3, [pc, #512]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a7f      	ldr	r2, [pc, #508]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 80022fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022fe:	6013      	str	r3, [r2, #0]
 8002300:	e02e      	b.n	8002360 <HAL_RCC_OscConfig+0xd4>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d10c      	bne.n	8002324 <HAL_RCC_OscConfig+0x98>
 800230a:	4b7b      	ldr	r3, [pc, #492]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a7a      	ldr	r2, [pc, #488]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 8002310:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002314:	6013      	str	r3, [r2, #0]
 8002316:	4b78      	ldr	r3, [pc, #480]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a77      	ldr	r2, [pc, #476]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 800231c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002320:	6013      	str	r3, [r2, #0]
 8002322:	e01d      	b.n	8002360 <HAL_RCC_OscConfig+0xd4>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800232c:	d10c      	bne.n	8002348 <HAL_RCC_OscConfig+0xbc>
 800232e:	4b72      	ldr	r3, [pc, #456]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a71      	ldr	r2, [pc, #452]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 8002334:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002338:	6013      	str	r3, [r2, #0]
 800233a:	4b6f      	ldr	r3, [pc, #444]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a6e      	ldr	r2, [pc, #440]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 8002340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002344:	6013      	str	r3, [r2, #0]
 8002346:	e00b      	b.n	8002360 <HAL_RCC_OscConfig+0xd4>
 8002348:	4b6b      	ldr	r3, [pc, #428]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a6a      	ldr	r2, [pc, #424]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 800234e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002352:	6013      	str	r3, [r2, #0]
 8002354:	4b68      	ldr	r3, [pc, #416]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a67      	ldr	r2, [pc, #412]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 800235a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800235e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d013      	beq.n	8002390 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002368:	f7fe fa34 	bl	80007d4 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002370:	f7fe fa30 	bl	80007d4 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b64      	cmp	r3, #100	; 0x64
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e1fa      	b.n	8002778 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002382:	4b5d      	ldr	r3, [pc, #372]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d0f0      	beq.n	8002370 <HAL_RCC_OscConfig+0xe4>
 800238e:	e014      	b.n	80023ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002390:	f7fe fa20 	bl	80007d4 <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002398:	f7fe fa1c 	bl	80007d4 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b64      	cmp	r3, #100	; 0x64
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e1e6      	b.n	8002778 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023aa:	4b53      	ldr	r3, [pc, #332]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f0      	bne.n	8002398 <HAL_RCC_OscConfig+0x10c>
 80023b6:	e000      	b.n	80023ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d063      	beq.n	800248e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023c6:	4b4c      	ldr	r3, [pc, #304]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f003 030c 	and.w	r3, r3, #12
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00b      	beq.n	80023ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80023d2:	4b49      	ldr	r3, [pc, #292]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f003 030c 	and.w	r3, r3, #12
 80023da:	2b08      	cmp	r3, #8
 80023dc:	d11c      	bne.n	8002418 <HAL_RCC_OscConfig+0x18c>
 80023de:	4b46      	ldr	r3, [pc, #280]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d116      	bne.n	8002418 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ea:	4b43      	ldr	r3, [pc, #268]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d005      	beq.n	8002402 <HAL_RCC_OscConfig+0x176>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d001      	beq.n	8002402 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e1ba      	b.n	8002778 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002402:	4b3d      	ldr	r3, [pc, #244]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	4939      	ldr	r1, [pc, #228]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 8002412:	4313      	orrs	r3, r2
 8002414:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002416:	e03a      	b.n	800248e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d020      	beq.n	8002462 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002420:	4b36      	ldr	r3, [pc, #216]	; (80024fc <HAL_RCC_OscConfig+0x270>)
 8002422:	2201      	movs	r2, #1
 8002424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002426:	f7fe f9d5 	bl	80007d4 <HAL_GetTick>
 800242a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800242c:	e008      	b.n	8002440 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800242e:	f7fe f9d1 	bl	80007d4 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e19b      	b.n	8002778 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002440:	4b2d      	ldr	r3, [pc, #180]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0f0      	beq.n	800242e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800244c:	4b2a      	ldr	r3, [pc, #168]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	695b      	ldr	r3, [r3, #20]
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	4927      	ldr	r1, [pc, #156]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 800245c:	4313      	orrs	r3, r2
 800245e:	600b      	str	r3, [r1, #0]
 8002460:	e015      	b.n	800248e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002462:	4b26      	ldr	r3, [pc, #152]	; (80024fc <HAL_RCC_OscConfig+0x270>)
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002468:	f7fe f9b4 	bl	80007d4 <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002470:	f7fe f9b0 	bl	80007d4 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b02      	cmp	r3, #2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e17a      	b.n	8002778 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002482:	4b1d      	ldr	r3, [pc, #116]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1f0      	bne.n	8002470 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0308 	and.w	r3, r3, #8
 8002496:	2b00      	cmp	r3, #0
 8002498:	d03a      	beq.n	8002510 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d019      	beq.n	80024d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024a2:	4b17      	ldr	r3, [pc, #92]	; (8002500 <HAL_RCC_OscConfig+0x274>)
 80024a4:	2201      	movs	r2, #1
 80024a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a8:	f7fe f994 	bl	80007d4 <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024b0:	f7fe f990 	bl	80007d4 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e15a      	b.n	8002778 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024c2:	4b0d      	ldr	r3, [pc, #52]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 80024c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d0f0      	beq.n	80024b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80024ce:	2001      	movs	r0, #1
 80024d0:	f000 fada 	bl	8002a88 <RCC_Delay>
 80024d4:	e01c      	b.n	8002510 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024d6:	4b0a      	ldr	r3, [pc, #40]	; (8002500 <HAL_RCC_OscConfig+0x274>)
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024dc:	f7fe f97a 	bl	80007d4 <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024e2:	e00f      	b.n	8002504 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024e4:	f7fe f976 	bl	80007d4 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d908      	bls.n	8002504 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e140      	b.n	8002778 <HAL_RCC_OscConfig+0x4ec>
 80024f6:	bf00      	nop
 80024f8:	40021000 	.word	0x40021000
 80024fc:	42420000 	.word	0x42420000
 8002500:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002504:	4b9e      	ldr	r3, [pc, #632]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 8002506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1e9      	bne.n	80024e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0304 	and.w	r3, r3, #4
 8002518:	2b00      	cmp	r3, #0
 800251a:	f000 80a6 	beq.w	800266a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800251e:	2300      	movs	r3, #0
 8002520:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002522:	4b97      	ldr	r3, [pc, #604]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d10d      	bne.n	800254a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800252e:	4b94      	ldr	r3, [pc, #592]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	4a93      	ldr	r2, [pc, #588]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 8002534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002538:	61d3      	str	r3, [r2, #28]
 800253a:	4b91      	ldr	r3, [pc, #580]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 800253c:	69db      	ldr	r3, [r3, #28]
 800253e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002542:	60bb      	str	r3, [r7, #8]
 8002544:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002546:	2301      	movs	r3, #1
 8002548:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800254a:	4b8e      	ldr	r3, [pc, #568]	; (8002784 <HAL_RCC_OscConfig+0x4f8>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002552:	2b00      	cmp	r3, #0
 8002554:	d118      	bne.n	8002588 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002556:	4b8b      	ldr	r3, [pc, #556]	; (8002784 <HAL_RCC_OscConfig+0x4f8>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a8a      	ldr	r2, [pc, #552]	; (8002784 <HAL_RCC_OscConfig+0x4f8>)
 800255c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002560:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002562:	f7fe f937 	bl	80007d4 <HAL_GetTick>
 8002566:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002568:	e008      	b.n	800257c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800256a:	f7fe f933 	bl	80007d4 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b64      	cmp	r3, #100	; 0x64
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e0fd      	b.n	8002778 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800257c:	4b81      	ldr	r3, [pc, #516]	; (8002784 <HAL_RCC_OscConfig+0x4f8>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002584:	2b00      	cmp	r3, #0
 8002586:	d0f0      	beq.n	800256a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d106      	bne.n	800259e <HAL_RCC_OscConfig+0x312>
 8002590:	4b7b      	ldr	r3, [pc, #492]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 8002592:	6a1b      	ldr	r3, [r3, #32]
 8002594:	4a7a      	ldr	r2, [pc, #488]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 8002596:	f043 0301 	orr.w	r3, r3, #1
 800259a:	6213      	str	r3, [r2, #32]
 800259c:	e02d      	b.n	80025fa <HAL_RCC_OscConfig+0x36e>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d10c      	bne.n	80025c0 <HAL_RCC_OscConfig+0x334>
 80025a6:	4b76      	ldr	r3, [pc, #472]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	4a75      	ldr	r2, [pc, #468]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 80025ac:	f023 0301 	bic.w	r3, r3, #1
 80025b0:	6213      	str	r3, [r2, #32]
 80025b2:	4b73      	ldr	r3, [pc, #460]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 80025b4:	6a1b      	ldr	r3, [r3, #32]
 80025b6:	4a72      	ldr	r2, [pc, #456]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 80025b8:	f023 0304 	bic.w	r3, r3, #4
 80025bc:	6213      	str	r3, [r2, #32]
 80025be:	e01c      	b.n	80025fa <HAL_RCC_OscConfig+0x36e>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	2b05      	cmp	r3, #5
 80025c6:	d10c      	bne.n	80025e2 <HAL_RCC_OscConfig+0x356>
 80025c8:	4b6d      	ldr	r3, [pc, #436]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	4a6c      	ldr	r2, [pc, #432]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 80025ce:	f043 0304 	orr.w	r3, r3, #4
 80025d2:	6213      	str	r3, [r2, #32]
 80025d4:	4b6a      	ldr	r3, [pc, #424]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	4a69      	ldr	r2, [pc, #420]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 80025da:	f043 0301 	orr.w	r3, r3, #1
 80025de:	6213      	str	r3, [r2, #32]
 80025e0:	e00b      	b.n	80025fa <HAL_RCC_OscConfig+0x36e>
 80025e2:	4b67      	ldr	r3, [pc, #412]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 80025e4:	6a1b      	ldr	r3, [r3, #32]
 80025e6:	4a66      	ldr	r2, [pc, #408]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 80025e8:	f023 0301 	bic.w	r3, r3, #1
 80025ec:	6213      	str	r3, [r2, #32]
 80025ee:	4b64      	ldr	r3, [pc, #400]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 80025f0:	6a1b      	ldr	r3, [r3, #32]
 80025f2:	4a63      	ldr	r2, [pc, #396]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 80025f4:	f023 0304 	bic.w	r3, r3, #4
 80025f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d015      	beq.n	800262e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002602:	f7fe f8e7 	bl	80007d4 <HAL_GetTick>
 8002606:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002608:	e00a      	b.n	8002620 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800260a:	f7fe f8e3 	bl	80007d4 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	f241 3288 	movw	r2, #5000	; 0x1388
 8002618:	4293      	cmp	r3, r2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e0ab      	b.n	8002778 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002620:	4b57      	ldr	r3, [pc, #348]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 8002622:	6a1b      	ldr	r3, [r3, #32]
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d0ee      	beq.n	800260a <HAL_RCC_OscConfig+0x37e>
 800262c:	e014      	b.n	8002658 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800262e:	f7fe f8d1 	bl	80007d4 <HAL_GetTick>
 8002632:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002634:	e00a      	b.n	800264c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002636:	f7fe f8cd 	bl	80007d4 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	f241 3288 	movw	r2, #5000	; 0x1388
 8002644:	4293      	cmp	r3, r2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e095      	b.n	8002778 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800264c:	4b4c      	ldr	r3, [pc, #304]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d1ee      	bne.n	8002636 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002658:	7dfb      	ldrb	r3, [r7, #23]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d105      	bne.n	800266a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800265e:	4b48      	ldr	r3, [pc, #288]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	4a47      	ldr	r2, [pc, #284]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 8002664:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002668:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	2b00      	cmp	r3, #0
 8002670:	f000 8081 	beq.w	8002776 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002674:	4b42      	ldr	r3, [pc, #264]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f003 030c 	and.w	r3, r3, #12
 800267c:	2b08      	cmp	r3, #8
 800267e:	d061      	beq.n	8002744 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	69db      	ldr	r3, [r3, #28]
 8002684:	2b02      	cmp	r3, #2
 8002686:	d146      	bne.n	8002716 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002688:	4b3f      	ldr	r3, [pc, #252]	; (8002788 <HAL_RCC_OscConfig+0x4fc>)
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268e:	f7fe f8a1 	bl	80007d4 <HAL_GetTick>
 8002692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002694:	e008      	b.n	80026a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002696:	f7fe f89d 	bl	80007d4 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e067      	b.n	8002778 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026a8:	4b35      	ldr	r3, [pc, #212]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1f0      	bne.n	8002696 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026bc:	d108      	bne.n	80026d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026be:	4b30      	ldr	r3, [pc, #192]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	492d      	ldr	r1, [pc, #180]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026d0:	4b2b      	ldr	r3, [pc, #172]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a19      	ldr	r1, [r3, #32]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e0:	430b      	orrs	r3, r1
 80026e2:	4927      	ldr	r1, [pc, #156]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026e8:	4b27      	ldr	r3, [pc, #156]	; (8002788 <HAL_RCC_OscConfig+0x4fc>)
 80026ea:	2201      	movs	r2, #1
 80026ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ee:	f7fe f871 	bl	80007d4 <HAL_GetTick>
 80026f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026f4:	e008      	b.n	8002708 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026f6:	f7fe f86d 	bl	80007d4 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e037      	b.n	8002778 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002708:	4b1d      	ldr	r3, [pc, #116]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d0f0      	beq.n	80026f6 <HAL_RCC_OscConfig+0x46a>
 8002714:	e02f      	b.n	8002776 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002716:	4b1c      	ldr	r3, [pc, #112]	; (8002788 <HAL_RCC_OscConfig+0x4fc>)
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800271c:	f7fe f85a 	bl	80007d4 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002724:	f7fe f856 	bl	80007d4 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b02      	cmp	r3, #2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e020      	b.n	8002778 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002736:	4b12      	ldr	r3, [pc, #72]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1f0      	bne.n	8002724 <HAL_RCC_OscConfig+0x498>
 8002742:	e018      	b.n	8002776 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	69db      	ldr	r3, [r3, #28]
 8002748:	2b01      	cmp	r3, #1
 800274a:	d101      	bne.n	8002750 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e013      	b.n	8002778 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002750:	4b0b      	ldr	r3, [pc, #44]	; (8002780 <HAL_RCC_OscConfig+0x4f4>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	429a      	cmp	r2, r3
 8002762:	d106      	bne.n	8002772 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800276e:	429a      	cmp	r2, r3
 8002770:	d001      	beq.n	8002776 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e000      	b.n	8002778 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	3718      	adds	r7, #24
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40021000 	.word	0x40021000
 8002784:	40007000 	.word	0x40007000
 8002788:	42420060 	.word	0x42420060

0800278c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d101      	bne.n	80027a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e0d0      	b.n	8002942 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027a0:	4b6a      	ldr	r3, [pc, #424]	; (800294c <HAL_RCC_ClockConfig+0x1c0>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0307 	and.w	r3, r3, #7
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d910      	bls.n	80027d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ae:	4b67      	ldr	r3, [pc, #412]	; (800294c <HAL_RCC_ClockConfig+0x1c0>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f023 0207 	bic.w	r2, r3, #7
 80027b6:	4965      	ldr	r1, [pc, #404]	; (800294c <HAL_RCC_ClockConfig+0x1c0>)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027be:	4b63      	ldr	r3, [pc, #396]	; (800294c <HAL_RCC_ClockConfig+0x1c0>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d001      	beq.n	80027d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e0b8      	b.n	8002942 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d020      	beq.n	800281e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d005      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027e8:	4b59      	ldr	r3, [pc, #356]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	4a58      	ldr	r2, [pc, #352]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 80027ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0308 	and.w	r3, r3, #8
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d005      	beq.n	800280c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002800:	4b53      	ldr	r3, [pc, #332]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	4a52      	ldr	r2, [pc, #328]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 8002806:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800280a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800280c:	4b50      	ldr	r3, [pc, #320]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	494d      	ldr	r1, [pc, #308]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 800281a:	4313      	orrs	r3, r2
 800281c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b00      	cmp	r3, #0
 8002828:	d040      	beq.n	80028ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d107      	bne.n	8002842 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002832:	4b47      	ldr	r3, [pc, #284]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d115      	bne.n	800286a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e07f      	b.n	8002942 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	2b02      	cmp	r3, #2
 8002848:	d107      	bne.n	800285a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800284a:	4b41      	ldr	r3, [pc, #260]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d109      	bne.n	800286a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e073      	b.n	8002942 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800285a:	4b3d      	ldr	r3, [pc, #244]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e06b      	b.n	8002942 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800286a:	4b39      	ldr	r3, [pc, #228]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f023 0203 	bic.w	r2, r3, #3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	4936      	ldr	r1, [pc, #216]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 8002878:	4313      	orrs	r3, r2
 800287a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800287c:	f7fd ffaa 	bl	80007d4 <HAL_GetTick>
 8002880:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002882:	e00a      	b.n	800289a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002884:	f7fd ffa6 	bl	80007d4 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002892:	4293      	cmp	r3, r2
 8002894:	d901      	bls.n	800289a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e053      	b.n	8002942 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800289a:	4b2d      	ldr	r3, [pc, #180]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f003 020c 	and.w	r2, r3, #12
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d1eb      	bne.n	8002884 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028ac:	4b27      	ldr	r3, [pc, #156]	; (800294c <HAL_RCC_ClockConfig+0x1c0>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0307 	and.w	r3, r3, #7
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d210      	bcs.n	80028dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ba:	4b24      	ldr	r3, [pc, #144]	; (800294c <HAL_RCC_ClockConfig+0x1c0>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f023 0207 	bic.w	r2, r3, #7
 80028c2:	4922      	ldr	r1, [pc, #136]	; (800294c <HAL_RCC_ClockConfig+0x1c0>)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ca:	4b20      	ldr	r3, [pc, #128]	; (800294c <HAL_RCC_ClockConfig+0x1c0>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0307 	and.w	r3, r3, #7
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d001      	beq.n	80028dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e032      	b.n	8002942 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0304 	and.w	r3, r3, #4
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d008      	beq.n	80028fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028e8:	4b19      	ldr	r3, [pc, #100]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	4916      	ldr	r1, [pc, #88]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0308 	and.w	r3, r3, #8
 8002902:	2b00      	cmp	r3, #0
 8002904:	d009      	beq.n	800291a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002906:	4b12      	ldr	r3, [pc, #72]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	490e      	ldr	r1, [pc, #56]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 8002916:	4313      	orrs	r3, r2
 8002918:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800291a:	f000 f821 	bl	8002960 <HAL_RCC_GetSysClockFreq>
 800291e:	4601      	mov	r1, r0
 8002920:	4b0b      	ldr	r3, [pc, #44]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	091b      	lsrs	r3, r3, #4
 8002926:	f003 030f 	and.w	r3, r3, #15
 800292a:	4a0a      	ldr	r2, [pc, #40]	; (8002954 <HAL_RCC_ClockConfig+0x1c8>)
 800292c:	5cd3      	ldrb	r3, [r2, r3]
 800292e:	fa21 f303 	lsr.w	r3, r1, r3
 8002932:	4a09      	ldr	r2, [pc, #36]	; (8002958 <HAL_RCC_ClockConfig+0x1cc>)
 8002934:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002936:	4b09      	ldr	r3, [pc, #36]	; (800295c <HAL_RCC_ClockConfig+0x1d0>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4618      	mov	r0, r3
 800293c:	f7fd ff08 	bl	8000750 <HAL_InitTick>

  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	40022000 	.word	0x40022000
 8002950:	40021000 	.word	0x40021000
 8002954:	08006e20 	.word	0x08006e20
 8002958:	20000000 	.word	0x20000000
 800295c:	20000004 	.word	0x20000004

08002960 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002960:	b490      	push	{r4, r7}
 8002962:	b08a      	sub	sp, #40	; 0x28
 8002964:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002966:	4b2a      	ldr	r3, [pc, #168]	; (8002a10 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002968:	1d3c      	adds	r4, r7, #4
 800296a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800296c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002970:	4b28      	ldr	r3, [pc, #160]	; (8002a14 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002972:	881b      	ldrh	r3, [r3, #0]
 8002974:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002976:	2300      	movs	r3, #0
 8002978:	61fb      	str	r3, [r7, #28]
 800297a:	2300      	movs	r3, #0
 800297c:	61bb      	str	r3, [r7, #24]
 800297e:	2300      	movs	r3, #0
 8002980:	627b      	str	r3, [r7, #36]	; 0x24
 8002982:	2300      	movs	r3, #0
 8002984:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002986:	2300      	movs	r3, #0
 8002988:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800298a:	4b23      	ldr	r3, [pc, #140]	; (8002a18 <HAL_RCC_GetSysClockFreq+0xb8>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	f003 030c 	and.w	r3, r3, #12
 8002996:	2b04      	cmp	r3, #4
 8002998:	d002      	beq.n	80029a0 <HAL_RCC_GetSysClockFreq+0x40>
 800299a:	2b08      	cmp	r3, #8
 800299c:	d003      	beq.n	80029a6 <HAL_RCC_GetSysClockFreq+0x46>
 800299e:	e02d      	b.n	80029fc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029a0:	4b1e      	ldr	r3, [pc, #120]	; (8002a1c <HAL_RCC_GetSysClockFreq+0xbc>)
 80029a2:	623b      	str	r3, [r7, #32]
      break;
 80029a4:	e02d      	b.n	8002a02 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	0c9b      	lsrs	r3, r3, #18
 80029aa:	f003 030f 	and.w	r3, r3, #15
 80029ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80029b2:	4413      	add	r3, r2
 80029b4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80029b8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d013      	beq.n	80029ec <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029c4:	4b14      	ldr	r3, [pc, #80]	; (8002a18 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	0c5b      	lsrs	r3, r3, #17
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80029d2:	4413      	add	r3, r2
 80029d4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80029d8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	4a0f      	ldr	r2, [pc, #60]	; (8002a1c <HAL_RCC_GetSysClockFreq+0xbc>)
 80029de:	fb02 f203 	mul.w	r2, r2, r3
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e8:	627b      	str	r3, [r7, #36]	; 0x24
 80029ea:	e004      	b.n	80029f6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	4a0c      	ldr	r2, [pc, #48]	; (8002a20 <HAL_RCC_GetSysClockFreq+0xc0>)
 80029f0:	fb02 f303 	mul.w	r3, r2, r3
 80029f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80029f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f8:	623b      	str	r3, [r7, #32]
      break;
 80029fa:	e002      	b.n	8002a02 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029fc:	4b07      	ldr	r3, [pc, #28]	; (8002a1c <HAL_RCC_GetSysClockFreq+0xbc>)
 80029fe:	623b      	str	r3, [r7, #32]
      break;
 8002a00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a02:	6a3b      	ldr	r3, [r7, #32]
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3728      	adds	r7, #40	; 0x28
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bc90      	pop	{r4, r7}
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	08006dd0 	.word	0x08006dd0
 8002a14:	08006de0 	.word	0x08006de0
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	007a1200 	.word	0x007a1200
 8002a20:	003d0900 	.word	0x003d0900

08002a24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a28:	4b02      	ldr	r3, [pc, #8]	; (8002a34 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bc80      	pop	{r7}
 8002a32:	4770      	bx	lr
 8002a34:	20000000 	.word	0x20000000

08002a38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a3c:	f7ff fff2 	bl	8002a24 <HAL_RCC_GetHCLKFreq>
 8002a40:	4601      	mov	r1, r0
 8002a42:	4b05      	ldr	r3, [pc, #20]	; (8002a58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	0a1b      	lsrs	r3, r3, #8
 8002a48:	f003 0307 	and.w	r3, r3, #7
 8002a4c:	4a03      	ldr	r2, [pc, #12]	; (8002a5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a4e:	5cd3      	ldrb	r3, [r2, r3]
 8002a50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	08006e30 	.word	0x08006e30

08002a60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a64:	f7ff ffde 	bl	8002a24 <HAL_RCC_GetHCLKFreq>
 8002a68:	4601      	mov	r1, r0
 8002a6a:	4b05      	ldr	r3, [pc, #20]	; (8002a80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	0adb      	lsrs	r3, r3, #11
 8002a70:	f003 0307 	and.w	r3, r3, #7
 8002a74:	4a03      	ldr	r2, [pc, #12]	; (8002a84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a76:	5cd3      	ldrb	r3, [r2, r3]
 8002a78:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40021000 	.word	0x40021000
 8002a84:	08006e30 	.word	0x08006e30

08002a88 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a90:	4b0a      	ldr	r3, [pc, #40]	; (8002abc <RCC_Delay+0x34>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a0a      	ldr	r2, [pc, #40]	; (8002ac0 <RCC_Delay+0x38>)
 8002a96:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9a:	0a5b      	lsrs	r3, r3, #9
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	fb02 f303 	mul.w	r3, r2, r3
 8002aa2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002aa4:	bf00      	nop
  }
  while (Delay --);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	1e5a      	subs	r2, r3, #1
 8002aaa:	60fa      	str	r2, [r7, #12]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d1f9      	bne.n	8002aa4 <RCC_Delay+0x1c>
}
 8002ab0:	bf00      	nop
 8002ab2:	3714      	adds	r7, #20
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bc80      	pop	{r7}
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	20000000 	.word	0x20000000
 8002ac0:	10624dd3 	.word	0x10624dd3

08002ac4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002acc:	2300      	movs	r3, #0
 8002ace:	613b      	str	r3, [r7, #16]
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d07d      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ae4:	4b4f      	ldr	r3, [pc, #316]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ae6:	69db      	ldr	r3, [r3, #28]
 8002ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d10d      	bne.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002af0:	4b4c      	ldr	r3, [pc, #304]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002af2:	69db      	ldr	r3, [r3, #28]
 8002af4:	4a4b      	ldr	r2, [pc, #300]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002af6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002afa:	61d3      	str	r3, [r2, #28]
 8002afc:	4b49      	ldr	r3, [pc, #292]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002afe:	69db      	ldr	r3, [r3, #28]
 8002b00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b04:	60bb      	str	r3, [r7, #8]
 8002b06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b0c:	4b46      	ldr	r3, [pc, #280]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d118      	bne.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b18:	4b43      	ldr	r3, [pc, #268]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a42      	ldr	r2, [pc, #264]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b24:	f7fd fe56 	bl	80007d4 <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b2a:	e008      	b.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b2c:	f7fd fe52 	bl	80007d4 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b64      	cmp	r3, #100	; 0x64
 8002b38:	d901      	bls.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e06d      	b.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b3e:	4b3a      	ldr	r3, [pc, #232]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d0f0      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b4a:	4b36      	ldr	r3, [pc, #216]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b52:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d02e      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b62:	68fa      	ldr	r2, [r7, #12]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d027      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b68:	4b2e      	ldr	r3, [pc, #184]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b6a:	6a1b      	ldr	r3, [r3, #32]
 8002b6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b70:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b72:	4b2e      	ldr	r3, [pc, #184]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b74:	2201      	movs	r2, #1
 8002b76:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b78:	4b2c      	ldr	r3, [pc, #176]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b7e:	4a29      	ldr	r2, [pc, #164]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d014      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b8e:	f7fd fe21 	bl	80007d4 <HAL_GetTick>
 8002b92:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b94:	e00a      	b.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b96:	f7fd fe1d 	bl	80007d4 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d901      	bls.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e036      	b.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bac:	4b1d      	ldr	r3, [pc, #116]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d0ee      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bb8:	4b1a      	ldr	r3, [pc, #104]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	4917      	ldr	r1, [pc, #92]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002bca:	7dfb      	ldrb	r3, [r7, #23]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d105      	bne.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bd0:	4b14      	ldr	r3, [pc, #80]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bd2:	69db      	ldr	r3, [r3, #28]
 8002bd4:	4a13      	ldr	r2, [pc, #76]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bda:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d008      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002be8:	4b0e      	ldr	r3, [pc, #56]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	490b      	ldr	r1, [pc, #44]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0310 	and.w	r3, r3, #16
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d008      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c06:	4b07      	ldr	r3, [pc, #28]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	4904      	ldr	r1, [pc, #16]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3718      	adds	r7, #24
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	40021000 	.word	0x40021000
 8002c28:	40007000 	.word	0x40007000
 8002c2c:	42420440 	.word	0x42420440

08002c30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e03f      	b.n	8002cc2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d106      	bne.n	8002c5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f7fd fbd8 	bl	800040c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2224      	movs	r2, #36	; 0x24
 8002c60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68da      	ldr	r2, [r3, #12]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f000 fc93 	bl	80035a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	691a      	ldr	r2, [r3, #16]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	695a      	ldr	r2, [r3, #20]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68da      	ldr	r2, [r3, #12]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ca8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2220      	movs	r2, #32
 8002cb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2220      	movs	r2, #32
 8002cbc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b082      	sub	sp, #8
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d101      	bne.n	8002cdc <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e01e      	b.n	8002d1a <HAL_UART_DeInit+0x50>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2224      	movs	r2, #36	; 0x24
 8002ce0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68da      	ldr	r2, [r3, #12]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cf2:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f7fd fc39 	bl	800056c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
	...

08002d24 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b20      	cmp	r3, #32
 8002d3c:	d153      	bne.n	8002de6 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d002      	beq.n	8002d4a <HAL_UART_Transmit_DMA+0x26>
 8002d44:	88fb      	ldrh	r3, [r7, #6]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e04c      	b.n	8002de8 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d101      	bne.n	8002d5c <HAL_UART_Transmit_DMA+0x38>
 8002d58:	2302      	movs	r3, #2
 8002d5a:	e045      	b.n	8002de8 <HAL_UART_Transmit_DMA+0xc4>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8002d64:	68ba      	ldr	r2, [r7, #8]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	88fa      	ldrh	r2, [r7, #6]
 8002d6e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	88fa      	ldrh	r2, [r7, #6]
 8002d74:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2221      	movs	r2, #33	; 0x21
 8002d80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d88:	4a19      	ldr	r2, [pc, #100]	; (8002df0 <HAL_UART_Transmit_DMA+0xcc>)
 8002d8a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d90:	4a18      	ldr	r2, [pc, #96]	; (8002df4 <HAL_UART_Transmit_DMA+0xd0>)
 8002d92:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d98:	4a17      	ldr	r2, [pc, #92]	; (8002df8 <HAL_UART_Transmit_DMA+0xd4>)
 8002d9a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da0:	2200      	movs	r2, #0
 8002da2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8002da4:	f107 0308 	add.w	r3, r7, #8
 8002da8:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	6819      	ldr	r1, [r3, #0]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	3304      	adds	r3, #4
 8002db8:	461a      	mov	r2, r3
 8002dba:	88fb      	ldrh	r3, [r7, #6]
 8002dbc:	f7fd ff08 	bl	8000bd0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002dc8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	695a      	ldr	r2, [r3, #20]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002de0:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8002de2:	2300      	movs	r3, #0
 8002de4:	e000      	b.n	8002de8 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8002de6:	2302      	movs	r3, #2
  }
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3718      	adds	r7, #24
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	080031b1 	.word	0x080031b1
 8002df4:	08003203 	.word	0x08003203
 8002df8:	080032a3 	.word	0x080032a3

08002dfc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	4613      	mov	r3, r2
 8002e08:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b20      	cmp	r3, #32
 8002e14:	d166      	bne.n	8002ee4 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d002      	beq.n	8002e22 <HAL_UART_Receive_DMA+0x26>
 8002e1c:	88fb      	ldrh	r3, [r7, #6]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d101      	bne.n	8002e26 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e05f      	b.n	8002ee6 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d101      	bne.n	8002e34 <HAL_UART_Receive_DMA+0x38>
 8002e30:	2302      	movs	r3, #2
 8002e32:	e058      	b.n	8002ee6 <HAL_UART_Receive_DMA+0xea>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002e3c:	68ba      	ldr	r2, [r7, #8]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	88fa      	ldrh	r2, [r7, #6]
 8002e46:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2222      	movs	r2, #34	; 0x22
 8002e52:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e5a:	4a25      	ldr	r2, [pc, #148]	; (8002ef0 <HAL_UART_Receive_DMA+0xf4>)
 8002e5c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e62:	4a24      	ldr	r2, [pc, #144]	; (8002ef4 <HAL_UART_Receive_DMA+0xf8>)
 8002e64:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e6a:	4a23      	ldr	r2, [pc, #140]	; (8002ef8 <HAL_UART_Receive_DMA+0xfc>)
 8002e6c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e72:	2200      	movs	r2, #0
 8002e74:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 8002e76:	f107 0308 	add.w	r3, r7, #8
 8002e7a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	3304      	adds	r3, #4
 8002e86:	4619      	mov	r1, r3
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	88fb      	ldrh	r3, [r7, #6]
 8002e8e:	f7fd fe9f 	bl	8000bd0 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8002e92:	2300      	movs	r3, #0
 8002e94:	613b      	str	r3, [r7, #16]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	613b      	str	r3, [r7, #16]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	613b      	str	r3, [r7, #16]
 8002ea6:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68da      	ldr	r2, [r3, #12]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ebe:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	695a      	ldr	r2, [r3, #20]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f042 0201 	orr.w	r2, r2, #1
 8002ece:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	695a      	ldr	r2, [r3, #20]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ede:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	e000      	b.n	8002ee6 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8002ee4:	2302      	movs	r3, #2
  }
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3718      	adds	r7, #24
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	0800321f 	.word	0x0800321f
 8002ef4:	08003287 	.word	0x08003287
 8002ef8:	080032a3 	.word	0x080032a3

08002efc <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68da      	ldr	r2, [r3, #12]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002f12:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	695a      	ldr	r2, [r3, #20]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f022 0201 	bic.w	r2, r2, #1
 8002f22:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d024      	beq.n	8002f7c <HAL_UART_AbortReceive+0x80>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	695a      	ldr	r2, [r3, #20]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f40:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d018      	beq.n	8002f7c <HAL_UART_AbortReceive+0x80>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f4e:	2200      	movs	r2, #0
 8002f50:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7fd fe99 	bl	8000c8e <HAL_DMA_Abort>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00c      	beq.n	8002f7c <HAL_UART_AbortReceive+0x80>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7fe f848 	bl	8000ffc <HAL_DMA_GetError>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b20      	cmp	r3, #32
 8002f70:	d104      	bne.n	8002f7c <HAL_UART_AbortReceive+0x80>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2210      	movs	r2, #16
 8002f76:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e007      	b.n	8002f8c <HAL_UART_AbortReceive+0x90>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2220      	movs	r2, #32
 8002f86:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3708      	adds	r7, #8
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b088      	sub	sp, #32
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d10d      	bne.n	8002fe6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	f003 0320 	and.w	r3, r3, #32
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d008      	beq.n	8002fe6 <HAL_UART_IRQHandler+0x52>
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	f003 0320 	and.w	r3, r3, #32
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 fa5c 	bl	800349c <UART_Receive_IT>
      return;
 8002fe4:	e0cc      	b.n	8003180 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f000 80ab 	beq.w	8003144 <HAL_UART_IRQHandler+0x1b0>
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d105      	bne.n	8003004 <HAL_UART_IRQHandler+0x70>
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f000 80a0 	beq.w	8003144 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00a      	beq.n	8003024 <HAL_UART_IRQHandler+0x90>
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003014:	2b00      	cmp	r3, #0
 8003016:	d005      	beq.n	8003024 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800301c:	f043 0201 	orr.w	r2, r3, #1
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	f003 0304 	and.w	r3, r3, #4
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00a      	beq.n	8003044 <HAL_UART_IRQHandler+0xb0>
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	f003 0301 	and.w	r3, r3, #1
 8003034:	2b00      	cmp	r3, #0
 8003036:	d005      	beq.n	8003044 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800303c:	f043 0202 	orr.w	r2, r3, #2
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00a      	beq.n	8003064 <HAL_UART_IRQHandler+0xd0>
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	2b00      	cmp	r3, #0
 8003056:	d005      	beq.n	8003064 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800305c:	f043 0204 	orr.w	r2, r3, #4
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	f003 0308 	and.w	r3, r3, #8
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00a      	beq.n	8003084 <HAL_UART_IRQHandler+0xf0>
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b00      	cmp	r3, #0
 8003076:	d005      	beq.n	8003084 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800307c:	f043 0208 	orr.w	r2, r3, #8
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003088:	2b00      	cmp	r3, #0
 800308a:	d078      	beq.n	800317e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	f003 0320 	and.w	r3, r3, #32
 8003092:	2b00      	cmp	r3, #0
 8003094:	d007      	beq.n	80030a6 <HAL_UART_IRQHandler+0x112>
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	f003 0320 	and.w	r3, r3, #32
 800309c:	2b00      	cmp	r3, #0
 800309e:	d002      	beq.n	80030a6 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 f9fb 	bl	800349c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	695b      	ldr	r3, [r3, #20]
 80030ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	bf14      	ite	ne
 80030b4:	2301      	movne	r3, #1
 80030b6:	2300      	moveq	r3, #0
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c0:	f003 0308 	and.w	r3, r3, #8
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d102      	bne.n	80030ce <HAL_UART_IRQHandler+0x13a>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d031      	beq.n	8003132 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 f946 	bl	8003360 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d023      	beq.n	800312a <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	695a      	ldr	r2, [r3, #20]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030f0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d013      	beq.n	8003122 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030fe:	4a22      	ldr	r2, [pc, #136]	; (8003188 <HAL_UART_IRQHandler+0x1f4>)
 8003100:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003106:	4618      	mov	r0, r3
 8003108:	f7fd fdfc 	bl	8000d04 <HAL_DMA_Abort_IT>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d016      	beq.n	8003140 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800311c:	4610      	mov	r0, r2
 800311e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003120:	e00e      	b.n	8003140 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f83b 	bl	800319e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003128:	e00a      	b.n	8003140 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 f837 	bl	800319e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003130:	e006      	b.n	8003140 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 f833 	bl	800319e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800313e:	e01e      	b.n	800317e <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003140:	bf00      	nop
    return;
 8003142:	e01c      	b.n	800317e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800314a:	2b00      	cmp	r3, #0
 800314c:	d008      	beq.n	8003160 <HAL_UART_IRQHandler+0x1cc>
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003154:	2b00      	cmp	r3, #0
 8003156:	d003      	beq.n	8003160 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 f932 	bl	80033c2 <UART_Transmit_IT>
    return;
 800315e:	e00f      	b.n	8003180 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00a      	beq.n	8003180 <HAL_UART_IRQHandler+0x1ec>
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003170:	2b00      	cmp	r3, #0
 8003172:	d005      	beq.n	8003180 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f000 f979 	bl	800346c <UART_EndTransmit_IT>
    return;
 800317a:	bf00      	nop
 800317c:	e000      	b.n	8003180 <HAL_UART_IRQHandler+0x1ec>
    return;
 800317e:	bf00      	nop
  }
}
 8003180:	3720      	adds	r7, #32
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	0800339b 	.word	0x0800339b

0800318c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	bc80      	pop	{r7}
 800319c:	4770      	bx	lr

0800319e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800319e:	b480      	push	{r7}
 80031a0:	b083      	sub	sp, #12
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bc80      	pop	{r7}
 80031ae:	4770      	bx	lr

080031b0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031bc:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0320 	and.w	r3, r3, #32
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d113      	bne.n	80031f4 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	695a      	ldr	r2, [r3, #20]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031e0:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68da      	ldr	r2, [r3, #12]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031f0:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80031f2:	e002      	b.n	80031fa <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	f003 f9f9 	bl	80065ec <HAL_UART_TxCpltCallback>
}
 80031fa:	bf00      	nop
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b084      	sub	sp, #16
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003210:	68f8      	ldr	r0, [r7, #12]
 8003212:	f7ff ffbb 	bl	800318c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003216:	bf00      	nop
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800321e:	b580      	push	{r7, lr}
 8003220:	b084      	sub	sp, #16
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0320 	and.w	r3, r3, #32
 8003236:	2b00      	cmp	r3, #0
 8003238:	d11e      	bne.n	8003278 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68da      	ldr	r2, [r3, #12]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800324e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	695a      	ldr	r2, [r3, #20]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f022 0201 	bic.w	r2, r2, #1
 800325e:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	695a      	ldr	r2, [r3, #20]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800326e:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2220      	movs	r2, #32
 8003274:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8003278:	68f8      	ldr	r0, [r7, #12]
 800327a:	f003 f91d 	bl	80064b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800327e:	bf00      	nop
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b084      	sub	sp, #16
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f003 f993 	bl	80065c0 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800329a:	bf00      	nop
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b084      	sub	sp, #16
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80032aa:	2300      	movs	r3, #0
 80032ac:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032be:	2b00      	cmp	r3, #0
 80032c0:	bf14      	ite	ne
 80032c2:	2301      	movne	r3, #1
 80032c4:	2300      	moveq	r3, #0
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b21      	cmp	r3, #33	; 0x21
 80032d4:	d108      	bne.n	80032e8 <UART_DMAError+0x46>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d005      	beq.n	80032e8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	2200      	movs	r2, #0
 80032e0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80032e2:	68b8      	ldr	r0, [r7, #8]
 80032e4:	f000 f827 	bl	8003336 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	bf14      	ite	ne
 80032f6:	2301      	movne	r3, #1
 80032f8:	2300      	moveq	r3, #0
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b22      	cmp	r3, #34	; 0x22
 8003308:	d108      	bne.n	800331c <UART_DMAError+0x7a>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d005      	beq.n	800331c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	2200      	movs	r2, #0
 8003314:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003316:	68b8      	ldr	r0, [r7, #8]
 8003318:	f000 f822 	bl	8003360 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003320:	f043 0210 	orr.w	r2, r3, #16
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003328:	68b8      	ldr	r0, [r7, #8]
 800332a:	f7ff ff38 	bl	800319e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800332e:	bf00      	nop
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003336:	b480      	push	{r7}
 8003338:	b083      	sub	sp, #12
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68da      	ldr	r2, [r3, #12]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800334c:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2220      	movs	r2, #32
 8003352:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8003356:	bf00      	nop
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	bc80      	pop	{r7}
 800335e:	4770      	bx	lr

08003360 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68da      	ldr	r2, [r3, #12]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003376:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	695a      	ldr	r2, [r3, #20]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f022 0201 	bic.w	r2, r2, #1
 8003386:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2220      	movs	r2, #32
 800338c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	bc80      	pop	{r7}
 8003398:	4770      	bx	lr

0800339a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b084      	sub	sp, #16
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80033b4:	68f8      	ldr	r0, [r7, #12]
 80033b6:	f7ff fef2 	bl	800319e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80033ba:	bf00      	nop
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80033c2:	b480      	push	{r7}
 80033c4:	b085      	sub	sp, #20
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b21      	cmp	r3, #33	; 0x21
 80033d4:	d144      	bne.n	8003460 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033de:	d11a      	bne.n	8003416 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	881b      	ldrh	r3, [r3, #0]
 80033ea:	461a      	mov	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033f4:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d105      	bne.n	800340a <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	1c9a      	adds	r2, r3, #2
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	621a      	str	r2, [r3, #32]
 8003408:	e00e      	b.n	8003428 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	1c5a      	adds	r2, r3, #1
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	621a      	str	r2, [r3, #32]
 8003414:	e008      	b.n	8003428 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	1c59      	adds	r1, r3, #1
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	6211      	str	r1, [r2, #32]
 8003420:	781a      	ldrb	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800342c:	b29b      	uxth	r3, r3
 800342e:	3b01      	subs	r3, #1
 8003430:	b29b      	uxth	r3, r3
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	4619      	mov	r1, r3
 8003436:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003438:	2b00      	cmp	r3, #0
 800343a:	d10f      	bne.n	800345c <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68da      	ldr	r2, [r3, #12]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800344a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68da      	ldr	r2, [r3, #12]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800345a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800345c:	2300      	movs	r3, #0
 800345e:	e000      	b.n	8003462 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003460:	2302      	movs	r3, #2
  }
}
 8003462:	4618      	mov	r0, r3
 8003464:	3714      	adds	r7, #20
 8003466:	46bd      	mov	sp, r7
 8003468:	bc80      	pop	{r7}
 800346a:	4770      	bx	lr

0800346c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68da      	ldr	r2, [r3, #12]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003482:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2220      	movs	r2, #32
 8003488:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f003 f8ad 	bl	80065ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3708      	adds	r7, #8
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2b22      	cmp	r3, #34	; 0x22
 80034ae:	d171      	bne.n	8003594 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034b8:	d123      	bne.n	8003502 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034be:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10e      	bne.n	80034e6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034de:	1c9a      	adds	r2, r3, #2
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	629a      	str	r2, [r3, #40]	; 0x28
 80034e4:	e029      	b.n	800353a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	b29a      	uxth	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fa:	1c5a      	adds	r2, r3, #1
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	629a      	str	r2, [r3, #40]	; 0x28
 8003500:	e01b      	b.n	800353a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d10a      	bne.n	8003520 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	6858      	ldr	r0, [r3, #4]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003514:	1c59      	adds	r1, r3, #1
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	6291      	str	r1, [r2, #40]	; 0x28
 800351a:	b2c2      	uxtb	r2, r0
 800351c:	701a      	strb	r2, [r3, #0]
 800351e:	e00c      	b.n	800353a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	b2da      	uxtb	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352c:	1c58      	adds	r0, r3, #1
 800352e:	6879      	ldr	r1, [r7, #4]
 8003530:	6288      	str	r0, [r1, #40]	; 0x28
 8003532:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003536:	b2d2      	uxtb	r2, r2
 8003538:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800353e:	b29b      	uxth	r3, r3
 8003540:	3b01      	subs	r3, #1
 8003542:	b29b      	uxth	r3, r3
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	4619      	mov	r1, r3
 8003548:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800354a:	2b00      	cmp	r3, #0
 800354c:	d120      	bne.n	8003590 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68da      	ldr	r2, [r3, #12]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 0220 	bic.w	r2, r2, #32
 800355c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68da      	ldr	r2, [r3, #12]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800356c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	695a      	ldr	r2, [r3, #20]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f022 0201 	bic.w	r2, r2, #1
 800357c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2220      	movs	r2, #32
 8003582:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f002 ff96 	bl	80064b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800358c:	2300      	movs	r3, #0
 800358e:	e002      	b.n	8003596 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003590:	2300      	movs	r3, #0
 8003592:	e000      	b.n	8003596 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003594:	2302      	movs	r3, #2
  }
}
 8003596:	4618      	mov	r0, r3
 8003598:	3710      	adds	r7, #16
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
	...

080035a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	68da      	ldr	r2, [r3, #12]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	689a      	ldr	r2, [r3, #8]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	431a      	orrs	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80035da:	f023 030c 	bic.w	r3, r3, #12
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	6812      	ldr	r2, [r2, #0]
 80035e2:	68f9      	ldr	r1, [r7, #12]
 80035e4:	430b      	orrs	r3, r1
 80035e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	699a      	ldr	r2, [r3, #24]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	430a      	orrs	r2, r1
 80035fc:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a52      	ldr	r2, [pc, #328]	; (800374c <UART_SetConfig+0x1ac>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d14e      	bne.n	80036a6 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003608:	f7ff fa2a 	bl	8002a60 <HAL_RCC_GetPCLK2Freq>
 800360c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800360e:	68ba      	ldr	r2, [r7, #8]
 8003610:	4613      	mov	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	4413      	add	r3, r2
 8003616:	009a      	lsls	r2, r3, #2
 8003618:	441a      	add	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	fbb2 f3f3 	udiv	r3, r2, r3
 8003624:	4a4a      	ldr	r2, [pc, #296]	; (8003750 <UART_SetConfig+0x1b0>)
 8003626:	fba2 2303 	umull	r2, r3, r2, r3
 800362a:	095b      	lsrs	r3, r3, #5
 800362c:	0119      	lsls	r1, r3, #4
 800362e:	68ba      	ldr	r2, [r7, #8]
 8003630:	4613      	mov	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4413      	add	r3, r2
 8003636:	009a      	lsls	r2, r3, #2
 8003638:	441a      	add	r2, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	fbb2 f2f3 	udiv	r2, r2, r3
 8003644:	4b42      	ldr	r3, [pc, #264]	; (8003750 <UART_SetConfig+0x1b0>)
 8003646:	fba3 0302 	umull	r0, r3, r3, r2
 800364a:	095b      	lsrs	r3, r3, #5
 800364c:	2064      	movs	r0, #100	; 0x64
 800364e:	fb00 f303 	mul.w	r3, r0, r3
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	011b      	lsls	r3, r3, #4
 8003656:	3332      	adds	r3, #50	; 0x32
 8003658:	4a3d      	ldr	r2, [pc, #244]	; (8003750 <UART_SetConfig+0x1b0>)
 800365a:	fba2 2303 	umull	r2, r3, r2, r3
 800365e:	095b      	lsrs	r3, r3, #5
 8003660:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003664:	4419      	add	r1, r3
 8003666:	68ba      	ldr	r2, [r7, #8]
 8003668:	4613      	mov	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4413      	add	r3, r2
 800366e:	009a      	lsls	r2, r3, #2
 8003670:	441a      	add	r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	fbb2 f2f3 	udiv	r2, r2, r3
 800367c:	4b34      	ldr	r3, [pc, #208]	; (8003750 <UART_SetConfig+0x1b0>)
 800367e:	fba3 0302 	umull	r0, r3, r3, r2
 8003682:	095b      	lsrs	r3, r3, #5
 8003684:	2064      	movs	r0, #100	; 0x64
 8003686:	fb00 f303 	mul.w	r3, r0, r3
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	011b      	lsls	r3, r3, #4
 800368e:	3332      	adds	r3, #50	; 0x32
 8003690:	4a2f      	ldr	r2, [pc, #188]	; (8003750 <UART_SetConfig+0x1b0>)
 8003692:	fba2 2303 	umull	r2, r3, r2, r3
 8003696:	095b      	lsrs	r3, r3, #5
 8003698:	f003 020f 	and.w	r2, r3, #15
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	440a      	add	r2, r1
 80036a2:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80036a4:	e04d      	b.n	8003742 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80036a6:	f7ff f9c7 	bl	8002a38 <HAL_RCC_GetPCLK1Freq>
 80036aa:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036ac:	68ba      	ldr	r2, [r7, #8]
 80036ae:	4613      	mov	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	4413      	add	r3, r2
 80036b4:	009a      	lsls	r2, r3, #2
 80036b6:	441a      	add	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c2:	4a23      	ldr	r2, [pc, #140]	; (8003750 <UART_SetConfig+0x1b0>)
 80036c4:	fba2 2303 	umull	r2, r3, r2, r3
 80036c8:	095b      	lsrs	r3, r3, #5
 80036ca:	0119      	lsls	r1, r3, #4
 80036cc:	68ba      	ldr	r2, [r7, #8]
 80036ce:	4613      	mov	r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	4413      	add	r3, r2
 80036d4:	009a      	lsls	r2, r3, #2
 80036d6:	441a      	add	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	fbb2 f2f3 	udiv	r2, r2, r3
 80036e2:	4b1b      	ldr	r3, [pc, #108]	; (8003750 <UART_SetConfig+0x1b0>)
 80036e4:	fba3 0302 	umull	r0, r3, r3, r2
 80036e8:	095b      	lsrs	r3, r3, #5
 80036ea:	2064      	movs	r0, #100	; 0x64
 80036ec:	fb00 f303 	mul.w	r3, r0, r3
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	011b      	lsls	r3, r3, #4
 80036f4:	3332      	adds	r3, #50	; 0x32
 80036f6:	4a16      	ldr	r2, [pc, #88]	; (8003750 <UART_SetConfig+0x1b0>)
 80036f8:	fba2 2303 	umull	r2, r3, r2, r3
 80036fc:	095b      	lsrs	r3, r3, #5
 80036fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003702:	4419      	add	r1, r3
 8003704:	68ba      	ldr	r2, [r7, #8]
 8003706:	4613      	mov	r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	4413      	add	r3, r2
 800370c:	009a      	lsls	r2, r3, #2
 800370e:	441a      	add	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	fbb2 f2f3 	udiv	r2, r2, r3
 800371a:	4b0d      	ldr	r3, [pc, #52]	; (8003750 <UART_SetConfig+0x1b0>)
 800371c:	fba3 0302 	umull	r0, r3, r3, r2
 8003720:	095b      	lsrs	r3, r3, #5
 8003722:	2064      	movs	r0, #100	; 0x64
 8003724:	fb00 f303 	mul.w	r3, r0, r3
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	011b      	lsls	r3, r3, #4
 800372c:	3332      	adds	r3, #50	; 0x32
 800372e:	4a08      	ldr	r2, [pc, #32]	; (8003750 <UART_SetConfig+0x1b0>)
 8003730:	fba2 2303 	umull	r2, r3, r2, r3
 8003734:	095b      	lsrs	r3, r3, #5
 8003736:	f003 020f 	and.w	r2, r3, #15
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	440a      	add	r2, r1
 8003740:	609a      	str	r2, [r3, #8]
}
 8003742:	bf00      	nop
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	40013800 	.word	0x40013800
 8003750:	51eb851f 	.word	0x51eb851f

08003754 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003754:	b084      	sub	sp, #16
 8003756:	b480      	push	{r7}
 8003758:	b083      	sub	sp, #12
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
 800375e:	f107 0014 	add.w	r0, r7, #20
 8003762:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	bc80      	pop	{r7}
 8003770:	b004      	add	sp, #16
 8003772:	4770      	bx	lr

08003774 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800377c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003780:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003788:	b29a      	uxth	r2, r3
 800378a:	89fb      	ldrh	r3, [r7, #14]
 800378c:	4313      	orrs	r3, r2
 800378e:	b29a      	uxth	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	3714      	adds	r7, #20
 800379c:	46bd      	mov	sp, r7
 800379e:	bc80      	pop	{r7}
 80037a0:	4770      	bx	lr

080037a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80037a2:	b480      	push	{r7}
 80037a4:	b085      	sub	sp, #20
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80037aa:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80037ae:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	b21a      	sxth	r2, r3
 80037ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80037be:	43db      	mvns	r3, r3
 80037c0:	b21b      	sxth	r3, r3
 80037c2:	4013      	ands	r3, r2
 80037c4:	b21b      	sxth	r3, r3
 80037c6:	b29a      	uxth	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3714      	adds	r7, #20
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bc80      	pop	{r7}
 80037d8:	4770      	bx	lr

080037da <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80037da:	b480      	push	{r7}
 80037dc:	b083      	sub	sp, #12
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
 80037e2:	460b      	mov	r3, r1
 80037e4:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bc80      	pop	{r7}
 80037f0:	4770      	bx	lr

080037f2 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80037f2:	b084      	sub	sp, #16
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	f107 0014 	add.w	r0, r7, #20
 8003800:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f7ff ffa5 	bl	8003774 <USB_EnableGlobalInt>

  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3708      	adds	r7, #8
 8003830:	46bd      	mov	sp, r7
 8003832:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003836:	b004      	add	sp, #16
 8003838:	4770      	bx	lr
	...

0800383c <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800383c:	b490      	push	{r4, r7}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003846:	2300      	movs	r3, #0
 8003848:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	4413      	add	r3, r2
 8003854:	881b      	ldrh	r3, [r3, #0]
 8003856:	b29b      	uxth	r3, r3
 8003858:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800385c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003860:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	78db      	ldrb	r3, [r3, #3]
 8003866:	2b03      	cmp	r3, #3
 8003868:	d819      	bhi.n	800389e <USB_ActivateEndpoint+0x62>
 800386a:	a201      	add	r2, pc, #4	; (adr r2, 8003870 <USB_ActivateEndpoint+0x34>)
 800386c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003870:	08003881 	.word	0x08003881
 8003874:	08003895 	.word	0x08003895
 8003878:	080038a5 	.word	0x080038a5
 800387c:	0800388b 	.word	0x0800388b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003880:	89bb      	ldrh	r3, [r7, #12]
 8003882:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003886:	81bb      	strh	r3, [r7, #12]
      break;
 8003888:	e00d      	b.n	80038a6 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800388a:	89bb      	ldrh	r3, [r7, #12]
 800388c:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003890:	81bb      	strh	r3, [r7, #12]
      break;
 8003892:	e008      	b.n	80038a6 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003894:	89bb      	ldrh	r3, [r7, #12]
 8003896:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800389a:	81bb      	strh	r3, [r7, #12]
      break;
 800389c:	e003      	b.n	80038a6 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	73fb      	strb	r3, [r7, #15]
      break;
 80038a2:	e000      	b.n	80038a6 <USB_ActivateEndpoint+0x6a>
      break;
 80038a4:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	441a      	add	r2, r3
 80038b0:	89bb      	ldrh	r3, [r7, #12]
 80038b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	4413      	add	r3, r2
 80038d0:	881b      	ldrh	r3, [r3, #0]
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038dc:	b29a      	uxth	r2, r3
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	4313      	orrs	r3, r2
 80038e6:	b29c      	uxth	r4, r3
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	441a      	add	r2, r3
 80038f2:	4b8a      	ldr	r3, [pc, #552]	; (8003b1c <USB_ActivateEndpoint+0x2e0>)
 80038f4:	4323      	orrs	r3, r4
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	7b1b      	ldrb	r3, [r3, #12]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f040 8112 	bne.w	8003b28 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	785b      	ldrb	r3, [r3, #1]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d067      	beq.n	80039dc <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800390c:	687c      	ldr	r4, [r7, #4]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003914:	b29b      	uxth	r3, r3
 8003916:	441c      	add	r4, r3
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	011b      	lsls	r3, r3, #4
 800391e:	4423      	add	r3, r4
 8003920:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003924:	461c      	mov	r4, r3
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	88db      	ldrh	r3, [r3, #6]
 800392a:	085b      	lsrs	r3, r3, #1
 800392c:	b29b      	uxth	r3, r3
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	b29b      	uxth	r3, r3
 8003932:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	4413      	add	r3, r2
 800393e:	881b      	ldrh	r3, [r3, #0]
 8003940:	b29c      	uxth	r4, r3
 8003942:	4623      	mov	r3, r4
 8003944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003948:	2b00      	cmp	r3, #0
 800394a:	d014      	beq.n	8003976 <USB_ActivateEndpoint+0x13a>
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	4413      	add	r3, r2
 8003956:	881b      	ldrh	r3, [r3, #0]
 8003958:	b29b      	uxth	r3, r3
 800395a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800395e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003962:	b29c      	uxth	r4, r3
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	441a      	add	r2, r3
 800396e:	4b6c      	ldr	r3, [pc, #432]	; (8003b20 <USB_ActivateEndpoint+0x2e4>)
 8003970:	4323      	orrs	r3, r4
 8003972:	b29b      	uxth	r3, r3
 8003974:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	78db      	ldrb	r3, [r3, #3]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d018      	beq.n	80039b0 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	4413      	add	r3, r2
 8003988:	881b      	ldrh	r3, [r3, #0]
 800398a:	b29b      	uxth	r3, r3
 800398c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003990:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003994:	b29c      	uxth	r4, r3
 8003996:	f084 0320 	eor.w	r3, r4, #32
 800399a:	b29c      	uxth	r4, r3
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	441a      	add	r2, r3
 80039a6:	4b5d      	ldr	r3, [pc, #372]	; (8003b1c <USB_ActivateEndpoint+0x2e0>)
 80039a8:	4323      	orrs	r3, r4
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	8013      	strh	r3, [r2, #0]
 80039ae:	e22b      	b.n	8003e08 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4413      	add	r3, r2
 80039ba:	881b      	ldrh	r3, [r3, #0]
 80039bc:	b29b      	uxth	r3, r3
 80039be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039c6:	b29c      	uxth	r4, r3
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	441a      	add	r2, r3
 80039d2:	4b52      	ldr	r3, [pc, #328]	; (8003b1c <USB_ActivateEndpoint+0x2e0>)
 80039d4:	4323      	orrs	r3, r4
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	8013      	strh	r3, [r2, #0]
 80039da:	e215      	b.n	8003e08 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80039dc:	687c      	ldr	r4, [r7, #4]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	441c      	add	r4, r3
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	011b      	lsls	r3, r3, #4
 80039ee:	4423      	add	r3, r4
 80039f0:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80039f4:	461c      	mov	r4, r3
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	88db      	ldrh	r3, [r3, #6]
 80039fa:	085b      	lsrs	r3, r3, #1
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003a04:	687c      	ldr	r4, [r7, #4]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	441c      	add	r4, r3
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	011b      	lsls	r3, r3, #4
 8003a16:	4423      	add	r3, r4
 8003a18:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003a1c:	461c      	mov	r4, r3
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d10e      	bne.n	8003a44 <USB_ActivateEndpoint+0x208>
 8003a26:	8823      	ldrh	r3, [r4, #0]
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	8023      	strh	r3, [r4, #0]
 8003a32:	8823      	ldrh	r3, [r4, #0]
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	8023      	strh	r3, [r4, #0]
 8003a42:	e02d      	b.n	8003aa0 <USB_ActivateEndpoint+0x264>
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	2b3e      	cmp	r3, #62	; 0x3e
 8003a4a:	d812      	bhi.n	8003a72 <USB_ActivateEndpoint+0x236>
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	085b      	lsrs	r3, r3, #1
 8003a52:	60bb      	str	r3, [r7, #8]
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	f003 0301 	and.w	r3, r3, #1
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d002      	beq.n	8003a66 <USB_ActivateEndpoint+0x22a>
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	3301      	adds	r3, #1
 8003a64:	60bb      	str	r3, [r7, #8]
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	029b      	lsls	r3, r3, #10
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	8023      	strh	r3, [r4, #0]
 8003a70:	e016      	b.n	8003aa0 <USB_ActivateEndpoint+0x264>
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	095b      	lsrs	r3, r3, #5
 8003a78:	60bb      	str	r3, [r7, #8]
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	f003 031f 	and.w	r3, r3, #31
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d102      	bne.n	8003a8c <USB_ActivateEndpoint+0x250>
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	60bb      	str	r3, [r7, #8]
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	029b      	lsls	r3, r3, #10
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	4413      	add	r3, r2
 8003aaa:	881b      	ldrh	r3, [r3, #0]
 8003aac:	b29c      	uxth	r4, r3
 8003aae:	4623      	mov	r3, r4
 8003ab0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d014      	beq.n	8003ae2 <USB_ActivateEndpoint+0x2a6>
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	4413      	add	r3, r2
 8003ac2:	881b      	ldrh	r3, [r3, #0]
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ace:	b29c      	uxth	r4, r3
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	441a      	add	r2, r3
 8003ada:	4b12      	ldr	r3, [pc, #72]	; (8003b24 <USB_ActivateEndpoint+0x2e8>)
 8003adc:	4323      	orrs	r3, r4
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	4413      	add	r3, r2
 8003aec:	881b      	ldrh	r3, [r3, #0]
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003af4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003af8:	b29c      	uxth	r4, r3
 8003afa:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003afe:	b29c      	uxth	r4, r3
 8003b00:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003b04:	b29c      	uxth	r4, r3
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	441a      	add	r2, r3
 8003b10:	4b02      	ldr	r3, [pc, #8]	; (8003b1c <USB_ActivateEndpoint+0x2e0>)
 8003b12:	4323      	orrs	r3, r4
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	8013      	strh	r3, [r2, #0]
 8003b18:	e176      	b.n	8003e08 <USB_ActivateEndpoint+0x5cc>
 8003b1a:	bf00      	nop
 8003b1c:	ffff8080 	.word	0xffff8080
 8003b20:	ffff80c0 	.word	0xffff80c0
 8003b24:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	4413      	add	r3, r2
 8003b32:	881b      	ldrh	r3, [r3, #0]
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b3e:	b29c      	uxth	r4, r3
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	441a      	add	r2, r3
 8003b4a:	4b96      	ldr	r3, [pc, #600]	; (8003da4 <USB_ActivateEndpoint+0x568>)
 8003b4c:	4323      	orrs	r3, r4
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003b52:	687c      	ldr	r4, [r7, #4]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	441c      	add	r4, r3
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	011b      	lsls	r3, r3, #4
 8003b64:	4423      	add	r3, r4
 8003b66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b6a:	461c      	mov	r4, r3
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	891b      	ldrh	r3, [r3, #8]
 8003b70:	085b      	lsrs	r3, r3, #1
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	005b      	lsls	r3, r3, #1
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	8023      	strh	r3, [r4, #0]
 8003b7a:	687c      	ldr	r4, [r7, #4]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	441c      	add	r4, r3
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	011b      	lsls	r3, r3, #4
 8003b8c:	4423      	add	r3, r4
 8003b8e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003b92:	461c      	mov	r4, r3
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	895b      	ldrh	r3, [r3, #10]
 8003b98:	085b      	lsrs	r3, r3, #1
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	005b      	lsls	r3, r3, #1
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	785b      	ldrb	r3, [r3, #1]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f040 8088 	bne.w	8003cbc <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	4413      	add	r3, r2
 8003bb6:	881b      	ldrh	r3, [r3, #0]
 8003bb8:	b29c      	uxth	r4, r3
 8003bba:	4623      	mov	r3, r4
 8003bbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d014      	beq.n	8003bee <USB_ActivateEndpoint+0x3b2>
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	4413      	add	r3, r2
 8003bce:	881b      	ldrh	r3, [r3, #0]
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bda:	b29c      	uxth	r4, r3
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	441a      	add	r2, r3
 8003be6:	4b70      	ldr	r3, [pc, #448]	; (8003da8 <USB_ActivateEndpoint+0x56c>)
 8003be8:	4323      	orrs	r3, r4
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	4413      	add	r3, r2
 8003bf8:	881b      	ldrh	r3, [r3, #0]
 8003bfa:	b29c      	uxth	r4, r3
 8003bfc:	4623      	mov	r3, r4
 8003bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d014      	beq.n	8003c30 <USB_ActivateEndpoint+0x3f4>
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	4413      	add	r3, r2
 8003c10:	881b      	ldrh	r3, [r3, #0]
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c1c:	b29c      	uxth	r4, r3
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	441a      	add	r2, r3
 8003c28:	4b60      	ldr	r3, [pc, #384]	; (8003dac <USB_ActivateEndpoint+0x570>)
 8003c2a:	4323      	orrs	r3, r4
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	4413      	add	r3, r2
 8003c3a:	881b      	ldrh	r3, [r3, #0]
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c46:	b29c      	uxth	r4, r3
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	441a      	add	r2, r3
 8003c52:	4b56      	ldr	r3, [pc, #344]	; (8003dac <USB_ActivateEndpoint+0x570>)
 8003c54:	4323      	orrs	r3, r4
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	4413      	add	r3, r2
 8003c64:	881b      	ldrh	r3, [r3, #0]
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c70:	b29c      	uxth	r4, r3
 8003c72:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003c76:	b29c      	uxth	r4, r3
 8003c78:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003c7c:	b29c      	uxth	r4, r3
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	441a      	add	r2, r3
 8003c88:	4b49      	ldr	r3, [pc, #292]	; (8003db0 <USB_ActivateEndpoint+0x574>)
 8003c8a:	4323      	orrs	r3, r4
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	4413      	add	r3, r2
 8003c9a:	881b      	ldrh	r3, [r3, #0]
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ca2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ca6:	b29c      	uxth	r4, r3
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	441a      	add	r2, r3
 8003cb2:	4b3f      	ldr	r3, [pc, #252]	; (8003db0 <USB_ActivateEndpoint+0x574>)
 8003cb4:	4323      	orrs	r3, r4
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	8013      	strh	r3, [r2, #0]
 8003cba:	e0a5      	b.n	8003e08 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	4413      	add	r3, r2
 8003cc6:	881b      	ldrh	r3, [r3, #0]
 8003cc8:	b29c      	uxth	r4, r3
 8003cca:	4623      	mov	r3, r4
 8003ccc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d014      	beq.n	8003cfe <USB_ActivateEndpoint+0x4c2>
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	4413      	add	r3, r2
 8003cde:	881b      	ldrh	r3, [r3, #0]
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cea:	b29c      	uxth	r4, r3
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	441a      	add	r2, r3
 8003cf6:	4b2c      	ldr	r3, [pc, #176]	; (8003da8 <USB_ActivateEndpoint+0x56c>)
 8003cf8:	4323      	orrs	r3, r4
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	4413      	add	r3, r2
 8003d08:	881b      	ldrh	r3, [r3, #0]
 8003d0a:	b29c      	uxth	r4, r3
 8003d0c:	4623      	mov	r3, r4
 8003d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d014      	beq.n	8003d40 <USB_ActivateEndpoint+0x504>
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	4413      	add	r3, r2
 8003d20:	881b      	ldrh	r3, [r3, #0]
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d2c:	b29c      	uxth	r4, r3
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	441a      	add	r2, r3
 8003d38:	4b1c      	ldr	r3, [pc, #112]	; (8003dac <USB_ActivateEndpoint+0x570>)
 8003d3a:	4323      	orrs	r3, r4
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	4413      	add	r3, r2
 8003d4a:	881b      	ldrh	r3, [r3, #0]
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d56:	b29c      	uxth	r4, r3
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	441a      	add	r2, r3
 8003d62:	4b11      	ldr	r3, [pc, #68]	; (8003da8 <USB_ActivateEndpoint+0x56c>)
 8003d64:	4323      	orrs	r3, r4
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	78db      	ldrb	r3, [r3, #3]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d020      	beq.n	8003db4 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	4413      	add	r3, r2
 8003d7c:	881b      	ldrh	r3, [r3, #0]
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d88:	b29c      	uxth	r4, r3
 8003d8a:	f084 0320 	eor.w	r3, r4, #32
 8003d8e:	b29c      	uxth	r4, r3
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	441a      	add	r2, r3
 8003d9a:	4b05      	ldr	r3, [pc, #20]	; (8003db0 <USB_ActivateEndpoint+0x574>)
 8003d9c:	4323      	orrs	r3, r4
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	8013      	strh	r3, [r2, #0]
 8003da2:	e01c      	b.n	8003dde <USB_ActivateEndpoint+0x5a2>
 8003da4:	ffff8180 	.word	0xffff8180
 8003da8:	ffffc080 	.word	0xffffc080
 8003dac:	ffff80c0 	.word	0xffff80c0
 8003db0:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	4413      	add	r3, r2
 8003dbe:	881b      	ldrh	r3, [r3, #0]
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dca:	b29c      	uxth	r4, r3
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	441a      	add	r2, r3
 8003dd6:	4b0f      	ldr	r3, [pc, #60]	; (8003e14 <USB_ActivateEndpoint+0x5d8>)
 8003dd8:	4323      	orrs	r3, r4
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	4413      	add	r3, r2
 8003de8:	881b      	ldrh	r3, [r3, #0]
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003df0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003df4:	b29c      	uxth	r4, r3
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	441a      	add	r2, r3
 8003e00:	4b04      	ldr	r3, [pc, #16]	; (8003e14 <USB_ActivateEndpoint+0x5d8>)
 8003e02:	4323      	orrs	r3, r4
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bc90      	pop	{r4, r7}
 8003e12:	4770      	bx	lr
 8003e14:	ffff8080 	.word	0xffff8080

08003e18 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003e18:	b490      	push	{r4, r7}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	7b1b      	ldrb	r3, [r3, #12]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d171      	bne.n	8003f0e <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	785b      	ldrb	r3, [r3, #1]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d036      	beq.n	8003ea0 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	4413      	add	r3, r2
 8003e3c:	881b      	ldrh	r3, [r3, #0]
 8003e3e:	b29c      	uxth	r4, r3
 8003e40:	4623      	mov	r3, r4
 8003e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d014      	beq.n	8003e74 <USB_DeactivateEndpoint+0x5c>
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	4413      	add	r3, r2
 8003e54:	881b      	ldrh	r3, [r3, #0]
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e60:	b29c      	uxth	r4, r3
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	441a      	add	r2, r3
 8003e6c:	4b6b      	ldr	r3, [pc, #428]	; (800401c <USB_DeactivateEndpoint+0x204>)
 8003e6e:	4323      	orrs	r3, r4
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	4413      	add	r3, r2
 8003e7e:	881b      	ldrh	r3, [r3, #0]
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e8a:	b29c      	uxth	r4, r3
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	441a      	add	r2, r3
 8003e96:	4b62      	ldr	r3, [pc, #392]	; (8004020 <USB_DeactivateEndpoint+0x208>)
 8003e98:	4323      	orrs	r3, r4
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	8013      	strh	r3, [r2, #0]
 8003e9e:	e144      	b.n	800412a <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	4413      	add	r3, r2
 8003eaa:	881b      	ldrh	r3, [r3, #0]
 8003eac:	b29c      	uxth	r4, r3
 8003eae:	4623      	mov	r3, r4
 8003eb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d014      	beq.n	8003ee2 <USB_DeactivateEndpoint+0xca>
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4413      	add	r3, r2
 8003ec2:	881b      	ldrh	r3, [r3, #0]
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ece:	b29c      	uxth	r4, r3
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	441a      	add	r2, r3
 8003eda:	4b52      	ldr	r3, [pc, #328]	; (8004024 <USB_DeactivateEndpoint+0x20c>)
 8003edc:	4323      	orrs	r3, r4
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	4413      	add	r3, r2
 8003eec:	881b      	ldrh	r3, [r3, #0]
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ef4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ef8:	b29c      	uxth	r4, r3
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	441a      	add	r2, r3
 8003f04:	4b46      	ldr	r3, [pc, #280]	; (8004020 <USB_DeactivateEndpoint+0x208>)
 8003f06:	4323      	orrs	r3, r4
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	8013      	strh	r3, [r2, #0]
 8003f0c:	e10d      	b.n	800412a <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	785b      	ldrb	r3, [r3, #1]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	f040 8088 	bne.w	8004028 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	4413      	add	r3, r2
 8003f22:	881b      	ldrh	r3, [r3, #0]
 8003f24:	b29c      	uxth	r4, r3
 8003f26:	4623      	mov	r3, r4
 8003f28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d014      	beq.n	8003f5a <USB_DeactivateEndpoint+0x142>
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	4413      	add	r3, r2
 8003f3a:	881b      	ldrh	r3, [r3, #0]
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f46:	b29c      	uxth	r4, r3
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	441a      	add	r2, r3
 8003f52:	4b34      	ldr	r3, [pc, #208]	; (8004024 <USB_DeactivateEndpoint+0x20c>)
 8003f54:	4323      	orrs	r3, r4
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	4413      	add	r3, r2
 8003f64:	881b      	ldrh	r3, [r3, #0]
 8003f66:	b29c      	uxth	r4, r3
 8003f68:	4623      	mov	r3, r4
 8003f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d014      	beq.n	8003f9c <USB_DeactivateEndpoint+0x184>
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	4413      	add	r3, r2
 8003f7c:	881b      	ldrh	r3, [r3, #0]
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f88:	b29c      	uxth	r4, r3
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	441a      	add	r2, r3
 8003f94:	4b21      	ldr	r3, [pc, #132]	; (800401c <USB_DeactivateEndpoint+0x204>)
 8003f96:	4323      	orrs	r3, r4
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	4413      	add	r3, r2
 8003fa6:	881b      	ldrh	r3, [r3, #0]
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fb2:	b29c      	uxth	r4, r3
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	441a      	add	r2, r3
 8003fbe:	4b17      	ldr	r3, [pc, #92]	; (800401c <USB_DeactivateEndpoint+0x204>)
 8003fc0:	4323      	orrs	r3, r4
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	4413      	add	r3, r2
 8003fd0:	881b      	ldrh	r3, [r3, #0]
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fdc:	b29c      	uxth	r4, r3
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	441a      	add	r2, r3
 8003fe8:	4b0d      	ldr	r3, [pc, #52]	; (8004020 <USB_DeactivateEndpoint+0x208>)
 8003fea:	4323      	orrs	r3, r4
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	4413      	add	r3, r2
 8003ffa:	881b      	ldrh	r3, [r3, #0]
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004002:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004006:	b29c      	uxth	r4, r3
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	441a      	add	r2, r3
 8004012:	4b03      	ldr	r3, [pc, #12]	; (8004020 <USB_DeactivateEndpoint+0x208>)
 8004014:	4323      	orrs	r3, r4
 8004016:	b29b      	uxth	r3, r3
 8004018:	8013      	strh	r3, [r2, #0]
 800401a:	e086      	b.n	800412a <USB_DeactivateEndpoint+0x312>
 800401c:	ffff80c0 	.word	0xffff80c0
 8004020:	ffff8080 	.word	0xffff8080
 8004024:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	4413      	add	r3, r2
 8004032:	881b      	ldrh	r3, [r3, #0]
 8004034:	b29c      	uxth	r4, r3
 8004036:	4623      	mov	r3, r4
 8004038:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d014      	beq.n	800406a <USB_DeactivateEndpoint+0x252>
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	4413      	add	r3, r2
 800404a:	881b      	ldrh	r3, [r3, #0]
 800404c:	b29b      	uxth	r3, r3
 800404e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004056:	b29c      	uxth	r4, r3
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	441a      	add	r2, r3
 8004062:	4b35      	ldr	r3, [pc, #212]	; (8004138 <USB_DeactivateEndpoint+0x320>)
 8004064:	4323      	orrs	r3, r4
 8004066:	b29b      	uxth	r3, r3
 8004068:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	4413      	add	r3, r2
 8004074:	881b      	ldrh	r3, [r3, #0]
 8004076:	b29c      	uxth	r4, r3
 8004078:	4623      	mov	r3, r4
 800407a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800407e:	2b00      	cmp	r3, #0
 8004080:	d014      	beq.n	80040ac <USB_DeactivateEndpoint+0x294>
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	4413      	add	r3, r2
 800408c:	881b      	ldrh	r3, [r3, #0]
 800408e:	b29b      	uxth	r3, r3
 8004090:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004094:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004098:	b29c      	uxth	r4, r3
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	441a      	add	r2, r3
 80040a4:	4b25      	ldr	r3, [pc, #148]	; (800413c <USB_DeactivateEndpoint+0x324>)
 80040a6:	4323      	orrs	r3, r4
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	4413      	add	r3, r2
 80040b6:	881b      	ldrh	r3, [r3, #0]
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040c2:	b29c      	uxth	r4, r3
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	441a      	add	r2, r3
 80040ce:	4b1a      	ldr	r3, [pc, #104]	; (8004138 <USB_DeactivateEndpoint+0x320>)
 80040d0:	4323      	orrs	r3, r4
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	4413      	add	r3, r2
 80040e0:	881b      	ldrh	r3, [r3, #0]
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040ec:	b29c      	uxth	r4, r3
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	441a      	add	r2, r3
 80040f8:	4b11      	ldr	r3, [pc, #68]	; (8004140 <USB_DeactivateEndpoint+0x328>)
 80040fa:	4323      	orrs	r3, r4
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	4413      	add	r3, r2
 800410a:	881b      	ldrh	r3, [r3, #0]
 800410c:	b29b      	uxth	r3, r3
 800410e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004116:	b29c      	uxth	r4, r3
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	441a      	add	r2, r3
 8004122:	4b07      	ldr	r3, [pc, #28]	; (8004140 <USB_DeactivateEndpoint+0x328>)
 8004124:	4323      	orrs	r3, r4
 8004126:	b29b      	uxth	r3, r3
 8004128:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3708      	adds	r7, #8
 8004130:	46bd      	mov	sp, r7
 8004132:	bc90      	pop	{r4, r7}
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	ffffc080 	.word	0xffffc080
 800413c:	ffff80c0 	.word	0xffff80c0
 8004140:	ffff8080 	.word	0xffff8080

08004144 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004144:	b590      	push	{r4, r7, lr}
 8004146:	b08d      	sub	sp, #52	; 0x34
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	785b      	ldrb	r3, [r3, #1]
 8004152:	2b01      	cmp	r3, #1
 8004154:	f040 8160 	bne.w	8004418 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	699a      	ldr	r2, [r3, #24]
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	429a      	cmp	r2, r3
 8004162:	d909      	bls.n	8004178 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	699a      	ldr	r2, [r3, #24]
 800416e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004170:	1ad2      	subs	r2, r2, r3
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	619a      	str	r2, [r3, #24]
 8004176:	e005      	b.n	8004184 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	2200      	movs	r2, #0
 8004182:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	7b1b      	ldrb	r3, [r3, #12]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d119      	bne.n	80041c0 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	6959      	ldr	r1, [r3, #20]
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	88da      	ldrh	r2, [r3, #6]
 8004194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004196:	b29b      	uxth	r3, r3
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 fba2 	bl	80048e2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800419e:	687c      	ldr	r4, [r7, #4]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	441c      	add	r4, r3
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	011b      	lsls	r3, r3, #4
 80041b0:	4423      	add	r3, r4
 80041b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80041b6:	461c      	mov	r4, r3
 80041b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	8023      	strh	r3, [r4, #0]
 80041be:	e10f      	b.n	80043e0 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	4413      	add	r3, r2
 80041ca:	881b      	ldrh	r3, [r3, #0]
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d065      	beq.n	80042a2 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80041d6:	687c      	ldr	r4, [r7, #4]
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	785b      	ldrb	r3, [r3, #1]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d148      	bne.n	8004272 <USB_EPStartXfer+0x12e>
 80041e0:	687c      	ldr	r4, [r7, #4]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	441c      	add	r4, r3
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	011b      	lsls	r3, r3, #4
 80041f2:	4423      	add	r3, r4
 80041f4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80041f8:	461c      	mov	r4, r3
 80041fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d10e      	bne.n	800421e <USB_EPStartXfer+0xda>
 8004200:	8823      	ldrh	r3, [r4, #0]
 8004202:	b29b      	uxth	r3, r3
 8004204:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004208:	b29b      	uxth	r3, r3
 800420a:	8023      	strh	r3, [r4, #0]
 800420c:	8823      	ldrh	r3, [r4, #0]
 800420e:	b29b      	uxth	r3, r3
 8004210:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004214:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004218:	b29b      	uxth	r3, r3
 800421a:	8023      	strh	r3, [r4, #0]
 800421c:	e03d      	b.n	800429a <USB_EPStartXfer+0x156>
 800421e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004220:	2b3e      	cmp	r3, #62	; 0x3e
 8004222:	d810      	bhi.n	8004246 <USB_EPStartXfer+0x102>
 8004224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004226:	085b      	lsrs	r3, r3, #1
 8004228:	627b      	str	r3, [r7, #36]	; 0x24
 800422a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422c:	f003 0301 	and.w	r3, r3, #1
 8004230:	2b00      	cmp	r3, #0
 8004232:	d002      	beq.n	800423a <USB_EPStartXfer+0xf6>
 8004234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004236:	3301      	adds	r3, #1
 8004238:	627b      	str	r3, [r7, #36]	; 0x24
 800423a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423c:	b29b      	uxth	r3, r3
 800423e:	029b      	lsls	r3, r3, #10
 8004240:	b29b      	uxth	r3, r3
 8004242:	8023      	strh	r3, [r4, #0]
 8004244:	e029      	b.n	800429a <USB_EPStartXfer+0x156>
 8004246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004248:	095b      	lsrs	r3, r3, #5
 800424a:	627b      	str	r3, [r7, #36]	; 0x24
 800424c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800424e:	f003 031f 	and.w	r3, r3, #31
 8004252:	2b00      	cmp	r3, #0
 8004254:	d102      	bne.n	800425c <USB_EPStartXfer+0x118>
 8004256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004258:	3b01      	subs	r3, #1
 800425a:	627b      	str	r3, [r7, #36]	; 0x24
 800425c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425e:	b29b      	uxth	r3, r3
 8004260:	029b      	lsls	r3, r3, #10
 8004262:	b29b      	uxth	r3, r3
 8004264:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004268:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800426c:	b29b      	uxth	r3, r3
 800426e:	8023      	strh	r3, [r4, #0]
 8004270:	e013      	b.n	800429a <USB_EPStartXfer+0x156>
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	785b      	ldrb	r3, [r3, #1]
 8004276:	2b01      	cmp	r3, #1
 8004278:	d10f      	bne.n	800429a <USB_EPStartXfer+0x156>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004280:	b29b      	uxth	r3, r3
 8004282:	441c      	add	r4, r3
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	011b      	lsls	r3, r3, #4
 800428a:	4423      	add	r3, r4
 800428c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004290:	60fb      	str	r3, [r7, #12]
 8004292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004294:	b29a      	uxth	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	895b      	ldrh	r3, [r3, #10]
 800429e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80042a0:	e063      	b.n	800436a <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	785b      	ldrb	r3, [r3, #1]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d148      	bne.n	800433c <USB_EPStartXfer+0x1f8>
 80042aa:	687c      	ldr	r4, [r7, #4]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	441c      	add	r4, r3
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	011b      	lsls	r3, r3, #4
 80042bc:	4423      	add	r3, r4
 80042be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80042c2:	461c      	mov	r4, r3
 80042c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d10e      	bne.n	80042e8 <USB_EPStartXfer+0x1a4>
 80042ca:	8823      	ldrh	r3, [r4, #0]
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	8023      	strh	r3, [r4, #0]
 80042d6:	8823      	ldrh	r3, [r4, #0]
 80042d8:	b29b      	uxth	r3, r3
 80042da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	8023      	strh	r3, [r4, #0]
 80042e6:	e03d      	b.n	8004364 <USB_EPStartXfer+0x220>
 80042e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ea:	2b3e      	cmp	r3, #62	; 0x3e
 80042ec:	d810      	bhi.n	8004310 <USB_EPStartXfer+0x1cc>
 80042ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f0:	085b      	lsrs	r3, r3, #1
 80042f2:	623b      	str	r3, [r7, #32]
 80042f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d002      	beq.n	8004304 <USB_EPStartXfer+0x1c0>
 80042fe:	6a3b      	ldr	r3, [r7, #32]
 8004300:	3301      	adds	r3, #1
 8004302:	623b      	str	r3, [r7, #32]
 8004304:	6a3b      	ldr	r3, [r7, #32]
 8004306:	b29b      	uxth	r3, r3
 8004308:	029b      	lsls	r3, r3, #10
 800430a:	b29b      	uxth	r3, r3
 800430c:	8023      	strh	r3, [r4, #0]
 800430e:	e029      	b.n	8004364 <USB_EPStartXfer+0x220>
 8004310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004312:	095b      	lsrs	r3, r3, #5
 8004314:	623b      	str	r3, [r7, #32]
 8004316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004318:	f003 031f 	and.w	r3, r3, #31
 800431c:	2b00      	cmp	r3, #0
 800431e:	d102      	bne.n	8004326 <USB_EPStartXfer+0x1e2>
 8004320:	6a3b      	ldr	r3, [r7, #32]
 8004322:	3b01      	subs	r3, #1
 8004324:	623b      	str	r3, [r7, #32]
 8004326:	6a3b      	ldr	r3, [r7, #32]
 8004328:	b29b      	uxth	r3, r3
 800432a:	029b      	lsls	r3, r3, #10
 800432c:	b29b      	uxth	r3, r3
 800432e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004332:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004336:	b29b      	uxth	r3, r3
 8004338:	8023      	strh	r3, [r4, #0]
 800433a:	e013      	b.n	8004364 <USB_EPStartXfer+0x220>
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	785b      	ldrb	r3, [r3, #1]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d10f      	bne.n	8004364 <USB_EPStartXfer+0x220>
 8004344:	687c      	ldr	r4, [r7, #4]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800434c:	b29b      	uxth	r3, r3
 800434e:	441c      	add	r4, r3
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	011b      	lsls	r3, r3, #4
 8004356:	4423      	add	r3, r4
 8004358:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800435c:	461c      	mov	r4, r3
 800435e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004360:	b29b      	uxth	r3, r3
 8004362:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	891b      	ldrh	r3, [r3, #8]
 8004368:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	6959      	ldr	r1, [r3, #20]
 800436e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004370:	b29b      	uxth	r3, r3
 8004372:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f000 fab4 	bl	80048e2 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	785b      	ldrb	r3, [r3, #1]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d115      	bne.n	80043ae <USB_EPStartXfer+0x26a>
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	4413      	add	r3, r2
 800438c:	881b      	ldrh	r3, [r3, #0]
 800438e:	b29b      	uxth	r3, r3
 8004390:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004394:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004398:	b29c      	uxth	r4, r3
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	441a      	add	r2, r3
 80043a4:	4b9a      	ldr	r3, [pc, #616]	; (8004610 <USB_EPStartXfer+0x4cc>)
 80043a6:	4323      	orrs	r3, r4
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	8013      	strh	r3, [r2, #0]
 80043ac:	e018      	b.n	80043e0 <USB_EPStartXfer+0x29c>
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	785b      	ldrb	r3, [r3, #1]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d114      	bne.n	80043e0 <USB_EPStartXfer+0x29c>
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	4413      	add	r3, r2
 80043c0:	881b      	ldrh	r3, [r3, #0]
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043cc:	b29c      	uxth	r4, r3
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	441a      	add	r2, r3
 80043d8:	4b8e      	ldr	r3, [pc, #568]	; (8004614 <USB_EPStartXfer+0x4d0>)
 80043da:	4323      	orrs	r3, r4
 80043dc:	b29b      	uxth	r3, r3
 80043de:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	4413      	add	r3, r2
 80043ea:	881b      	ldrh	r3, [r3, #0]
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043f6:	b29c      	uxth	r4, r3
 80043f8:	f084 0310 	eor.w	r3, r4, #16
 80043fc:	b29c      	uxth	r4, r3
 80043fe:	f084 0320 	eor.w	r3, r4, #32
 8004402:	b29c      	uxth	r4, r3
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	441a      	add	r2, r3
 800440e:	4b82      	ldr	r3, [pc, #520]	; (8004618 <USB_EPStartXfer+0x4d4>)
 8004410:	4323      	orrs	r3, r4
 8004412:	b29b      	uxth	r3, r3
 8004414:	8013      	strh	r3, [r2, #0]
 8004416:	e146      	b.n	80046a6 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	699a      	ldr	r2, [r3, #24]
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	429a      	cmp	r2, r3
 8004422:	d909      	bls.n	8004438 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	699a      	ldr	r2, [r3, #24]
 800442e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004430:	1ad2      	subs	r2, r2, r3
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	619a      	str	r2, [r3, #24]
 8004436:	e005      	b.n	8004444 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	2200      	movs	r2, #0
 8004442:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	7b1b      	ldrb	r3, [r3, #12]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d148      	bne.n	80044de <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800444c:	687c      	ldr	r4, [r7, #4]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004454:	b29b      	uxth	r3, r3
 8004456:	441c      	add	r4, r3
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	011b      	lsls	r3, r3, #4
 800445e:	4423      	add	r3, r4
 8004460:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004464:	461c      	mov	r4, r3
 8004466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004468:	2b00      	cmp	r3, #0
 800446a:	d10e      	bne.n	800448a <USB_EPStartXfer+0x346>
 800446c:	8823      	ldrh	r3, [r4, #0]
 800446e:	b29b      	uxth	r3, r3
 8004470:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004474:	b29b      	uxth	r3, r3
 8004476:	8023      	strh	r3, [r4, #0]
 8004478:	8823      	ldrh	r3, [r4, #0]
 800447a:	b29b      	uxth	r3, r3
 800447c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004480:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004484:	b29b      	uxth	r3, r3
 8004486:	8023      	strh	r3, [r4, #0]
 8004488:	e0f2      	b.n	8004670 <USB_EPStartXfer+0x52c>
 800448a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448c:	2b3e      	cmp	r3, #62	; 0x3e
 800448e:	d810      	bhi.n	80044b2 <USB_EPStartXfer+0x36e>
 8004490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004492:	085b      	lsrs	r3, r3, #1
 8004494:	61fb      	str	r3, [r7, #28]
 8004496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004498:	f003 0301 	and.w	r3, r3, #1
 800449c:	2b00      	cmp	r3, #0
 800449e:	d002      	beq.n	80044a6 <USB_EPStartXfer+0x362>
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	3301      	adds	r3, #1
 80044a4:	61fb      	str	r3, [r7, #28]
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	029b      	lsls	r3, r3, #10
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	8023      	strh	r3, [r4, #0]
 80044b0:	e0de      	b.n	8004670 <USB_EPStartXfer+0x52c>
 80044b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b4:	095b      	lsrs	r3, r3, #5
 80044b6:	61fb      	str	r3, [r7, #28]
 80044b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ba:	f003 031f 	and.w	r3, r3, #31
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d102      	bne.n	80044c8 <USB_EPStartXfer+0x384>
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	3b01      	subs	r3, #1
 80044c6:	61fb      	str	r3, [r7, #28]
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	029b      	lsls	r3, r3, #10
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044d8:	b29b      	uxth	r3, r3
 80044da:	8023      	strh	r3, [r4, #0]
 80044dc:	e0c8      	b.n	8004670 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	785b      	ldrb	r3, [r3, #1]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d148      	bne.n	8004578 <USB_EPStartXfer+0x434>
 80044e6:	687c      	ldr	r4, [r7, #4]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	441c      	add	r4, r3
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	011b      	lsls	r3, r3, #4
 80044f8:	4423      	add	r3, r4
 80044fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80044fe:	461c      	mov	r4, r3
 8004500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10e      	bne.n	8004524 <USB_EPStartXfer+0x3e0>
 8004506:	8823      	ldrh	r3, [r4, #0]
 8004508:	b29b      	uxth	r3, r3
 800450a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800450e:	b29b      	uxth	r3, r3
 8004510:	8023      	strh	r3, [r4, #0]
 8004512:	8823      	ldrh	r3, [r4, #0]
 8004514:	b29b      	uxth	r3, r3
 8004516:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800451a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800451e:	b29b      	uxth	r3, r3
 8004520:	8023      	strh	r3, [r4, #0]
 8004522:	e03d      	b.n	80045a0 <USB_EPStartXfer+0x45c>
 8004524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004526:	2b3e      	cmp	r3, #62	; 0x3e
 8004528:	d810      	bhi.n	800454c <USB_EPStartXfer+0x408>
 800452a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452c:	085b      	lsrs	r3, r3, #1
 800452e:	61bb      	str	r3, [r7, #24]
 8004530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	2b00      	cmp	r3, #0
 8004538:	d002      	beq.n	8004540 <USB_EPStartXfer+0x3fc>
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	3301      	adds	r3, #1
 800453e:	61bb      	str	r3, [r7, #24]
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	b29b      	uxth	r3, r3
 8004544:	029b      	lsls	r3, r3, #10
 8004546:	b29b      	uxth	r3, r3
 8004548:	8023      	strh	r3, [r4, #0]
 800454a:	e029      	b.n	80045a0 <USB_EPStartXfer+0x45c>
 800454c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800454e:	095b      	lsrs	r3, r3, #5
 8004550:	61bb      	str	r3, [r7, #24]
 8004552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004554:	f003 031f 	and.w	r3, r3, #31
 8004558:	2b00      	cmp	r3, #0
 800455a:	d102      	bne.n	8004562 <USB_EPStartXfer+0x41e>
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	3b01      	subs	r3, #1
 8004560:	61bb      	str	r3, [r7, #24]
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	b29b      	uxth	r3, r3
 8004566:	029b      	lsls	r3, r3, #10
 8004568:	b29b      	uxth	r3, r3
 800456a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800456e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004572:	b29b      	uxth	r3, r3
 8004574:	8023      	strh	r3, [r4, #0]
 8004576:	e013      	b.n	80045a0 <USB_EPStartXfer+0x45c>
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	785b      	ldrb	r3, [r3, #1]
 800457c:	2b01      	cmp	r3, #1
 800457e:	d10f      	bne.n	80045a0 <USB_EPStartXfer+0x45c>
 8004580:	687c      	ldr	r4, [r7, #4]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004588:	b29b      	uxth	r3, r3
 800458a:	441c      	add	r4, r3
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	011b      	lsls	r3, r3, #4
 8004592:	4423      	add	r3, r4
 8004594:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004598:	461c      	mov	r4, r3
 800459a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800459c:	b29b      	uxth	r3, r3
 800459e:	8023      	strh	r3, [r4, #0]
 80045a0:	687c      	ldr	r4, [r7, #4]
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	785b      	ldrb	r3, [r3, #1]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d14e      	bne.n	8004648 <USB_EPStartXfer+0x504>
 80045aa:	687c      	ldr	r4, [r7, #4]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	441c      	add	r4, r3
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	011b      	lsls	r3, r3, #4
 80045bc:	4423      	add	r3, r4
 80045be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80045c2:	461c      	mov	r4, r3
 80045c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d10e      	bne.n	80045e8 <USB_EPStartXfer+0x4a4>
 80045ca:	8823      	ldrh	r3, [r4, #0]
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	8023      	strh	r3, [r4, #0]
 80045d6:	8823      	ldrh	r3, [r4, #0]
 80045d8:	b29b      	uxth	r3, r3
 80045da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	8023      	strh	r3, [r4, #0]
 80045e6:	e043      	b.n	8004670 <USB_EPStartXfer+0x52c>
 80045e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ea:	2b3e      	cmp	r3, #62	; 0x3e
 80045ec:	d816      	bhi.n	800461c <USB_EPStartXfer+0x4d8>
 80045ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f0:	085b      	lsrs	r3, r3, #1
 80045f2:	617b      	str	r3, [r7, #20]
 80045f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f6:	f003 0301 	and.w	r3, r3, #1
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d002      	beq.n	8004604 <USB_EPStartXfer+0x4c0>
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	3301      	adds	r3, #1
 8004602:	617b      	str	r3, [r7, #20]
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	b29b      	uxth	r3, r3
 8004608:	029b      	lsls	r3, r3, #10
 800460a:	b29b      	uxth	r3, r3
 800460c:	8023      	strh	r3, [r4, #0]
 800460e:	e02f      	b.n	8004670 <USB_EPStartXfer+0x52c>
 8004610:	ffff80c0 	.word	0xffff80c0
 8004614:	ffffc080 	.word	0xffffc080
 8004618:	ffff8080 	.word	0xffff8080
 800461c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800461e:	095b      	lsrs	r3, r3, #5
 8004620:	617b      	str	r3, [r7, #20]
 8004622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004624:	f003 031f 	and.w	r3, r3, #31
 8004628:	2b00      	cmp	r3, #0
 800462a:	d102      	bne.n	8004632 <USB_EPStartXfer+0x4ee>
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	3b01      	subs	r3, #1
 8004630:	617b      	str	r3, [r7, #20]
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	b29b      	uxth	r3, r3
 8004636:	029b      	lsls	r3, r3, #10
 8004638:	b29b      	uxth	r3, r3
 800463a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800463e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004642:	b29b      	uxth	r3, r3
 8004644:	8023      	strh	r3, [r4, #0]
 8004646:	e013      	b.n	8004670 <USB_EPStartXfer+0x52c>
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	785b      	ldrb	r3, [r3, #1]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d10f      	bne.n	8004670 <USB_EPStartXfer+0x52c>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004656:	b29b      	uxth	r3, r3
 8004658:	441c      	add	r4, r3
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	011b      	lsls	r3, r3, #4
 8004660:	4423      	add	r3, r4
 8004662:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004666:	613b      	str	r3, [r7, #16]
 8004668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800466a:	b29a      	uxth	r2, r3
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	4413      	add	r3, r2
 800467a:	881b      	ldrh	r3, [r3, #0]
 800467c:	b29b      	uxth	r3, r3
 800467e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004686:	b29c      	uxth	r4, r3
 8004688:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800468c:	b29c      	uxth	r4, r3
 800468e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004692:	b29c      	uxth	r4, r3
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	441a      	add	r2, r3
 800469e:	4b04      	ldr	r3, [pc, #16]	; (80046b0 <USB_EPStartXfer+0x56c>)
 80046a0:	4323      	orrs	r3, r4
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3734      	adds	r7, #52	; 0x34
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd90      	pop	{r4, r7, pc}
 80046b0:	ffff8080 	.word	0xffff8080

080046b4 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80046b4:	b490      	push	{r4, r7}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	785b      	ldrb	r3, [r3, #1]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d018      	beq.n	80046f8 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4413      	add	r3, r2
 80046d0:	881b      	ldrh	r3, [r3, #0]
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046dc:	b29c      	uxth	r4, r3
 80046de:	f084 0310 	eor.w	r3, r4, #16
 80046e2:	b29c      	uxth	r4, r3
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	441a      	add	r2, r3
 80046ee:	4b11      	ldr	r3, [pc, #68]	; (8004734 <USB_EPSetStall+0x80>)
 80046f0:	4323      	orrs	r3, r4
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	8013      	strh	r3, [r2, #0]
 80046f6:	e017      	b.n	8004728 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	4413      	add	r3, r2
 8004702:	881b      	ldrh	r3, [r3, #0]
 8004704:	b29b      	uxth	r3, r3
 8004706:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800470a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800470e:	b29c      	uxth	r4, r3
 8004710:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004714:	b29c      	uxth	r4, r3
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	441a      	add	r2, r3
 8004720:	4b04      	ldr	r3, [pc, #16]	; (8004734 <USB_EPSetStall+0x80>)
 8004722:	4323      	orrs	r3, r4
 8004724:	b29b      	uxth	r3, r3
 8004726:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3708      	adds	r7, #8
 800472e:	46bd      	mov	sp, r7
 8004730:	bc90      	pop	{r4, r7}
 8004732:	4770      	bx	lr
 8004734:	ffff8080 	.word	0xffff8080

08004738 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004738:	b490      	push	{r4, r7}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	7b1b      	ldrb	r3, [r3, #12]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d17d      	bne.n	8004846 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	785b      	ldrb	r3, [r3, #1]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d03d      	beq.n	80047ce <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	4413      	add	r3, r2
 800475c:	881b      	ldrh	r3, [r3, #0]
 800475e:	b29c      	uxth	r4, r3
 8004760:	4623      	mov	r3, r4
 8004762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004766:	2b00      	cmp	r3, #0
 8004768:	d014      	beq.n	8004794 <USB_EPClearStall+0x5c>
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	4413      	add	r3, r2
 8004774:	881b      	ldrh	r3, [r3, #0]
 8004776:	b29b      	uxth	r3, r3
 8004778:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800477c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004780:	b29c      	uxth	r4, r3
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	441a      	add	r2, r3
 800478c:	4b31      	ldr	r3, [pc, #196]	; (8004854 <USB_EPClearStall+0x11c>)
 800478e:	4323      	orrs	r3, r4
 8004790:	b29b      	uxth	r3, r3
 8004792:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	78db      	ldrb	r3, [r3, #3]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d054      	beq.n	8004846 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	4413      	add	r3, r2
 80047a6:	881b      	ldrh	r3, [r3, #0]
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047b2:	b29c      	uxth	r4, r3
 80047b4:	f084 0320 	eor.w	r3, r4, #32
 80047b8:	b29c      	uxth	r4, r3
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	441a      	add	r2, r3
 80047c4:	4b24      	ldr	r3, [pc, #144]	; (8004858 <USB_EPClearStall+0x120>)
 80047c6:	4323      	orrs	r3, r4
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	8013      	strh	r3, [r2, #0]
 80047cc:	e03b      	b.n	8004846 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	4413      	add	r3, r2
 80047d8:	881b      	ldrh	r3, [r3, #0]
 80047da:	b29c      	uxth	r4, r3
 80047dc:	4623      	mov	r3, r4
 80047de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d014      	beq.n	8004810 <USB_EPClearStall+0xd8>
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	4413      	add	r3, r2
 80047f0:	881b      	ldrh	r3, [r3, #0]
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047fc:	b29c      	uxth	r4, r3
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	441a      	add	r2, r3
 8004808:	4b14      	ldr	r3, [pc, #80]	; (800485c <USB_EPClearStall+0x124>)
 800480a:	4323      	orrs	r3, r4
 800480c:	b29b      	uxth	r3, r3
 800480e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	4413      	add	r3, r2
 800481a:	881b      	ldrh	r3, [r3, #0]
 800481c:	b29b      	uxth	r3, r3
 800481e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004826:	b29c      	uxth	r4, r3
 8004828:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800482c:	b29c      	uxth	r4, r3
 800482e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004832:	b29c      	uxth	r4, r3
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	441a      	add	r2, r3
 800483e:	4b06      	ldr	r3, [pc, #24]	; (8004858 <USB_EPClearStall+0x120>)
 8004840:	4323      	orrs	r3, r4
 8004842:	b29b      	uxth	r3, r3
 8004844:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	3708      	adds	r7, #8
 800484c:	46bd      	mov	sp, r7
 800484e:	bc90      	pop	{r4, r7}
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	ffff80c0 	.word	0xffff80c0
 8004858:	ffff8080 	.word	0xffff8080
 800485c:	ffffc080 	.word	0xffffc080

08004860 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	460b      	mov	r3, r1
 800486a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800486c:	78fb      	ldrb	r3, [r7, #3]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d103      	bne.n	800487a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2280      	movs	r2, #128	; 0x80
 8004876:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	bc80      	pop	{r7}
 8004884:	4770      	bx	lr

08004886 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004886:	b480      	push	{r7}
 8004888:	b083      	sub	sp, #12
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	bc80      	pop	{r7}
 8004898:	4770      	bx	lr

0800489a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800489a:	b480      	push	{r7}
 800489c:	b083      	sub	sp, #12
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bc80      	pop	{r7}
 80048ac:	4770      	bx	lr

080048ae <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80048ae:	b480      	push	{r7}
 80048b0:	b085      	sub	sp, #20
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80048bc:	b29b      	uxth	r3, r3
 80048be:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80048c0:	68fb      	ldr	r3, [r7, #12]
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3714      	adds	r7, #20
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bc80      	pop	{r7}
 80048ca:	4770      	bx	lr

080048cc <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	bc80      	pop	{r7}
 80048e0:	4770      	bx	lr

080048e2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80048e2:	b480      	push	{r7}
 80048e4:	b08d      	sub	sp, #52	; 0x34
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	60f8      	str	r0, [r7, #12]
 80048ea:	60b9      	str	r1, [r7, #8]
 80048ec:	4611      	mov	r1, r2
 80048ee:	461a      	mov	r2, r3
 80048f0:	460b      	mov	r3, r1
 80048f2:	80fb      	strh	r3, [r7, #6]
 80048f4:	4613      	mov	r3, r2
 80048f6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80048f8:	88bb      	ldrh	r3, [r7, #4]
 80048fa:	3301      	adds	r3, #1
 80048fc:	085b      	lsrs	r3, r3, #1
 80048fe:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004908:	88fb      	ldrh	r3, [r7, #6]
 800490a:	005a      	lsls	r2, r3, #1
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	4413      	add	r3, r2
 8004910:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004914:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8004916:	6a3b      	ldr	r3, [r7, #32]
 8004918:	62fb      	str	r3, [r7, #44]	; 0x2c
 800491a:	e01e      	b.n	800495a <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800491c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8004922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004924:	3301      	adds	r3, #1
 8004926:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8004928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	b29b      	uxth	r3, r3
 800492e:	021b      	lsls	r3, r3, #8
 8004930:	b29b      	uxth	r3, r3
 8004932:	461a      	mov	r2, r3
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	4313      	orrs	r3, r2
 8004938:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	b29a      	uxth	r2, r3
 800493e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004940:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004944:	3302      	adds	r3, #2
 8004946:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8004948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494a:	3302      	adds	r3, #2
 800494c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800494e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004950:	3301      	adds	r3, #1
 8004952:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8004954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004956:	3b01      	subs	r3, #1
 8004958:	62fb      	str	r3, [r7, #44]	; 0x2c
 800495a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1dd      	bne.n	800491c <USB_WritePMA+0x3a>
  }
}
 8004960:	bf00      	nop
 8004962:	3734      	adds	r7, #52	; 0x34
 8004964:	46bd      	mov	sp, r7
 8004966:	bc80      	pop	{r7}
 8004968:	4770      	bx	lr

0800496a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800496a:	b480      	push	{r7}
 800496c:	b08b      	sub	sp, #44	; 0x2c
 800496e:	af00      	add	r7, sp, #0
 8004970:	60f8      	str	r0, [r7, #12]
 8004972:	60b9      	str	r1, [r7, #8]
 8004974:	4611      	mov	r1, r2
 8004976:	461a      	mov	r2, r3
 8004978:	460b      	mov	r3, r1
 800497a:	80fb      	strh	r3, [r7, #6]
 800497c:	4613      	mov	r3, r2
 800497e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004980:	88bb      	ldrh	r3, [r7, #4]
 8004982:	085b      	lsrs	r3, r3, #1
 8004984:	b29b      	uxth	r3, r3
 8004986:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004990:	88fb      	ldrh	r3, [r7, #6]
 8004992:	005a      	lsls	r2, r3, #1
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	4413      	add	r3, r2
 8004998:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800499c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	627b      	str	r3, [r7, #36]	; 0x24
 80049a2:	e01b      	b.n	80049dc <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80049a4:	6a3b      	ldr	r3, [r7, #32]
 80049a6:	881b      	ldrh	r3, [r3, #0]
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80049ac:	6a3b      	ldr	r3, [r7, #32]
 80049ae:	3302      	adds	r3, #2
 80049b0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	b2da      	uxtb	r2, r3
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	3301      	adds	r3, #1
 80049be:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	0a1b      	lsrs	r3, r3, #8
 80049c4:	b2da      	uxtb	r2, r3
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	3301      	adds	r3, #1
 80049ce:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80049d0:	6a3b      	ldr	r3, [r7, #32]
 80049d2:	3302      	adds	r3, #2
 80049d4:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80049d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d8:	3b01      	subs	r3, #1
 80049da:	627b      	str	r3, [r7, #36]	; 0x24
 80049dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d1e0      	bne.n	80049a4 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80049e2:	88bb      	ldrh	r3, [r7, #4]
 80049e4:	f003 0301 	and.w	r3, r3, #1
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d007      	beq.n	80049fe <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80049ee:	6a3b      	ldr	r3, [r7, #32]
 80049f0:	881b      	ldrh	r3, [r3, #0]
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	b2da      	uxtb	r2, r3
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	701a      	strb	r2, [r3, #0]
  }
}
 80049fe:	bf00      	nop
 8004a00:	372c      	adds	r7, #44	; 0x2c
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bc80      	pop	{r7}
 8004a06:	4770      	bx	lr

08004a08 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	460b      	mov	r3, r1
 8004a12:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004a14:	2300      	movs	r3, #0
 8004a16:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	7c1b      	ldrb	r3, [r3, #16]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d115      	bne.n	8004a4c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004a20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a24:	2202      	movs	r2, #2
 8004a26:	2181      	movs	r1, #129	; 0x81
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f002 f82c 	bl	8006a86 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2201      	movs	r2, #1
 8004a32:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004a34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a38:	2202      	movs	r2, #2
 8004a3a:	2101      	movs	r1, #1
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f002 f822 	bl	8006a86 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8004a4a:	e012      	b.n	8004a72 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004a4c:	2340      	movs	r3, #64	; 0x40
 8004a4e:	2202      	movs	r2, #2
 8004a50:	2181      	movs	r1, #129	; 0x81
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f002 f817 	bl	8006a86 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004a5e:	2340      	movs	r3, #64	; 0x40
 8004a60:	2202      	movs	r2, #2
 8004a62:	2101      	movs	r1, #1
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f002 f80e 	bl	8006a86 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004a72:	2308      	movs	r3, #8
 8004a74:	2203      	movs	r2, #3
 8004a76:	2182      	movs	r1, #130	; 0x82
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f002 f804 	bl	8006a86 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2201      	movs	r2, #1
 8004a82:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004a84:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004a88:	f002 f91e 	bl	8006cc8 <USBD_static_malloc>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d102      	bne.n	8004aa4 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	73fb      	strb	r3, [r7, #15]
 8004aa2:	e026      	b.n	8004af2 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004aaa:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	7c1b      	ldrb	r3, [r3, #16]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d109      	bne.n	8004ae2 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ad4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ad8:	2101      	movs	r1, #1
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f002 f8bd 	bl	8006c5a <USBD_LL_PrepareReceive>
 8004ae0:	e007      	b.n	8004af2 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ae8:	2340      	movs	r3, #64	; 0x40
 8004aea:	2101      	movs	r1, #1
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f002 f8b4 	bl	8006c5a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8004af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3710      	adds	r7, #16
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	460b      	mov	r3, r1
 8004b06:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004b0c:	2181      	movs	r1, #129	; 0x81
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f001 ffdf 	bl	8006ad2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004b1a:	2101      	movs	r1, #1
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f001 ffd8 	bl	8006ad2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004b2a:	2182      	movs	r1, #130	; 0x82
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f001 ffd0 	bl	8006ad2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00e      	beq.n	8004b60 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b52:	4618      	mov	r0, r3
 8004b54:	f002 f8c4 	bl	8006ce0 <USBD_static_free>
    pdev->pClassData = NULL;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8004b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3710      	adds	r7, #16
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b086      	sub	sp, #24
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
 8004b72:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b7a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8004b80:	2300      	movs	r3, #0
 8004b82:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8004b84:	2300      	movs	r3, #0
 8004b86:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d039      	beq.n	8004c08 <USBD_CDC_Setup+0x9e>
 8004b94:	2b20      	cmp	r3, #32
 8004b96:	d17c      	bne.n	8004c92 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	88db      	ldrh	r3, [r3, #6]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d029      	beq.n	8004bf4 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	b25b      	sxtb	r3, r3
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	da11      	bge.n	8004bce <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	683a      	ldr	r2, [r7, #0]
 8004bb4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8004bb6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004bb8:	683a      	ldr	r2, [r7, #0]
 8004bba:	88d2      	ldrh	r2, [r2, #6]
 8004bbc:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004bbe:	6939      	ldr	r1, [r7, #16]
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	88db      	ldrh	r3, [r3, #6]
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f001 f9f6 	bl	8005fb8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8004bcc:	e068      	b.n	8004ca0 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	785a      	ldrb	r2, [r3, #1]
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	88db      	ldrh	r3, [r3, #6]
 8004bdc:	b2da      	uxtb	r2, r3
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004be4:	6939      	ldr	r1, [r7, #16]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	88db      	ldrh	r3, [r3, #6]
 8004bea:	461a      	mov	r2, r3
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f001 fa11 	bl	8006014 <USBD_CtlPrepareRx>
      break;
 8004bf2:	e055      	b.n	8004ca0 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	683a      	ldr	r2, [r7, #0]
 8004bfe:	7850      	ldrb	r0, [r2, #1]
 8004c00:	2200      	movs	r2, #0
 8004c02:	6839      	ldr	r1, [r7, #0]
 8004c04:	4798      	blx	r3
      break;
 8004c06:	e04b      	b.n	8004ca0 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	785b      	ldrb	r3, [r3, #1]
 8004c0c:	2b0a      	cmp	r3, #10
 8004c0e:	d017      	beq.n	8004c40 <USBD_CDC_Setup+0xd6>
 8004c10:	2b0b      	cmp	r3, #11
 8004c12:	d029      	beq.n	8004c68 <USBD_CDC_Setup+0xfe>
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d133      	bne.n	8004c80 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c1e:	2b03      	cmp	r3, #3
 8004c20:	d107      	bne.n	8004c32 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8004c22:	f107 030c 	add.w	r3, r7, #12
 8004c26:	2202      	movs	r2, #2
 8004c28:	4619      	mov	r1, r3
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f001 f9c4 	bl	8005fb8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004c30:	e02e      	b.n	8004c90 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8004c32:	6839      	ldr	r1, [r7, #0]
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f001 f955 	bl	8005ee4 <USBD_CtlError>
            ret = USBD_FAIL;
 8004c3a:	2302      	movs	r3, #2
 8004c3c:	75fb      	strb	r3, [r7, #23]
          break;
 8004c3e:	e027      	b.n	8004c90 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c46:	2b03      	cmp	r3, #3
 8004c48:	d107      	bne.n	8004c5a <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8004c4a:	f107 030f 	add.w	r3, r7, #15
 8004c4e:	2201      	movs	r2, #1
 8004c50:	4619      	mov	r1, r3
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f001 f9b0 	bl	8005fb8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004c58:	e01a      	b.n	8004c90 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8004c5a:	6839      	ldr	r1, [r7, #0]
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f001 f941 	bl	8005ee4 <USBD_CtlError>
            ret = USBD_FAIL;
 8004c62:	2302      	movs	r3, #2
 8004c64:	75fb      	strb	r3, [r7, #23]
          break;
 8004c66:	e013      	b.n	8004c90 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c6e:	2b03      	cmp	r3, #3
 8004c70:	d00d      	beq.n	8004c8e <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8004c72:	6839      	ldr	r1, [r7, #0]
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f001 f935 	bl	8005ee4 <USBD_CtlError>
            ret = USBD_FAIL;
 8004c7a:	2302      	movs	r3, #2
 8004c7c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004c7e:	e006      	b.n	8004c8e <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8004c80:	6839      	ldr	r1, [r7, #0]
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f001 f92e 	bl	8005ee4 <USBD_CtlError>
          ret = USBD_FAIL;
 8004c88:	2302      	movs	r3, #2
 8004c8a:	75fb      	strb	r3, [r7, #23]
          break;
 8004c8c:	e000      	b.n	8004c90 <USBD_CDC_Setup+0x126>
          break;
 8004c8e:	bf00      	nop
      }
      break;
 8004c90:	e006      	b.n	8004ca0 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8004c92:	6839      	ldr	r1, [r7, #0]
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f001 f925 	bl	8005ee4 <USBD_CtlError>
      ret = USBD_FAIL;
 8004c9a:	2302      	movs	r3, #2
 8004c9c:	75fb      	strb	r3, [r7, #23]
      break;
 8004c9e:	bf00      	nop
  }

  return ret;
 8004ca0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3718      	adds	r7, #24
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}

08004caa <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004caa:	b580      	push	{r7, lr}
 8004cac:	b084      	sub	sp, #16
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cbc:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004cc4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d037      	beq.n	8004d40 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004cd0:	78fa      	ldrb	r2, [r7, #3]
 8004cd2:	6879      	ldr	r1, [r7, #4]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	4413      	add	r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	440b      	add	r3, r1
 8004cde:	331c      	adds	r3, #28
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d026      	beq.n	8004d34 <USBD_CDC_DataIn+0x8a>
 8004ce6:	78fa      	ldrb	r2, [r7, #3]
 8004ce8:	6879      	ldr	r1, [r7, #4]
 8004cea:	4613      	mov	r3, r2
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	4413      	add	r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	440b      	add	r3, r1
 8004cf4:	331c      	adds	r3, #28
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	78fa      	ldrb	r2, [r7, #3]
 8004cfa:	68b9      	ldr	r1, [r7, #8]
 8004cfc:	0152      	lsls	r2, r2, #5
 8004cfe:	440a      	add	r2, r1
 8004d00:	3238      	adds	r2, #56	; 0x38
 8004d02:	6812      	ldr	r2, [r2, #0]
 8004d04:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d08:	fb02 f201 	mul.w	r2, r2, r1
 8004d0c:	1a9b      	subs	r3, r3, r2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d110      	bne.n	8004d34 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8004d12:	78fa      	ldrb	r2, [r7, #3]
 8004d14:	6879      	ldr	r1, [r7, #4]
 8004d16:	4613      	mov	r3, r2
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	4413      	add	r3, r2
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	440b      	add	r3, r1
 8004d20:	331c      	adds	r3, #28
 8004d22:	2200      	movs	r2, #0
 8004d24:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004d26:	78f9      	ldrb	r1, [r7, #3]
 8004d28:	2300      	movs	r3, #0
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f001 ff71 	bl	8006c14 <USBD_LL_Transmit>
 8004d32:	e003      	b.n	8004d3c <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	e000      	b.n	8004d42 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8004d40:	2302      	movs	r3, #2
  }
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b084      	sub	sp, #16
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
 8004d52:	460b      	mov	r3, r1
 8004d54:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d5c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004d5e:	78fb      	ldrb	r3, [r7, #3]
 8004d60:	4619      	mov	r1, r3
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f001 ff9c 	bl	8006ca0 <USBD_LL_GetRxDataSize>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00d      	beq.n	8004d96 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004d8e:	4611      	mov	r1, r2
 8004d90:	4798      	blx	r3

    return USBD_OK;
 8004d92:	2300      	movs	r3, #0
 8004d94:	e000      	b.n	8004d98 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8004d96:	2302      	movs	r3, #2
  }
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dae:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d015      	beq.n	8004de6 <USBD_CDC_EP0_RxReady+0x46>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004dc0:	2bff      	cmp	r3, #255	; 0xff
 8004dc2:	d010      	beq.n	8004de6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	68fa      	ldr	r2, [r7, #12]
 8004dce:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8004dd2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004dda:	b292      	uxth	r2, r2
 8004ddc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	22ff      	movs	r2, #255	; 0xff
 8004de2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3710      	adds	r7, #16
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2243      	movs	r2, #67	; 0x43
 8004dfc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8004dfe:	4b03      	ldr	r3, [pc, #12]	; (8004e0c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bc80      	pop	{r7}
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	20000094 	.word	0x20000094

08004e10 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2243      	movs	r2, #67	; 0x43
 8004e1c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8004e1e:	4b03      	ldr	r3, [pc, #12]	; (8004e2c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bc80      	pop	{r7}
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	20000050 	.word	0x20000050

08004e30 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2243      	movs	r2, #67	; 0x43
 8004e3c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8004e3e:	4b03      	ldr	r3, [pc, #12]	; (8004e4c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bc80      	pop	{r7}
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	200000d8 	.word	0x200000d8

08004e50 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	220a      	movs	r2, #10
 8004e5c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8004e5e:	4b03      	ldr	r3, [pc, #12]	; (8004e6c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bc80      	pop	{r7}
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	2000000c 	.word	0x2000000c

08004e70 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b085      	sub	sp, #20
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8004e7a:	2302      	movs	r3, #2
 8004e7c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d005      	beq.n	8004e90 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	683a      	ldr	r2, [r7, #0]
 8004e88:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3714      	adds	r7, #20
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bc80      	pop	{r7}
 8004e9a:	4770      	bx	lr

08004e9c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b087      	sub	sp, #28
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004eb0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	68ba      	ldr	r2, [r7, #8]
 8004eb6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004eba:	88fa      	ldrh	r2, [r7, #6]
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	371c      	adds	r7, #28
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bc80      	pop	{r7}
 8004ecc:	4770      	bx	lr

08004ece <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8004ece:	b480      	push	{r7}
 8004ed0:	b085      	sub	sp, #20
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
 8004ed6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ede:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	683a      	ldr	r2, [r7, #0]
 8004ee4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3714      	adds	r7, #20
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bc80      	pop	{r7}
 8004ef2:	4770      	bx	lr

08004ef4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f02:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d01c      	beq.n	8004f48 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d115      	bne.n	8004f44 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	2181      	movs	r1, #129	; 0x81
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f001 fe6a 	bl	8006c14 <USBD_LL_Transmit>

      return USBD_OK;
 8004f40:	2300      	movs	r3, #0
 8004f42:	e002      	b.n	8004f4a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e000      	b.n	8004f4a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8004f48:	2302      	movs	r3, #2
  }
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3710      	adds	r7, #16
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b084      	sub	sp, #16
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f60:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d017      	beq.n	8004f9c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	7c1b      	ldrb	r3, [r3, #16]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d109      	bne.n	8004f88 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004f7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f7e:	2101      	movs	r1, #1
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f001 fe6a 	bl	8006c5a <USBD_LL_PrepareReceive>
 8004f86:	e007      	b.n	8004f98 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004f8e:	2340      	movs	r3, #64	; 0x40
 8004f90:	2101      	movs	r1, #1
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f001 fe61 	bl	8006c5a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	e000      	b.n	8004f9e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8004f9c:	2302      	movs	r3, #2
  }
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3710      	adds	r7, #16
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b084      	sub	sp, #16
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	60f8      	str	r0, [r7, #12]
 8004fae:	60b9      	str	r1, [r7, #8]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d101      	bne.n	8004fbe <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004fba:	2302      	movs	r3, #2
 8004fbc:	e01a      	b.n	8004ff4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d003      	beq.n	8004fd0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d003      	beq.n	8004fde <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	68ba      	ldr	r2, [r7, #8]
 8004fda:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	79fa      	ldrb	r2, [r7, #7]
 8004fea:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004fec:	68f8      	ldr	r0, [r7, #12]
 8004fee:	f001 fcd5 	bl	800699c <USBD_LL_Init>

  return USBD_OK;
 8004ff2:	2300      	movs	r3, #0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3710      	adds	r7, #16
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005006:	2300      	movs	r3, #0
 8005008:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d006      	beq.n	800501e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	683a      	ldr	r2, [r7, #0]
 8005014:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005018:	2300      	movs	r3, #0
 800501a:	73fb      	strb	r3, [r7, #15]
 800501c:	e001      	b.n	8005022 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800501e:	2302      	movs	r3, #2
 8005020:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005022:	7bfb      	ldrb	r3, [r7, #15]
}
 8005024:	4618      	mov	r0, r3
 8005026:	3714      	adds	r7, #20
 8005028:	46bd      	mov	sp, r7
 800502a:	bc80      	pop	{r7}
 800502c:	4770      	bx	lr

0800502e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800502e:	b580      	push	{r7, lr}
 8005030:	b082      	sub	sp, #8
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f001 fd0a 	bl	8006a50 <USBD_LL_Start>

  return USBD_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3708      	adds	r7, #8
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}

08005046 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005046:	b480      	push	{r7}
 8005048:	b083      	sub	sp, #12
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	370c      	adds	r7, #12
 8005054:	46bd      	mov	sp, r7
 8005056:	bc80      	pop	{r7}
 8005058:	4770      	bx	lr

0800505a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800505a:	b580      	push	{r7, lr}
 800505c:	b084      	sub	sp, #16
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
 8005062:	460b      	mov	r3, r1
 8005064:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005066:	2302      	movs	r3, #2
 8005068:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005070:	2b00      	cmp	r3, #0
 8005072:	d00c      	beq.n	800508e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	78fa      	ldrb	r2, [r7, #3]
 800507e:	4611      	mov	r1, r2
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	4798      	blx	r3
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d101      	bne.n	800508e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800508a:	2300      	movs	r3, #0
 800508c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800508e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005090:	4618      	mov	r0, r3
 8005092:	3710      	adds	r7, #16
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	460b      	mov	r3, r1
 80050a2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	78fa      	ldrb	r2, [r7, #3]
 80050ae:	4611      	mov	r1, r2
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	4798      	blx	r3

  return USBD_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3708      	adds	r7, #8
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}

080050be <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80050be:	b580      	push	{r7, lr}
 80050c0:	b082      	sub	sp, #8
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
 80050c6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80050ce:	6839      	ldr	r1, [r7, #0]
 80050d0:	4618      	mov	r0, r3
 80050d2:	f000 fecb 	bl	8005e6c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2201      	movs	r2, #1
 80050da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80050e4:	461a      	mov	r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80050f2:	f003 031f 	and.w	r3, r3, #31
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d00c      	beq.n	8005114 <USBD_LL_SetupStage+0x56>
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d302      	bcc.n	8005104 <USBD_LL_SetupStage+0x46>
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d010      	beq.n	8005124 <USBD_LL_SetupStage+0x66>
 8005102:	e017      	b.n	8005134 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800510a:	4619      	mov	r1, r3
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 f9cb 	bl	80054a8 <USBD_StdDevReq>
      break;
 8005112:	e01a      	b.n	800514a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800511a:	4619      	mov	r1, r3
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 fa2d 	bl	800557c <USBD_StdItfReq>
      break;
 8005122:	e012      	b.n	800514a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800512a:	4619      	mov	r1, r3
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 fa6b 	bl	8005608 <USBD_StdEPReq>
      break;
 8005132:	e00a      	b.n	800514a <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800513a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800513e:	b2db      	uxtb	r3, r3
 8005140:	4619      	mov	r1, r3
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f001 fce4 	bl	8006b10 <USBD_LL_StallEP>
      break;
 8005148:	bf00      	nop
  }

  return USBD_OK;
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	3708      	adds	r7, #8
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b086      	sub	sp, #24
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	460b      	mov	r3, r1
 800515e:	607a      	str	r2, [r7, #4]
 8005160:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005162:	7afb      	ldrb	r3, [r7, #11]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d14b      	bne.n	8005200 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800516e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005176:	2b03      	cmp	r3, #3
 8005178:	d134      	bne.n	80051e4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	68da      	ldr	r2, [r3, #12]
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	429a      	cmp	r2, r3
 8005184:	d919      	bls.n	80051ba <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	68da      	ldr	r2, [r3, #12]
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	1ad2      	subs	r2, r2, r3
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	68da      	ldr	r2, [r3, #12]
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800519c:	429a      	cmp	r2, r3
 800519e:	d203      	bcs.n	80051a8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	e002      	b.n	80051ae <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	461a      	mov	r2, r3
 80051b0:	6879      	ldr	r1, [r7, #4]
 80051b2:	68f8      	ldr	r0, [r7, #12]
 80051b4:	f000 ff4c 	bl	8006050 <USBD_CtlContinueRx>
 80051b8:	e038      	b.n	800522c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00a      	beq.n	80051dc <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80051cc:	2b03      	cmp	r3, #3
 80051ce:	d105      	bne.n	80051dc <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	68f8      	ldr	r0, [r7, #12]
 80051da:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	f000 ff49 	bl	8006074 <USBD_CtlSendStatus>
 80051e2:	e023      	b.n	800522c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80051ea:	2b05      	cmp	r3, #5
 80051ec:	d11e      	bne.n	800522c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80051f6:	2100      	movs	r1, #0
 80051f8:	68f8      	ldr	r0, [r7, #12]
 80051fa:	f001 fc89 	bl	8006b10 <USBD_LL_StallEP>
 80051fe:	e015      	b.n	800522c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00d      	beq.n	8005228 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005212:	2b03      	cmp	r3, #3
 8005214:	d108      	bne.n	8005228 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	7afa      	ldrb	r2, [r7, #11]
 8005220:	4611      	mov	r1, r2
 8005222:	68f8      	ldr	r0, [r7, #12]
 8005224:	4798      	blx	r3
 8005226:	e001      	b.n	800522c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005228:	2302      	movs	r3, #2
 800522a:	e000      	b.n	800522e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3718      	adds	r7, #24
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}

08005236 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005236:	b580      	push	{r7, lr}
 8005238:	b086      	sub	sp, #24
 800523a:	af00      	add	r7, sp, #0
 800523c:	60f8      	str	r0, [r7, #12]
 800523e:	460b      	mov	r3, r1
 8005240:	607a      	str	r2, [r7, #4]
 8005242:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005244:	7afb      	ldrb	r3, [r7, #11]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d17f      	bne.n	800534a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	3314      	adds	r3, #20
 800524e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005256:	2b02      	cmp	r3, #2
 8005258:	d15c      	bne.n	8005314 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	68da      	ldr	r2, [r3, #12]
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	429a      	cmp	r2, r3
 8005264:	d915      	bls.n	8005292 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	68da      	ldr	r2, [r3, #12]
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	1ad2      	subs	r2, r2, r3
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	b29b      	uxth	r3, r3
 800527a:	461a      	mov	r2, r3
 800527c:	6879      	ldr	r1, [r7, #4]
 800527e:	68f8      	ldr	r0, [r7, #12]
 8005280:	f000 feb6 	bl	8005ff0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005284:	2300      	movs	r3, #0
 8005286:	2200      	movs	r2, #0
 8005288:	2100      	movs	r1, #0
 800528a:	68f8      	ldr	r0, [r7, #12]
 800528c:	f001 fce5 	bl	8006c5a <USBD_LL_PrepareReceive>
 8005290:	e04e      	b.n	8005330 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	697a      	ldr	r2, [r7, #20]
 8005298:	6912      	ldr	r2, [r2, #16]
 800529a:	fbb3 f1f2 	udiv	r1, r3, r2
 800529e:	fb02 f201 	mul.w	r2, r2, r1
 80052a2:	1a9b      	subs	r3, r3, r2
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d11c      	bne.n	80052e2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	689a      	ldr	r2, [r3, #8]
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d316      	bcc.n	80052e2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	689a      	ldr	r2, [r3, #8]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80052be:	429a      	cmp	r2, r3
 80052c0:	d20f      	bcs.n	80052e2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80052c2:	2200      	movs	r2, #0
 80052c4:	2100      	movs	r1, #0
 80052c6:	68f8      	ldr	r0, [r7, #12]
 80052c8:	f000 fe92 	bl	8005ff0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80052d4:	2300      	movs	r3, #0
 80052d6:	2200      	movs	r2, #0
 80052d8:	2100      	movs	r1, #0
 80052da:	68f8      	ldr	r0, [r7, #12]
 80052dc:	f001 fcbd 	bl	8006c5a <USBD_LL_PrepareReceive>
 80052e0:	e026      	b.n	8005330 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00a      	beq.n	8005304 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80052f4:	2b03      	cmp	r3, #3
 80052f6:	d105      	bne.n	8005304 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	68f8      	ldr	r0, [r7, #12]
 8005302:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005304:	2180      	movs	r1, #128	; 0x80
 8005306:	68f8      	ldr	r0, [r7, #12]
 8005308:	f001 fc02 	bl	8006b10 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800530c:	68f8      	ldr	r0, [r7, #12]
 800530e:	f000 fec4 	bl	800609a <USBD_CtlReceiveStatus>
 8005312:	e00d      	b.n	8005330 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800531a:	2b04      	cmp	r3, #4
 800531c:	d004      	beq.n	8005328 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005324:	2b00      	cmp	r3, #0
 8005326:	d103      	bne.n	8005330 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005328:	2180      	movs	r1, #128	; 0x80
 800532a:	68f8      	ldr	r0, [r7, #12]
 800532c:	f001 fbf0 	bl	8006b10 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005336:	2b01      	cmp	r3, #1
 8005338:	d11d      	bne.n	8005376 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800533a:	68f8      	ldr	r0, [r7, #12]
 800533c:	f7ff fe83 	bl	8005046 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2200      	movs	r2, #0
 8005344:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005348:	e015      	b.n	8005376 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00d      	beq.n	8005372 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800535c:	2b03      	cmp	r3, #3
 800535e:	d108      	bne.n	8005372 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005366:	695b      	ldr	r3, [r3, #20]
 8005368:	7afa      	ldrb	r2, [r7, #11]
 800536a:	4611      	mov	r1, r2
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	4798      	blx	r3
 8005370:	e001      	b.n	8005376 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005372:	2302      	movs	r3, #2
 8005374:	e000      	b.n	8005378 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3718      	adds	r7, #24
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005388:	2340      	movs	r3, #64	; 0x40
 800538a:	2200      	movs	r2, #0
 800538c:	2100      	movs	r1, #0
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f001 fb79 	bl	8006a86 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2240      	movs	r2, #64	; 0x40
 80053a0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80053a4:	2340      	movs	r3, #64	; 0x40
 80053a6:	2200      	movs	r2, #0
 80053a8:	2180      	movs	r1, #128	; 0x80
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f001 fb6b 	bl	8006a86 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2240      	movs	r2, #64	; 0x40
 80053ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d009      	beq.n	80053f8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	6852      	ldr	r2, [r2, #4]
 80053f0:	b2d2      	uxtb	r2, r2
 80053f2:	4611      	mov	r1, r2
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	4798      	blx	r3
  }

  return USBD_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3708      	adds	r7, #8
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}

08005402 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005402:	b480      	push	{r7}
 8005404:	b083      	sub	sp, #12
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
 800540a:	460b      	mov	r3, r1
 800540c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	78fa      	ldrb	r2, [r7, #3]
 8005412:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	370c      	adds	r7, #12
 800541a:	46bd      	mov	sp, r7
 800541c:	bc80      	pop	{r7}
 800541e:	4770      	bx	lr

08005420 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2204      	movs	r2, #4
 8005438:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	370c      	adds	r7, #12
 8005442:	46bd      	mov	sp, r7
 8005444:	bc80      	pop	{r7}
 8005446:	4770      	bx	lr

08005448 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005456:	2b04      	cmp	r3, #4
 8005458:	d105      	bne.n	8005466 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005466:	2300      	movs	r3, #0
}
 8005468:	4618      	mov	r0, r3
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	bc80      	pop	{r7}
 8005470:	4770      	bx	lr

08005472 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005472:	b580      	push	{r7, lr}
 8005474:	b082      	sub	sp, #8
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005480:	2b03      	cmp	r3, #3
 8005482:	d10b      	bne.n	800549c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800548a:	69db      	ldr	r3, [r3, #28]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d005      	beq.n	800549c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005496:	69db      	ldr	r3, [r3, #28]
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3708      	adds	r7, #8
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
	...

080054a8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80054b2:	2300      	movs	r3, #0
 80054b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80054be:	2b20      	cmp	r3, #32
 80054c0:	d004      	beq.n	80054cc <USBD_StdDevReq+0x24>
 80054c2:	2b40      	cmp	r3, #64	; 0x40
 80054c4:	d002      	beq.n	80054cc <USBD_StdDevReq+0x24>
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d008      	beq.n	80054dc <USBD_StdDevReq+0x34>
 80054ca:	e04c      	b.n	8005566 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	6839      	ldr	r1, [r7, #0]
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	4798      	blx	r3
      break;
 80054da:	e049      	b.n	8005570 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	785b      	ldrb	r3, [r3, #1]
 80054e0:	2b09      	cmp	r3, #9
 80054e2:	d83a      	bhi.n	800555a <USBD_StdDevReq+0xb2>
 80054e4:	a201      	add	r2, pc, #4	; (adr r2, 80054ec <USBD_StdDevReq+0x44>)
 80054e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ea:	bf00      	nop
 80054ec:	0800553d 	.word	0x0800553d
 80054f0:	08005551 	.word	0x08005551
 80054f4:	0800555b 	.word	0x0800555b
 80054f8:	08005547 	.word	0x08005547
 80054fc:	0800555b 	.word	0x0800555b
 8005500:	0800551f 	.word	0x0800551f
 8005504:	08005515 	.word	0x08005515
 8005508:	0800555b 	.word	0x0800555b
 800550c:	08005533 	.word	0x08005533
 8005510:	08005529 	.word	0x08005529
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005514:	6839      	ldr	r1, [r7, #0]
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 f9d4 	bl	80058c4 <USBD_GetDescriptor>
          break;
 800551c:	e022      	b.n	8005564 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800551e:	6839      	ldr	r1, [r7, #0]
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 fb37 	bl	8005b94 <USBD_SetAddress>
          break;
 8005526:	e01d      	b.n	8005564 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005528:	6839      	ldr	r1, [r7, #0]
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 fb74 	bl	8005c18 <USBD_SetConfig>
          break;
 8005530:	e018      	b.n	8005564 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005532:	6839      	ldr	r1, [r7, #0]
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 fbfd 	bl	8005d34 <USBD_GetConfig>
          break;
 800553a:	e013      	b.n	8005564 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800553c:	6839      	ldr	r1, [r7, #0]
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 fc2c 	bl	8005d9c <USBD_GetStatus>
          break;
 8005544:	e00e      	b.n	8005564 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005546:	6839      	ldr	r1, [r7, #0]
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f000 fc5a 	bl	8005e02 <USBD_SetFeature>
          break;
 800554e:	e009      	b.n	8005564 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005550:	6839      	ldr	r1, [r7, #0]
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 fc69 	bl	8005e2a <USBD_ClrFeature>
          break;
 8005558:	e004      	b.n	8005564 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800555a:	6839      	ldr	r1, [r7, #0]
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f000 fcc1 	bl	8005ee4 <USBD_CtlError>
          break;
 8005562:	bf00      	nop
      }
      break;
 8005564:	e004      	b.n	8005570 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005566:	6839      	ldr	r1, [r7, #0]
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 fcbb 	bl	8005ee4 <USBD_CtlError>
      break;
 800556e:	bf00      	nop
  }

  return ret;
 8005570:	7bfb      	ldrb	r3, [r7, #15]
}
 8005572:	4618      	mov	r0, r3
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop

0800557c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005586:	2300      	movs	r3, #0
 8005588:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005592:	2b20      	cmp	r3, #32
 8005594:	d003      	beq.n	800559e <USBD_StdItfReq+0x22>
 8005596:	2b40      	cmp	r3, #64	; 0x40
 8005598:	d001      	beq.n	800559e <USBD_StdItfReq+0x22>
 800559a:	2b00      	cmp	r3, #0
 800559c:	d12a      	bne.n	80055f4 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055a4:	3b01      	subs	r3, #1
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d81d      	bhi.n	80055e6 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	889b      	ldrh	r3, [r3, #4]
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d813      	bhi.n	80055dc <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	6839      	ldr	r1, [r7, #0]
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	4798      	blx	r3
 80055c2:	4603      	mov	r3, r0
 80055c4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	88db      	ldrh	r3, [r3, #6]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d110      	bne.n	80055f0 <USBD_StdItfReq+0x74>
 80055ce:	7bfb      	ldrb	r3, [r7, #15]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d10d      	bne.n	80055f0 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 fd4d 	bl	8006074 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80055da:	e009      	b.n	80055f0 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80055dc:	6839      	ldr	r1, [r7, #0]
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 fc80 	bl	8005ee4 <USBD_CtlError>
          break;
 80055e4:	e004      	b.n	80055f0 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80055e6:	6839      	ldr	r1, [r7, #0]
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 fc7b 	bl	8005ee4 <USBD_CtlError>
          break;
 80055ee:	e000      	b.n	80055f2 <USBD_StdItfReq+0x76>
          break;
 80055f0:	bf00      	nop
      }
      break;
 80055f2:	e004      	b.n	80055fe <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80055f4:	6839      	ldr	r1, [r7, #0]
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 fc74 	bl	8005ee4 <USBD_CtlError>
      break;
 80055fc:	bf00      	nop
  }

  return USBD_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	3710      	adds	r7, #16
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005612:	2300      	movs	r3, #0
 8005614:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	889b      	ldrh	r3, [r3, #4]
 800561a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005624:	2b20      	cmp	r3, #32
 8005626:	d004      	beq.n	8005632 <USBD_StdEPReq+0x2a>
 8005628:	2b40      	cmp	r3, #64	; 0x40
 800562a:	d002      	beq.n	8005632 <USBD_StdEPReq+0x2a>
 800562c:	2b00      	cmp	r3, #0
 800562e:	d008      	beq.n	8005642 <USBD_StdEPReq+0x3a>
 8005630:	e13d      	b.n	80058ae <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	6839      	ldr	r1, [r7, #0]
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	4798      	blx	r3
      break;
 8005640:	e13a      	b.n	80058b8 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800564a:	2b20      	cmp	r3, #32
 800564c:	d10a      	bne.n	8005664 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	6839      	ldr	r1, [r7, #0]
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	4798      	blx	r3
 800565c:	4603      	mov	r3, r0
 800565e:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005660:	7bfb      	ldrb	r3, [r7, #15]
 8005662:	e12a      	b.n	80058ba <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	785b      	ldrb	r3, [r3, #1]
 8005668:	2b01      	cmp	r3, #1
 800566a:	d03e      	beq.n	80056ea <USBD_StdEPReq+0xe2>
 800566c:	2b03      	cmp	r3, #3
 800566e:	d002      	beq.n	8005676 <USBD_StdEPReq+0x6e>
 8005670:	2b00      	cmp	r3, #0
 8005672:	d070      	beq.n	8005756 <USBD_StdEPReq+0x14e>
 8005674:	e115      	b.n	80058a2 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800567c:	2b02      	cmp	r3, #2
 800567e:	d002      	beq.n	8005686 <USBD_StdEPReq+0x7e>
 8005680:	2b03      	cmp	r3, #3
 8005682:	d015      	beq.n	80056b0 <USBD_StdEPReq+0xa8>
 8005684:	e02b      	b.n	80056de <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005686:	7bbb      	ldrb	r3, [r7, #14]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00c      	beq.n	80056a6 <USBD_StdEPReq+0x9e>
 800568c:	7bbb      	ldrb	r3, [r7, #14]
 800568e:	2b80      	cmp	r3, #128	; 0x80
 8005690:	d009      	beq.n	80056a6 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005692:	7bbb      	ldrb	r3, [r7, #14]
 8005694:	4619      	mov	r1, r3
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f001 fa3a 	bl	8006b10 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800569c:	2180      	movs	r1, #128	; 0x80
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f001 fa36 	bl	8006b10 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80056a4:	e020      	b.n	80056e8 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80056a6:	6839      	ldr	r1, [r7, #0]
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 fc1b 	bl	8005ee4 <USBD_CtlError>
              break;
 80056ae:	e01b      	b.n	80056e8 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	885b      	ldrh	r3, [r3, #2]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d10e      	bne.n	80056d6 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 80056b8:	7bbb      	ldrb	r3, [r7, #14]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00b      	beq.n	80056d6 <USBD_StdEPReq+0xce>
 80056be:	7bbb      	ldrb	r3, [r7, #14]
 80056c0:	2b80      	cmp	r3, #128	; 0x80
 80056c2:	d008      	beq.n	80056d6 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	88db      	ldrh	r3, [r3, #6]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d104      	bne.n	80056d6 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80056cc:	7bbb      	ldrb	r3, [r7, #14]
 80056ce:	4619      	mov	r1, r3
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f001 fa1d 	bl	8006b10 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 fccc 	bl	8006074 <USBD_CtlSendStatus>

              break;
 80056dc:	e004      	b.n	80056e8 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 80056de:	6839      	ldr	r1, [r7, #0]
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 fbff 	bl	8005ee4 <USBD_CtlError>
              break;
 80056e6:	bf00      	nop
          }
          break;
 80056e8:	e0e0      	b.n	80058ac <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	d002      	beq.n	80056fa <USBD_StdEPReq+0xf2>
 80056f4:	2b03      	cmp	r3, #3
 80056f6:	d015      	beq.n	8005724 <USBD_StdEPReq+0x11c>
 80056f8:	e026      	b.n	8005748 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80056fa:	7bbb      	ldrb	r3, [r7, #14]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00c      	beq.n	800571a <USBD_StdEPReq+0x112>
 8005700:	7bbb      	ldrb	r3, [r7, #14]
 8005702:	2b80      	cmp	r3, #128	; 0x80
 8005704:	d009      	beq.n	800571a <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005706:	7bbb      	ldrb	r3, [r7, #14]
 8005708:	4619      	mov	r1, r3
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f001 fa00 	bl	8006b10 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005710:	2180      	movs	r1, #128	; 0x80
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f001 f9fc 	bl	8006b10 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005718:	e01c      	b.n	8005754 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800571a:	6839      	ldr	r1, [r7, #0]
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f000 fbe1 	bl	8005ee4 <USBD_CtlError>
              break;
 8005722:	e017      	b.n	8005754 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	885b      	ldrh	r3, [r3, #2]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d112      	bne.n	8005752 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800572c:	7bbb      	ldrb	r3, [r7, #14]
 800572e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005732:	2b00      	cmp	r3, #0
 8005734:	d004      	beq.n	8005740 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005736:	7bbb      	ldrb	r3, [r7, #14]
 8005738:	4619      	mov	r1, r3
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f001 fa07 	bl	8006b4e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f000 fc97 	bl	8006074 <USBD_CtlSendStatus>
              }
              break;
 8005746:	e004      	b.n	8005752 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8005748:	6839      	ldr	r1, [r7, #0]
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 fbca 	bl	8005ee4 <USBD_CtlError>
              break;
 8005750:	e000      	b.n	8005754 <USBD_StdEPReq+0x14c>
              break;
 8005752:	bf00      	nop
          }
          break;
 8005754:	e0aa      	b.n	80058ac <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800575c:	2b02      	cmp	r3, #2
 800575e:	d002      	beq.n	8005766 <USBD_StdEPReq+0x15e>
 8005760:	2b03      	cmp	r3, #3
 8005762:	d032      	beq.n	80057ca <USBD_StdEPReq+0x1c2>
 8005764:	e097      	b.n	8005896 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005766:	7bbb      	ldrb	r3, [r7, #14]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d007      	beq.n	800577c <USBD_StdEPReq+0x174>
 800576c:	7bbb      	ldrb	r3, [r7, #14]
 800576e:	2b80      	cmp	r3, #128	; 0x80
 8005770:	d004      	beq.n	800577c <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8005772:	6839      	ldr	r1, [r7, #0]
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 fbb5 	bl	8005ee4 <USBD_CtlError>
                break;
 800577a:	e091      	b.n	80058a0 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800577c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005780:	2b00      	cmp	r3, #0
 8005782:	da0b      	bge.n	800579c <USBD_StdEPReq+0x194>
 8005784:	7bbb      	ldrb	r3, [r7, #14]
 8005786:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800578a:	4613      	mov	r3, r2
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	4413      	add	r3, r2
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	3310      	adds	r3, #16
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	4413      	add	r3, r2
 8005798:	3304      	adds	r3, #4
 800579a:	e00b      	b.n	80057b4 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800579c:	7bbb      	ldrb	r3, [r7, #14]
 800579e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80057a2:	4613      	mov	r3, r2
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	4413      	add	r3, r2
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	4413      	add	r3, r2
 80057b2:	3304      	adds	r3, #4
 80057b4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	2200      	movs	r2, #0
 80057ba:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	2202      	movs	r2, #2
 80057c0:	4619      	mov	r1, r3
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 fbf8 	bl	8005fb8 <USBD_CtlSendData>
              break;
 80057c8:	e06a      	b.n	80058a0 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80057ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	da11      	bge.n	80057f6 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80057d2:	7bbb      	ldrb	r3, [r7, #14]
 80057d4:	f003 020f 	and.w	r2, r3, #15
 80057d8:	6879      	ldr	r1, [r7, #4]
 80057da:	4613      	mov	r3, r2
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	4413      	add	r3, r2
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	440b      	add	r3, r1
 80057e4:	3318      	adds	r3, #24
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d117      	bne.n	800581c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80057ec:	6839      	ldr	r1, [r7, #0]
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 fb78 	bl	8005ee4 <USBD_CtlError>
                  break;
 80057f4:	e054      	b.n	80058a0 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80057f6:	7bbb      	ldrb	r3, [r7, #14]
 80057f8:	f003 020f 	and.w	r2, r3, #15
 80057fc:	6879      	ldr	r1, [r7, #4]
 80057fe:	4613      	mov	r3, r2
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	4413      	add	r3, r2
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	440b      	add	r3, r1
 8005808:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d104      	bne.n	800581c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005812:	6839      	ldr	r1, [r7, #0]
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 fb65 	bl	8005ee4 <USBD_CtlError>
                  break;
 800581a:	e041      	b.n	80058a0 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800581c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005820:	2b00      	cmp	r3, #0
 8005822:	da0b      	bge.n	800583c <USBD_StdEPReq+0x234>
 8005824:	7bbb      	ldrb	r3, [r7, #14]
 8005826:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800582a:	4613      	mov	r3, r2
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	4413      	add	r3, r2
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	3310      	adds	r3, #16
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	4413      	add	r3, r2
 8005838:	3304      	adds	r3, #4
 800583a:	e00b      	b.n	8005854 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800583c:	7bbb      	ldrb	r3, [r7, #14]
 800583e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005842:	4613      	mov	r3, r2
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	4413      	add	r3, r2
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	4413      	add	r3, r2
 8005852:	3304      	adds	r3, #4
 8005854:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005856:	7bbb      	ldrb	r3, [r7, #14]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d002      	beq.n	8005862 <USBD_StdEPReq+0x25a>
 800585c:	7bbb      	ldrb	r3, [r7, #14]
 800585e:	2b80      	cmp	r3, #128	; 0x80
 8005860:	d103      	bne.n	800586a <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	2200      	movs	r2, #0
 8005866:	601a      	str	r2, [r3, #0]
 8005868:	e00e      	b.n	8005888 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800586a:	7bbb      	ldrb	r3, [r7, #14]
 800586c:	4619      	mov	r1, r3
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f001 f98c 	bl	8006b8c <USBD_LL_IsStallEP>
 8005874:	4603      	mov	r3, r0
 8005876:	2b00      	cmp	r3, #0
 8005878:	d003      	beq.n	8005882 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	2201      	movs	r2, #1
 800587e:	601a      	str	r2, [r3, #0]
 8005880:	e002      	b.n	8005888 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	2200      	movs	r2, #0
 8005886:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	2202      	movs	r2, #2
 800588c:	4619      	mov	r1, r3
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 fb92 	bl	8005fb8 <USBD_CtlSendData>
              break;
 8005894:	e004      	b.n	80058a0 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8005896:	6839      	ldr	r1, [r7, #0]
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f000 fb23 	bl	8005ee4 <USBD_CtlError>
              break;
 800589e:	bf00      	nop
          }
          break;
 80058a0:	e004      	b.n	80058ac <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80058a2:	6839      	ldr	r1, [r7, #0]
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 fb1d 	bl	8005ee4 <USBD_CtlError>
          break;
 80058aa:	bf00      	nop
      }
      break;
 80058ac:	e004      	b.n	80058b8 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 80058ae:	6839      	ldr	r1, [r7, #0]
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f000 fb17 	bl	8005ee4 <USBD_CtlError>
      break;
 80058b6:	bf00      	nop
  }

  return ret;
 80058b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3710      	adds	r7, #16
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
	...

080058c4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80058ce:	2300      	movs	r3, #0
 80058d0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80058d2:	2300      	movs	r3, #0
 80058d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80058d6:	2300      	movs	r3, #0
 80058d8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	885b      	ldrh	r3, [r3, #2]
 80058de:	0a1b      	lsrs	r3, r3, #8
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	3b01      	subs	r3, #1
 80058e4:	2b06      	cmp	r3, #6
 80058e6:	f200 8128 	bhi.w	8005b3a <USBD_GetDescriptor+0x276>
 80058ea:	a201      	add	r2, pc, #4	; (adr r2, 80058f0 <USBD_GetDescriptor+0x2c>)
 80058ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f0:	0800590d 	.word	0x0800590d
 80058f4:	08005925 	.word	0x08005925
 80058f8:	08005965 	.word	0x08005965
 80058fc:	08005b3b 	.word	0x08005b3b
 8005900:	08005b3b 	.word	0x08005b3b
 8005904:	08005adb 	.word	0x08005adb
 8005908:	08005b07 	.word	0x08005b07
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	7c12      	ldrb	r2, [r2, #16]
 8005918:	f107 0108 	add.w	r1, r7, #8
 800591c:	4610      	mov	r0, r2
 800591e:	4798      	blx	r3
 8005920:	60f8      	str	r0, [r7, #12]
      break;
 8005922:	e112      	b.n	8005b4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	7c1b      	ldrb	r3, [r3, #16]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d10d      	bne.n	8005948 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005934:	f107 0208 	add.w	r2, r7, #8
 8005938:	4610      	mov	r0, r2
 800593a:	4798      	blx	r3
 800593c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	3301      	adds	r3, #1
 8005942:	2202      	movs	r2, #2
 8005944:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005946:	e100      	b.n	8005b4a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800594e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005950:	f107 0208 	add.w	r2, r7, #8
 8005954:	4610      	mov	r0, r2
 8005956:	4798      	blx	r3
 8005958:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	3301      	adds	r3, #1
 800595e:	2202      	movs	r2, #2
 8005960:	701a      	strb	r2, [r3, #0]
      break;
 8005962:	e0f2      	b.n	8005b4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	885b      	ldrh	r3, [r3, #2]
 8005968:	b2db      	uxtb	r3, r3
 800596a:	2b05      	cmp	r3, #5
 800596c:	f200 80ac 	bhi.w	8005ac8 <USBD_GetDescriptor+0x204>
 8005970:	a201      	add	r2, pc, #4	; (adr r2, 8005978 <USBD_GetDescriptor+0xb4>)
 8005972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005976:	bf00      	nop
 8005978:	08005991 	.word	0x08005991
 800597c:	080059c5 	.word	0x080059c5
 8005980:	080059f9 	.word	0x080059f9
 8005984:	08005a2d 	.word	0x08005a2d
 8005988:	08005a61 	.word	0x08005a61
 800598c:	08005a95 	.word	0x08005a95
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d00b      	beq.n	80059b4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	7c12      	ldrb	r2, [r2, #16]
 80059a8:	f107 0108 	add.w	r1, r7, #8
 80059ac:	4610      	mov	r0, r2
 80059ae:	4798      	blx	r3
 80059b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80059b2:	e091      	b.n	8005ad8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80059b4:	6839      	ldr	r1, [r7, #0]
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 fa94 	bl	8005ee4 <USBD_CtlError>
            err++;
 80059bc:	7afb      	ldrb	r3, [r7, #11]
 80059be:	3301      	adds	r3, #1
 80059c0:	72fb      	strb	r3, [r7, #11]
          break;
 80059c2:	e089      	b.n	8005ad8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d00b      	beq.n	80059e8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	7c12      	ldrb	r2, [r2, #16]
 80059dc:	f107 0108 	add.w	r1, r7, #8
 80059e0:	4610      	mov	r0, r2
 80059e2:	4798      	blx	r3
 80059e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80059e6:	e077      	b.n	8005ad8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80059e8:	6839      	ldr	r1, [r7, #0]
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 fa7a 	bl	8005ee4 <USBD_CtlError>
            err++;
 80059f0:	7afb      	ldrb	r3, [r7, #11]
 80059f2:	3301      	adds	r3, #1
 80059f4:	72fb      	strb	r3, [r7, #11]
          break;
 80059f6:	e06f      	b.n	8005ad8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d00b      	beq.n	8005a1c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	7c12      	ldrb	r2, [r2, #16]
 8005a10:	f107 0108 	add.w	r1, r7, #8
 8005a14:	4610      	mov	r0, r2
 8005a16:	4798      	blx	r3
 8005a18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005a1a:	e05d      	b.n	8005ad8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005a1c:	6839      	ldr	r1, [r7, #0]
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 fa60 	bl	8005ee4 <USBD_CtlError>
            err++;
 8005a24:	7afb      	ldrb	r3, [r7, #11]
 8005a26:	3301      	adds	r3, #1
 8005a28:	72fb      	strb	r3, [r7, #11]
          break;
 8005a2a:	e055      	b.n	8005ad8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d00b      	beq.n	8005a50 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	7c12      	ldrb	r2, [r2, #16]
 8005a44:	f107 0108 	add.w	r1, r7, #8
 8005a48:	4610      	mov	r0, r2
 8005a4a:	4798      	blx	r3
 8005a4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005a4e:	e043      	b.n	8005ad8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005a50:	6839      	ldr	r1, [r7, #0]
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 fa46 	bl	8005ee4 <USBD_CtlError>
            err++;
 8005a58:	7afb      	ldrb	r3, [r7, #11]
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	72fb      	strb	r3, [r7, #11]
          break;
 8005a5e:	e03b      	b.n	8005ad8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005a66:	695b      	ldr	r3, [r3, #20]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d00b      	beq.n	8005a84 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005a72:	695b      	ldr	r3, [r3, #20]
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	7c12      	ldrb	r2, [r2, #16]
 8005a78:	f107 0108 	add.w	r1, r7, #8
 8005a7c:	4610      	mov	r0, r2
 8005a7e:	4798      	blx	r3
 8005a80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005a82:	e029      	b.n	8005ad8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005a84:	6839      	ldr	r1, [r7, #0]
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 fa2c 	bl	8005ee4 <USBD_CtlError>
            err++;
 8005a8c:	7afb      	ldrb	r3, [r7, #11]
 8005a8e:	3301      	adds	r3, #1
 8005a90:	72fb      	strb	r3, [r7, #11]
          break;
 8005a92:	e021      	b.n	8005ad8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005a9a:	699b      	ldr	r3, [r3, #24]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d00b      	beq.n	8005ab8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005aa6:	699b      	ldr	r3, [r3, #24]
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	7c12      	ldrb	r2, [r2, #16]
 8005aac:	f107 0108 	add.w	r1, r7, #8
 8005ab0:	4610      	mov	r0, r2
 8005ab2:	4798      	blx	r3
 8005ab4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ab6:	e00f      	b.n	8005ad8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005ab8:	6839      	ldr	r1, [r7, #0]
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 fa12 	bl	8005ee4 <USBD_CtlError>
            err++;
 8005ac0:	7afb      	ldrb	r3, [r7, #11]
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	72fb      	strb	r3, [r7, #11]
          break;
 8005ac6:	e007      	b.n	8005ad8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8005ac8:	6839      	ldr	r1, [r7, #0]
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 fa0a 	bl	8005ee4 <USBD_CtlError>
          err++;
 8005ad0:	7afb      	ldrb	r3, [r7, #11]
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8005ad6:	e038      	b.n	8005b4a <USBD_GetDescriptor+0x286>
 8005ad8:	e037      	b.n	8005b4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	7c1b      	ldrb	r3, [r3, #16]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d109      	bne.n	8005af6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aea:	f107 0208 	add.w	r2, r7, #8
 8005aee:	4610      	mov	r0, r2
 8005af0:	4798      	blx	r3
 8005af2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005af4:	e029      	b.n	8005b4a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005af6:	6839      	ldr	r1, [r7, #0]
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 f9f3 	bl	8005ee4 <USBD_CtlError>
        err++;
 8005afe:	7afb      	ldrb	r3, [r7, #11]
 8005b00:	3301      	adds	r3, #1
 8005b02:	72fb      	strb	r3, [r7, #11]
      break;
 8005b04:	e021      	b.n	8005b4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	7c1b      	ldrb	r3, [r3, #16]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d10d      	bne.n	8005b2a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b16:	f107 0208 	add.w	r2, r7, #8
 8005b1a:	4610      	mov	r0, r2
 8005b1c:	4798      	blx	r3
 8005b1e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	3301      	adds	r3, #1
 8005b24:	2207      	movs	r2, #7
 8005b26:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005b28:	e00f      	b.n	8005b4a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005b2a:	6839      	ldr	r1, [r7, #0]
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f000 f9d9 	bl	8005ee4 <USBD_CtlError>
        err++;
 8005b32:	7afb      	ldrb	r3, [r7, #11]
 8005b34:	3301      	adds	r3, #1
 8005b36:	72fb      	strb	r3, [r7, #11]
      break;
 8005b38:	e007      	b.n	8005b4a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005b3a:	6839      	ldr	r1, [r7, #0]
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f000 f9d1 	bl	8005ee4 <USBD_CtlError>
      err++;
 8005b42:	7afb      	ldrb	r3, [r7, #11]
 8005b44:	3301      	adds	r3, #1
 8005b46:	72fb      	strb	r3, [r7, #11]
      break;
 8005b48:	bf00      	nop
  }

  if (err != 0U)
 8005b4a:	7afb      	ldrb	r3, [r7, #11]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d11c      	bne.n	8005b8a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8005b50:	893b      	ldrh	r3, [r7, #8]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d011      	beq.n	8005b7a <USBD_GetDescriptor+0x2b6>
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	88db      	ldrh	r3, [r3, #6]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00d      	beq.n	8005b7a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	88da      	ldrh	r2, [r3, #6]
 8005b62:	893b      	ldrh	r3, [r7, #8]
 8005b64:	4293      	cmp	r3, r2
 8005b66:	bf28      	it	cs
 8005b68:	4613      	movcs	r3, r2
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005b6e:	893b      	ldrh	r3, [r7, #8]
 8005b70:	461a      	mov	r2, r3
 8005b72:	68f9      	ldr	r1, [r7, #12]
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 fa1f 	bl	8005fb8 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	88db      	ldrh	r3, [r3, #6]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d104      	bne.n	8005b8c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 fa76 	bl	8006074 <USBD_CtlSendStatus>
 8005b88:	e000      	b.n	8005b8c <USBD_GetDescriptor+0x2c8>
    return;
 8005b8a:	bf00      	nop
    }
  }
}
 8005b8c:	3710      	adds	r7, #16
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop

08005b94 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	889b      	ldrh	r3, [r3, #4]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d130      	bne.n	8005c08 <USBD_SetAddress+0x74>
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	88db      	ldrh	r3, [r3, #6]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d12c      	bne.n	8005c08 <USBD_SetAddress+0x74>
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	885b      	ldrh	r3, [r3, #2]
 8005bb2:	2b7f      	cmp	r3, #127	; 0x7f
 8005bb4:	d828      	bhi.n	8005c08 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	885b      	ldrh	r3, [r3, #2]
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bc0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bc8:	2b03      	cmp	r3, #3
 8005bca:	d104      	bne.n	8005bd6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005bcc:	6839      	ldr	r1, [r7, #0]
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 f988 	bl	8005ee4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bd4:	e01c      	b.n	8005c10 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	7bfa      	ldrb	r2, [r7, #15]
 8005bda:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005bde:	7bfb      	ldrb	r3, [r7, #15]
 8005be0:	4619      	mov	r1, r3
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 fff7 	bl	8006bd6 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 fa43 	bl	8006074 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005bee:	7bfb      	ldrb	r3, [r7, #15]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d004      	beq.n	8005bfe <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2202      	movs	r2, #2
 8005bf8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bfc:	e008      	b.n	8005c10 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c06:	e003      	b.n	8005c10 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005c08:	6839      	ldr	r1, [r7, #0]
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 f96a 	bl	8005ee4 <USBD_CtlError>
  }
}
 8005c10:	bf00      	nop
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b082      	sub	sp, #8
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	885b      	ldrh	r3, [r3, #2]
 8005c26:	b2da      	uxtb	r2, r3
 8005c28:	4b41      	ldr	r3, [pc, #260]	; (8005d30 <USBD_SetConfig+0x118>)
 8005c2a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005c2c:	4b40      	ldr	r3, [pc, #256]	; (8005d30 <USBD_SetConfig+0x118>)
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d904      	bls.n	8005c3e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8005c34:	6839      	ldr	r1, [r7, #0]
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f000 f954 	bl	8005ee4 <USBD_CtlError>
 8005c3c:	e075      	b.n	8005d2a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	d002      	beq.n	8005c4e <USBD_SetConfig+0x36>
 8005c48:	2b03      	cmp	r3, #3
 8005c4a:	d023      	beq.n	8005c94 <USBD_SetConfig+0x7c>
 8005c4c:	e062      	b.n	8005d14 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8005c4e:	4b38      	ldr	r3, [pc, #224]	; (8005d30 <USBD_SetConfig+0x118>)
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d01a      	beq.n	8005c8c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8005c56:	4b36      	ldr	r3, [pc, #216]	; (8005d30 <USBD_SetConfig+0x118>)
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2203      	movs	r2, #3
 8005c64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005c68:	4b31      	ldr	r3, [pc, #196]	; (8005d30 <USBD_SetConfig+0x118>)
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f7ff f9f3 	bl	800505a <USBD_SetClassConfig>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b02      	cmp	r3, #2
 8005c78:	d104      	bne.n	8005c84 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8005c7a:	6839      	ldr	r1, [r7, #0]
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 f931 	bl	8005ee4 <USBD_CtlError>
            return;
 8005c82:	e052      	b.n	8005d2a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f000 f9f5 	bl	8006074 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005c8a:	e04e      	b.n	8005d2a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 f9f1 	bl	8006074 <USBD_CtlSendStatus>
        break;
 8005c92:	e04a      	b.n	8005d2a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8005c94:	4b26      	ldr	r3, [pc, #152]	; (8005d30 <USBD_SetConfig+0x118>)
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d112      	bne.n	8005cc2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2202      	movs	r2, #2
 8005ca0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8005ca4:	4b22      	ldr	r3, [pc, #136]	; (8005d30 <USBD_SetConfig+0x118>)
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	461a      	mov	r2, r3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8005cae:	4b20      	ldr	r3, [pc, #128]	; (8005d30 <USBD_SetConfig+0x118>)
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f7ff f9ef 	bl	8005098 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 f9da 	bl	8006074 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005cc0:	e033      	b.n	8005d2a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8005cc2:	4b1b      	ldr	r3, [pc, #108]	; (8005d30 <USBD_SetConfig+0x118>)
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d01d      	beq.n	8005d0c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f7ff f9dd 	bl	8005098 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8005cde:	4b14      	ldr	r3, [pc, #80]	; (8005d30 <USBD_SetConfig+0x118>)
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005ce8:	4b11      	ldr	r3, [pc, #68]	; (8005d30 <USBD_SetConfig+0x118>)
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	4619      	mov	r1, r3
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f7ff f9b3 	bl	800505a <USBD_SetClassConfig>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d104      	bne.n	8005d04 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8005cfa:	6839      	ldr	r1, [r7, #0]
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 f8f1 	bl	8005ee4 <USBD_CtlError>
            return;
 8005d02:	e012      	b.n	8005d2a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 f9b5 	bl	8006074 <USBD_CtlSendStatus>
        break;
 8005d0a:	e00e      	b.n	8005d2a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 f9b1 	bl	8006074 <USBD_CtlSendStatus>
        break;
 8005d12:	e00a      	b.n	8005d2a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8005d14:	6839      	ldr	r1, [r7, #0]
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 f8e4 	bl	8005ee4 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005d1c:	4b04      	ldr	r3, [pc, #16]	; (8005d30 <USBD_SetConfig+0x118>)
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	4619      	mov	r1, r3
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f7ff f9b8 	bl	8005098 <USBD_ClrClassConfig>
        break;
 8005d28:	bf00      	nop
    }
  }
}
 8005d2a:	3708      	adds	r7, #8
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	200001a0 	.word	0x200001a0

08005d34 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b082      	sub	sp, #8
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	88db      	ldrh	r3, [r3, #6]
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d004      	beq.n	8005d50 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005d46:	6839      	ldr	r1, [r7, #0]
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 f8cb 	bl	8005ee4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005d4e:	e021      	b.n	8005d94 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	db17      	blt.n	8005d8a <USBD_GetConfig+0x56>
 8005d5a:	2b02      	cmp	r3, #2
 8005d5c:	dd02      	ble.n	8005d64 <USBD_GetConfig+0x30>
 8005d5e:	2b03      	cmp	r3, #3
 8005d60:	d00b      	beq.n	8005d7a <USBD_GetConfig+0x46>
 8005d62:	e012      	b.n	8005d8a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	3308      	adds	r3, #8
 8005d6e:	2201      	movs	r2, #1
 8005d70:	4619      	mov	r1, r3
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 f920 	bl	8005fb8 <USBD_CtlSendData>
        break;
 8005d78:	e00c      	b.n	8005d94 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	3304      	adds	r3, #4
 8005d7e:	2201      	movs	r2, #1
 8005d80:	4619      	mov	r1, r3
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 f918 	bl	8005fb8 <USBD_CtlSendData>
        break;
 8005d88:	e004      	b.n	8005d94 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8005d8a:	6839      	ldr	r1, [r7, #0]
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 f8a9 	bl	8005ee4 <USBD_CtlError>
        break;
 8005d92:	bf00      	nop
}
 8005d94:	bf00      	nop
 8005d96:	3708      	adds	r7, #8
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b082      	sub	sp, #8
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dac:	3b01      	subs	r3, #1
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	d81e      	bhi.n	8005df0 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	88db      	ldrh	r3, [r3, #6]
 8005db6:	2b02      	cmp	r3, #2
 8005db8:	d004      	beq.n	8005dc4 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8005dba:	6839      	ldr	r1, [r7, #0]
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 f891 	bl	8005ee4 <USBD_CtlError>
        break;
 8005dc2:	e01a      	b.n	8005dfa <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d005      	beq.n	8005de0 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	f043 0202 	orr.w	r2, r3, #2
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	330c      	adds	r3, #12
 8005de4:	2202      	movs	r2, #2
 8005de6:	4619      	mov	r1, r3
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f000 f8e5 	bl	8005fb8 <USBD_CtlSendData>
      break;
 8005dee:	e004      	b.n	8005dfa <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8005df0:	6839      	ldr	r1, [r7, #0]
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 f876 	bl	8005ee4 <USBD_CtlError>
      break;
 8005df8:	bf00      	nop
  }
}
 8005dfa:	bf00      	nop
 8005dfc:	3708      	adds	r7, #8
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}

08005e02 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005e02:	b580      	push	{r7, lr}
 8005e04:	b082      	sub	sp, #8
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
 8005e0a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	885b      	ldrh	r3, [r3, #2]
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d106      	bne.n	8005e22 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f000 f929 	bl	8006074 <USBD_CtlSendStatus>
  }
}
 8005e22:	bf00      	nop
 8005e24:	3708      	adds	r7, #8
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}

08005e2a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b082      	sub	sp, #8
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
 8005e32:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e3a:	3b01      	subs	r3, #1
 8005e3c:	2b02      	cmp	r3, #2
 8005e3e:	d80b      	bhi.n	8005e58 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	885b      	ldrh	r3, [r3, #2]
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d10c      	bne.n	8005e62 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 f90f 	bl	8006074 <USBD_CtlSendStatus>
      }
      break;
 8005e56:	e004      	b.n	8005e62 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8005e58:	6839      	ldr	r1, [r7, #0]
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 f842 	bl	8005ee4 <USBD_CtlError>
      break;
 8005e60:	e000      	b.n	8005e64 <USBD_ClrFeature+0x3a>
      break;
 8005e62:	bf00      	nop
  }
}
 8005e64:	bf00      	nop
 8005e66:	3708      	adds	r7, #8
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	781a      	ldrb	r2, [r3, #0]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	785a      	ldrb	r2, [r3, #1]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	3302      	adds	r3, #2
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	b29a      	uxth	r2, r3
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	3303      	adds	r3, #3
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	021b      	lsls	r3, r3, #8
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	4413      	add	r3, r2
 8005e9c:	b29a      	uxth	r2, r3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	3304      	adds	r3, #4
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	b29a      	uxth	r2, r3
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	3305      	adds	r3, #5
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	021b      	lsls	r3, r3, #8
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	4413      	add	r3, r2
 8005eb8:	b29a      	uxth	r2, r3
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	3306      	adds	r3, #6
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	3307      	adds	r3, #7
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	021b      	lsls	r3, r3, #8
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	4413      	add	r3, r2
 8005ed4:	b29a      	uxth	r2, r3
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	80da      	strh	r2, [r3, #6]

}
 8005eda:	bf00      	nop
 8005edc:	370c      	adds	r7, #12
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bc80      	pop	{r7}
 8005ee2:	4770      	bx	lr

08005ee4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8005eee:	2180      	movs	r1, #128	; 0x80
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 fe0d 	bl	8006b10 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005ef6:	2100      	movs	r1, #0
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 fe09 	bl	8006b10 <USBD_LL_StallEP>
}
 8005efe:	bf00      	nop
 8005f00:	3708      	adds	r7, #8
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}

08005f06 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b086      	sub	sp, #24
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	60f8      	str	r0, [r7, #12]
 8005f0e:	60b9      	str	r1, [r7, #8]
 8005f10:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005f12:	2300      	movs	r3, #0
 8005f14:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d032      	beq.n	8005f82 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8005f1c:	68f8      	ldr	r0, [r7, #12]
 8005f1e:	f000 f834 	bl	8005f8a <USBD_GetLen>
 8005f22:	4603      	mov	r3, r0
 8005f24:	3301      	adds	r3, #1
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	005b      	lsls	r3, r3, #1
 8005f2a:	b29a      	uxth	r2, r3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8005f30:	7dfb      	ldrb	r3, [r7, #23]
 8005f32:	1c5a      	adds	r2, r3, #1
 8005f34:	75fa      	strb	r2, [r7, #23]
 8005f36:	461a      	mov	r2, r3
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	4413      	add	r3, r2
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	7812      	ldrb	r2, [r2, #0]
 8005f40:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005f42:	7dfb      	ldrb	r3, [r7, #23]
 8005f44:	1c5a      	adds	r2, r3, #1
 8005f46:	75fa      	strb	r2, [r7, #23]
 8005f48:	461a      	mov	r2, r3
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	2203      	movs	r2, #3
 8005f50:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8005f52:	e012      	b.n	8005f7a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	1c5a      	adds	r2, r3, #1
 8005f58:	60fa      	str	r2, [r7, #12]
 8005f5a:	7dfa      	ldrb	r2, [r7, #23]
 8005f5c:	1c51      	adds	r1, r2, #1
 8005f5e:	75f9      	strb	r1, [r7, #23]
 8005f60:	4611      	mov	r1, r2
 8005f62:	68ba      	ldr	r2, [r7, #8]
 8005f64:	440a      	add	r2, r1
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8005f6a:	7dfb      	ldrb	r3, [r7, #23]
 8005f6c:	1c5a      	adds	r2, r3, #1
 8005f6e:	75fa      	strb	r2, [r7, #23]
 8005f70:	461a      	mov	r2, r3
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	4413      	add	r3, r2
 8005f76:	2200      	movs	r2, #0
 8005f78:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d1e8      	bne.n	8005f54 <USBD_GetString+0x4e>
    }
  }
}
 8005f82:	bf00      	nop
 8005f84:	3718      	adds	r7, #24
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}

08005f8a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005f8a:	b480      	push	{r7}
 8005f8c:	b085      	sub	sp, #20
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005f92:	2300      	movs	r3, #0
 8005f94:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8005f96:	e005      	b.n	8005fa4 <USBD_GetLen+0x1a>
  {
    len++;
 8005f98:	7bfb      	ldrb	r3, [r7, #15]
 8005f9a:	3301      	adds	r3, #1
 8005f9c:	73fb      	strb	r3, [r7, #15]
    buf++;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d1f5      	bne.n	8005f98 <USBD_GetLen+0xe>
  }

  return len;
 8005fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3714      	adds	r7, #20
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bc80      	pop	{r7}
 8005fb6:	4770      	bx	lr

08005fb8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2202      	movs	r2, #2
 8005fca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005fce:	88fa      	ldrh	r2, [r7, #6]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8005fd4:	88fa      	ldrh	r2, [r7, #6]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005fda:	88fb      	ldrh	r3, [r7, #6]
 8005fdc:	68ba      	ldr	r2, [r7, #8]
 8005fde:	2100      	movs	r1, #0
 8005fe0:	68f8      	ldr	r0, [r7, #12]
 8005fe2:	f000 fe17 	bl	8006c14 <USBD_LL_Transmit>

  return USBD_OK;
 8005fe6:	2300      	movs	r3, #0
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3710      	adds	r7, #16
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	60f8      	str	r0, [r7, #12]
 8005ff8:	60b9      	str	r1, [r7, #8]
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005ffe:	88fb      	ldrh	r3, [r7, #6]
 8006000:	68ba      	ldr	r2, [r7, #8]
 8006002:	2100      	movs	r1, #0
 8006004:	68f8      	ldr	r0, [r7, #12]
 8006006:	f000 fe05 	bl	8006c14 <USBD_LL_Transmit>

  return USBD_OK;
 800600a:	2300      	movs	r3, #0
}
 800600c:	4618      	mov	r0, r3
 800600e:	3710      	adds	r7, #16
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	4613      	mov	r3, r2
 8006020:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2203      	movs	r2, #3
 8006026:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800602a:	88fa      	ldrh	r2, [r7, #6]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8006032:	88fa      	ldrh	r2, [r7, #6]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800603a:	88fb      	ldrh	r3, [r7, #6]
 800603c:	68ba      	ldr	r2, [r7, #8]
 800603e:	2100      	movs	r1, #0
 8006040:	68f8      	ldr	r0, [r7, #12]
 8006042:	f000 fe0a 	bl	8006c5a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006046:	2300      	movs	r3, #0
}
 8006048:	4618      	mov	r0, r3
 800604a:	3710      	adds	r7, #16
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	4613      	mov	r3, r2
 800605c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800605e:	88fb      	ldrh	r3, [r7, #6]
 8006060:	68ba      	ldr	r2, [r7, #8]
 8006062:	2100      	movs	r1, #0
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f000 fdf8 	bl	8006c5a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800606a:	2300      	movs	r3, #0
}
 800606c:	4618      	mov	r0, r3
 800606e:	3710      	adds	r7, #16
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b082      	sub	sp, #8
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2204      	movs	r2, #4
 8006080:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006084:	2300      	movs	r3, #0
 8006086:	2200      	movs	r2, #0
 8006088:	2100      	movs	r1, #0
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 fdc2 	bl	8006c14 <USBD_LL_Transmit>

  return USBD_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3708      	adds	r7, #8
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}

0800609a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800609a:	b580      	push	{r7, lr}
 800609c:	b082      	sub	sp, #8
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2205      	movs	r2, #5
 80060a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80060aa:	2300      	movs	r3, #0
 80060ac:	2200      	movs	r2, #0
 80060ae:	2100      	movs	r1, #0
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 fdd2 	bl	8006c5a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3708      	adds	r7, #8
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80060c4:	2200      	movs	r2, #0
 80060c6:	4912      	ldr	r1, [pc, #72]	; (8006110 <MX_USB_DEVICE_Init+0x50>)
 80060c8:	4812      	ldr	r0, [pc, #72]	; (8006114 <MX_USB_DEVICE_Init+0x54>)
 80060ca:	f7fe ff6c 	bl	8004fa6 <USBD_Init>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d001      	beq.n	80060d8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80060d4:	f7fa f93e 	bl	8000354 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80060d8:	490f      	ldr	r1, [pc, #60]	; (8006118 <MX_USB_DEVICE_Init+0x58>)
 80060da:	480e      	ldr	r0, [pc, #56]	; (8006114 <MX_USB_DEVICE_Init+0x54>)
 80060dc:	f7fe ff8e 	bl	8004ffc <USBD_RegisterClass>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d001      	beq.n	80060ea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80060e6:	f7fa f935 	bl	8000354 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80060ea:	490c      	ldr	r1, [pc, #48]	; (800611c <MX_USB_DEVICE_Init+0x5c>)
 80060ec:	4809      	ldr	r0, [pc, #36]	; (8006114 <MX_USB_DEVICE_Init+0x54>)
 80060ee:	f7fe febf 	bl	8004e70 <USBD_CDC_RegisterInterface>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d001      	beq.n	80060fc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80060f8:	f7fa f92c 	bl	8000354 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80060fc:	4805      	ldr	r0, [pc, #20]	; (8006114 <MX_USB_DEVICE_Init+0x54>)
 80060fe:	f7fe ff96 	bl	800502e <USBD_Start>
 8006102:	4603      	mov	r3, r0
 8006104:	2b00      	cmp	r3, #0
 8006106:	d001      	beq.n	800610c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006108:	f7fa f924 	bl	8000354 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800610c:	bf00      	nop
 800610e:	bd80      	pop	{r7, pc}
 8006110:	20000134 	.word	0x20000134
 8006114:	20000494 	.word	0x20000494
 8006118:	20000018 	.word	0x20000018
 800611c:	20000124 	.word	0x20000124

08006120 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	huart2.Instance = USART2;
 8006124:	4b1b      	ldr	r3, [pc, #108]	; (8006194 <CDC_Init_FS+0x74>)
 8006126:	4a1c      	ldr	r2, [pc, #112]	; (8006198 <CDC_Init_FS+0x78>)
 8006128:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800612a:	4b1a      	ldr	r3, [pc, #104]	; (8006194 <CDC_Init_FS+0x74>)
 800612c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006130:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006132:	4b18      	ldr	r3, [pc, #96]	; (8006194 <CDC_Init_FS+0x74>)
 8006134:	2200      	movs	r2, #0
 8006136:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8006138:	4b16      	ldr	r3, [pc, #88]	; (8006194 <CDC_Init_FS+0x74>)
 800613a:	2200      	movs	r2, #0
 800613c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800613e:	4b15      	ldr	r3, [pc, #84]	; (8006194 <CDC_Init_FS+0x74>)
 8006140:	2200      	movs	r2, #0
 8006142:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006144:	4b13      	ldr	r3, [pc, #76]	; (8006194 <CDC_Init_FS+0x74>)
 8006146:	2200      	movs	r2, #0
 8006148:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800614a:	4b12      	ldr	r3, [pc, #72]	; (8006194 <CDC_Init_FS+0x74>)
 800614c:	220c      	movs	r2, #12
 800614e:	615a      	str	r2, [r3, #20]

	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8006150:	4810      	ldr	r0, [pc, #64]	; (8006194 <CDC_Init_FS+0x74>)
 8006152:	f7fc fd6d 	bl	8002c30 <HAL_UART_Init>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d001      	beq.n	8006160 <CDC_Init_FS+0x40>
		/* Initialization Error */
		Error_Handler();
 800615c:	f7fa f8fa 	bl	8000354 <Error_Handler>
	}

	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006160:	2200      	movs	r2, #0
 8006162:	490e      	ldr	r1, [pc, #56]	; (800619c <CDC_Init_FS+0x7c>)
 8006164:	480e      	ldr	r0, [pc, #56]	; (80061a0 <CDC_Init_FS+0x80>)
 8006166:	f7fe fe99 	bl	8004e9c <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800616a:	490e      	ldr	r1, [pc, #56]	; (80061a4 <CDC_Init_FS+0x84>)
 800616c:	480c      	ldr	r0, [pc, #48]	; (80061a0 <CDC_Init_FS+0x80>)
 800616e:	f7fe feae 	bl	8004ece <USBD_CDC_SetRxBuffer>

	bufferpos = 0;
 8006172:	4b0d      	ldr	r3, [pc, #52]	; (80061a8 <CDC_Init_FS+0x88>)
 8006174:	2200      	movs	r2, #0
 8006176:	601a      	str	r2, [r3, #0]

	if (HAL_UART_Receive_DMA(&huart2, (uint8_t*) UserTxBufferFS,
 8006178:	f44f 7280 	mov.w	r2, #256	; 0x100
 800617c:	4907      	ldr	r1, [pc, #28]	; (800619c <CDC_Init_FS+0x7c>)
 800617e:	4805      	ldr	r0, [pc, #20]	; (8006194 <CDC_Init_FS+0x74>)
 8006180:	f7fc fe3c 	bl	8002dfc <HAL_UART_Receive_DMA>
 8006184:	4603      	mov	r3, r0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d001      	beq.n	800618e <CDC_Init_FS+0x6e>
			APP_RX_DATA_SIZE / 2) != HAL_OK) {
		/* Transfer error in reception process */
		Error_Handler();
 800618a:	f7fa f8e3 	bl	8000354 <Error_Handler>
	}

	return (USBD_OK);
 800618e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006190:	4618      	mov	r0, r3
 8006192:	bd80      	pop	{r7, pc}
 8006194:	2000044c 	.word	0x2000044c
 8006198:	40004400 	.word	0x40004400
 800619c:	20000958 	.word	0x20000958
 80061a0:	20000494 	.word	0x20000494
 80061a4:	20000758 	.word	0x20000758
 80061a8:	20000b58 	.word	0x20000b58

080061ac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	if (HAL_UART_DeInit(&huart2) != HAL_OK) {
 80061b0:	4805      	ldr	r0, [pc, #20]	; (80061c8 <CDC_DeInit_FS+0x1c>)
 80061b2:	f7fc fd8a 	bl	8002cca <HAL_UART_DeInit>
 80061b6:	4603      	mov	r3, r0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d001      	beq.n	80061c0 <CDC_DeInit_FS+0x14>
		/* Initialization Error */
		Error_Handler();
 80061bc:	f7fa f8ca 	bl	8000354 <Error_Handler>
	}
	return (USBD_OK);
 80061c0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	2000044c 	.word	0x2000044c

080061cc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	4603      	mov	r3, r0
 80061d4:	6039      	str	r1, [r7, #0]
 80061d6:	71fb      	strb	r3, [r7, #7]
 80061d8:	4613      	mov	r3, r2
 80061da:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t wValue;
	uint8_t dtr;
	uint8_t rts;
	switch (cmd) {
 80061dc:	79fb      	ldrb	r3, [r7, #7]
 80061de:	2b23      	cmp	r3, #35	; 0x23
 80061e0:	f200 80b4 	bhi.w	800634c <CDC_Control_FS+0x180>
 80061e4:	a201      	add	r2, pc, #4	; (adr r2, 80061ec <CDC_Control_FS+0x20>)
 80061e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ea:	bf00      	nop
 80061ec:	0800634d 	.word	0x0800634d
 80061f0:	0800634d 	.word	0x0800634d
 80061f4:	0800634d 	.word	0x0800634d
 80061f8:	0800634d 	.word	0x0800634d
 80061fc:	0800634d 	.word	0x0800634d
 8006200:	0800634d 	.word	0x0800634d
 8006204:	0800634d 	.word	0x0800634d
 8006208:	0800634d 	.word	0x0800634d
 800620c:	0800634d 	.word	0x0800634d
 8006210:	0800634d 	.word	0x0800634d
 8006214:	0800634d 	.word	0x0800634d
 8006218:	0800634d 	.word	0x0800634d
 800621c:	0800634d 	.word	0x0800634d
 8006220:	0800634d 	.word	0x0800634d
 8006224:	0800634d 	.word	0x0800634d
 8006228:	0800634d 	.word	0x0800634d
 800622c:	0800634d 	.word	0x0800634d
 8006230:	0800634d 	.word	0x0800634d
 8006234:	0800634d 	.word	0x0800634d
 8006238:	0800634d 	.word	0x0800634d
 800623c:	0800634d 	.word	0x0800634d
 8006240:	0800634d 	.word	0x0800634d
 8006244:	0800634d 	.word	0x0800634d
 8006248:	0800634d 	.word	0x0800634d
 800624c:	0800634d 	.word	0x0800634d
 8006250:	0800634d 	.word	0x0800634d
 8006254:	0800634d 	.word	0x0800634d
 8006258:	0800634d 	.word	0x0800634d
 800625c:	0800634d 	.word	0x0800634d
 8006260:	0800634d 	.word	0x0800634d
 8006264:	0800634d 	.word	0x0800634d
 8006268:	0800634d 	.word	0x0800634d
 800626c:	0800627d 	.word	0x0800627d
 8006270:	080062c5 	.word	0x080062c5
 8006274:	08006319 	.word	0x08006319
 8006278:	0800634d 	.word	0x0800634d
		/*                                        3 - Mark                             */
		/*                                        4 - Space                            */
		/* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
		/*******************************************************************************/
	case CDC_SET_LINE_CODING:
		LineCoding.bitrate = (uint32_t) (pbuf[0] | (pbuf[1] << 8)
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	461a      	mov	r2, r3
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	3301      	adds	r3, #1
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	021b      	lsls	r3, r3, #8
 800628a:	431a      	orrs	r2, r3
				| (pbuf[2] << 16) | (pbuf[3] << 24));
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	3302      	adds	r3, #2
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	041b      	lsls	r3, r3, #16
 8006294:	431a      	orrs	r2, r3
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	3303      	adds	r3, #3
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	061b      	lsls	r3, r3, #24
 800629e:	4313      	orrs	r3, r2
		LineCoding.bitrate = (uint32_t) (pbuf[0] | (pbuf[1] << 8)
 80062a0:	461a      	mov	r2, r3
 80062a2:	4b2d      	ldr	r3, [pc, #180]	; (8006358 <CDC_Control_FS+0x18c>)
 80062a4:	601a      	str	r2, [r3, #0]
		LineCoding.format = pbuf[4];
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	791a      	ldrb	r2, [r3, #4]
 80062aa:	4b2b      	ldr	r3, [pc, #172]	; (8006358 <CDC_Control_FS+0x18c>)
 80062ac:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	795a      	ldrb	r2, [r3, #5]
 80062b2:	4b29      	ldr	r3, [pc, #164]	; (8006358 <CDC_Control_FS+0x18c>)
 80062b4:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype = pbuf[6];
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	799a      	ldrb	r2, [r3, #6]
 80062ba:	4b27      	ldr	r3, [pc, #156]	; (8006358 <CDC_Control_FS+0x18c>)
 80062bc:	719a      	strb	r2, [r3, #6]
		ComPort_Config();
 80062be:	f000 f881 	bl	80063c4 <ComPort_Config>
		break;
 80062c2:	e044      	b.n	800634e <CDC_Control_FS+0x182>

	case CDC_GET_LINE_CODING:
		pbuf[0] = (uint8_t) (LineCoding.bitrate);
 80062c4:	4b24      	ldr	r3, [pc, #144]	; (8006358 <CDC_Control_FS+0x18c>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	b2da      	uxtb	r2, r3
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	701a      	strb	r2, [r3, #0]
		pbuf[1] = (uint8_t) (LineCoding.bitrate >> 8);
 80062ce:	4b22      	ldr	r3, [pc, #136]	; (8006358 <CDC_Control_FS+0x18c>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	0a1a      	lsrs	r2, r3, #8
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	3301      	adds	r3, #1
 80062d8:	b2d2      	uxtb	r2, r2
 80062da:	701a      	strb	r2, [r3, #0]
		pbuf[2] = (uint8_t) (LineCoding.bitrate >> 16);
 80062dc:	4b1e      	ldr	r3, [pc, #120]	; (8006358 <CDC_Control_FS+0x18c>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	0c1a      	lsrs	r2, r3, #16
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	3302      	adds	r3, #2
 80062e6:	b2d2      	uxtb	r2, r2
 80062e8:	701a      	strb	r2, [r3, #0]
		pbuf[3] = (uint8_t) (LineCoding.bitrate >> 24);
 80062ea:	4b1b      	ldr	r3, [pc, #108]	; (8006358 <CDC_Control_FS+0x18c>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	0e1a      	lsrs	r2, r3, #24
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	3303      	adds	r3, #3
 80062f4:	b2d2      	uxtb	r2, r2
 80062f6:	701a      	strb	r2, [r3, #0]
		pbuf[4] = LineCoding.format;
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	3304      	adds	r3, #4
 80062fc:	4a16      	ldr	r2, [pc, #88]	; (8006358 <CDC_Control_FS+0x18c>)
 80062fe:	7912      	ldrb	r2, [r2, #4]
 8006300:	701a      	strb	r2, [r3, #0]
		pbuf[5] = LineCoding.paritytype;
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	3305      	adds	r3, #5
 8006306:	4a14      	ldr	r2, [pc, #80]	; (8006358 <CDC_Control_FS+0x18c>)
 8006308:	7952      	ldrb	r2, [r2, #5]
 800630a:	701a      	strb	r2, [r3, #0]
		pbuf[6] = LineCoding.datatype;
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	3306      	adds	r3, #6
 8006310:	4a11      	ldr	r2, [pc, #68]	; (8006358 <CDC_Control_FS+0x18c>)
 8006312:	7992      	ldrb	r2, [r2, #6]
 8006314:	701a      	strb	r2, [r3, #0]

		break;
 8006316:	e01a      	b.n	800634e <CDC_Control_FS+0x182>

	case CDC_SET_CONTROL_LINE_STATE:

		wValue = pbuf[2];
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	789b      	ldrb	r3, [r3, #2]
 800631c:	73fb      	strb	r3, [r7, #15]
		dtr = (wValue & 0x01) ? 1 : 0;
 800631e:	7bfb      	ldrb	r3, [r7, #15]
 8006320:	f003 0301 	and.w	r3, r3, #1
 8006324:	73bb      	strb	r3, [r7, #14]
		rts = (wValue & 0x02) ? 1 : 0;
 8006326:	7bfb      	ldrb	r3, [r7, #15]
 8006328:	105b      	asrs	r3, r3, #1
 800632a:	b2db      	uxtb	r3, r3
 800632c:	f003 0301 	and.w	r3, r3, #1
 8006330:	737b      	strb	r3, [r7, #13]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, rts);
 8006332:	7b7b      	ldrb	r3, [r7, #13]
 8006334:	461a      	mov	r2, r3
 8006336:	2101      	movs	r1, #1
 8006338:	4808      	ldr	r0, [pc, #32]	; (800635c <CDC_Control_FS+0x190>)
 800633a:	f7fb f8ad 	bl	8001498 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, dtr);
 800633e:	7bbb      	ldrb	r3, [r7, #14]
 8006340:	461a      	mov	r2, r3
 8006342:	2102      	movs	r1, #2
 8006344:	4805      	ldr	r0, [pc, #20]	; (800635c <CDC_Control_FS+0x190>)
 8006346:	f7fb f8a7 	bl	8001498 <HAL_GPIO_WritePin>
		break;
 800634a:	e000      	b.n	800634e <CDC_Control_FS+0x182>
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 800634c:	bf00      	nop
	}

	return (USBD_OK);
 800634e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006350:	4618      	mov	r0, r3
 8006352:	3710      	adds	r7, #16
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	2000011c 	.word	0x2000011c
 800635c:	40010800 	.word	0x40010800

08006360 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b082      	sub	sp, #8
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800636a:	6879      	ldr	r1, [r7, #4]
 800636c:	4807      	ldr	r0, [pc, #28]	; (800638c <CDC_Receive_FS+0x2c>)
 800636e:	f7fe fdae 	bl	8004ece <USBD_CDC_SetRxBuffer>
	HAL_UART_Transmit_DMA(&huart2, Buf, *Len);
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	b29b      	uxth	r3, r3
 8006378:	461a      	mov	r2, r3
 800637a:	6879      	ldr	r1, [r7, #4]
 800637c:	4804      	ldr	r0, [pc, #16]	; (8006390 <CDC_Receive_FS+0x30>)
 800637e:	f7fc fcd1 	bl	8002d24 <HAL_UART_Transmit_DMA>
	return (USBD_OK);
 8006382:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006384:	4618      	mov	r0, r3
 8006386:	3708      	adds	r7, #8
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}
 800638c:	20000494 	.word	0x20000494
 8006390:	2000044c 	.word	0x2000044c

08006394 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	460b      	mov	r3, r1
 800639e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80063a0:	2300      	movs	r3, #0
 80063a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, (uint8_t*) Buf, Len);
 80063a4:	887b      	ldrh	r3, [r7, #2]
 80063a6:	461a      	mov	r2, r3
 80063a8:	6879      	ldr	r1, [r7, #4]
 80063aa:	4805      	ldr	r0, [pc, #20]	; (80063c0 <CDC_Transmit_FS+0x2c>)
 80063ac:	f7fe fd76 	bl	8004e9c <USBD_CDC_SetTxBuffer>
	USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80063b0:	4803      	ldr	r0, [pc, #12]	; (80063c0 <CDC_Transmit_FS+0x2c>)
 80063b2:	f7fe fd9f 	bl	8004ef4 <USBD_CDC_TransmitPacket>
  /* USER CODE END 7 */
  return result;
 80063b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3710      	adds	r7, #16
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	20000494 	.word	0x20000494

080063c4 <ComPort_Config>:
 *         Configure the COM Port with the parameters received from host.
 * @param  None.
 * @retval None.
 * @note   When a configuration is not supported, a default value is used.
 */
static void ComPort_Config(void) {
 80063c4:	b580      	push	{r7, lr}
 80063c6:	af00      	add	r7, sp, #0
	if (HAL_UART_DeInit(&huart2) != HAL_OK) {
 80063c8:	4837      	ldr	r0, [pc, #220]	; (80064a8 <ComPort_Config+0xe4>)
 80063ca:	f7fc fc7e 	bl	8002cca <HAL_UART_DeInit>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d001      	beq.n	80063d8 <ComPort_Config+0x14>
		/* Initialization Error */
		Error_Handler();
 80063d4:	f7f9 ffbe 	bl	8000354 <Error_Handler>
	}

	/* set the Stop bit */
	switch (LineCoding.format) {
 80063d8:	4b34      	ldr	r3, [pc, #208]	; (80064ac <ComPort_Config+0xe8>)
 80063da:	791b      	ldrb	r3, [r3, #4]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d002      	beq.n	80063e6 <ComPort_Config+0x22>
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	d004      	beq.n	80063ee <ComPort_Config+0x2a>
 80063e4:	e008      	b.n	80063f8 <ComPort_Config+0x34>
	case 0:
		huart2.Init.StopBits = UART_STOPBITS_1;
 80063e6:	4b30      	ldr	r3, [pc, #192]	; (80064a8 <ComPort_Config+0xe4>)
 80063e8:	2200      	movs	r2, #0
 80063ea:	60da      	str	r2, [r3, #12]
		break;
 80063ec:	e008      	b.n	8006400 <ComPort_Config+0x3c>
	case 2:
		huart2.Init.StopBits = UART_STOPBITS_2;
 80063ee:	4b2e      	ldr	r3, [pc, #184]	; (80064a8 <ComPort_Config+0xe4>)
 80063f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80063f4:	60da      	str	r2, [r3, #12]
		break;
 80063f6:	e003      	b.n	8006400 <ComPort_Config+0x3c>
	default:
		huart2.Init.StopBits = UART_STOPBITS_1;
 80063f8:	4b2b      	ldr	r3, [pc, #172]	; (80064a8 <ComPort_Config+0xe4>)
 80063fa:	2200      	movs	r2, #0
 80063fc:	60da      	str	r2, [r3, #12]
		break;
 80063fe:	bf00      	nop
	}

	/* set the parity bit*/
	switch (LineCoding.paritytype) {
 8006400:	4b2a      	ldr	r3, [pc, #168]	; (80064ac <ComPort_Config+0xe8>)
 8006402:	795b      	ldrb	r3, [r3, #5]
 8006404:	2b01      	cmp	r3, #1
 8006406:	d007      	beq.n	8006418 <ComPort_Config+0x54>
 8006408:	2b02      	cmp	r3, #2
 800640a:	d00a      	beq.n	8006422 <ComPort_Config+0x5e>
 800640c:	2b00      	cmp	r3, #0
 800640e:	d10d      	bne.n	800642c <ComPort_Config+0x68>
	case 0:
		huart2.Init.Parity = UART_PARITY_NONE;
 8006410:	4b25      	ldr	r3, [pc, #148]	; (80064a8 <ComPort_Config+0xe4>)
 8006412:	2200      	movs	r2, #0
 8006414:	611a      	str	r2, [r3, #16]
		break;
 8006416:	e00d      	b.n	8006434 <ComPort_Config+0x70>
	case 1:
		huart2.Init.Parity = UART_PARITY_ODD;
 8006418:	4b23      	ldr	r3, [pc, #140]	; (80064a8 <ComPort_Config+0xe4>)
 800641a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800641e:	611a      	str	r2, [r3, #16]
		break;
 8006420:	e008      	b.n	8006434 <ComPort_Config+0x70>
	case 2:
		huart2.Init.Parity = UART_PARITY_EVEN;
 8006422:	4b21      	ldr	r3, [pc, #132]	; (80064a8 <ComPort_Config+0xe4>)
 8006424:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006428:	611a      	str	r2, [r3, #16]
		break;
 800642a:	e003      	b.n	8006434 <ComPort_Config+0x70>
	default:
		huart2.Init.Parity = UART_PARITY_NONE;
 800642c:	4b1e      	ldr	r3, [pc, #120]	; (80064a8 <ComPort_Config+0xe4>)
 800642e:	2200      	movs	r2, #0
 8006430:	611a      	str	r2, [r3, #16]
		break;
 8006432:	bf00      	nop
	}

	/*set the data type : only 8bits and 9bits is supported */
	switch (LineCoding.datatype) {
 8006434:	4b1d      	ldr	r3, [pc, #116]	; (80064ac <ComPort_Config+0xe8>)
 8006436:	799b      	ldrb	r3, [r3, #6]
 8006438:	2b07      	cmp	r3, #7
 800643a:	d002      	beq.n	8006442 <ComPort_Config+0x7e>
 800643c:	2b08      	cmp	r3, #8
 800643e:	d004      	beq.n	800644a <ComPort_Config+0x86>
 8006440:	e010      	b.n	8006464 <ComPort_Config+0xa0>
	case 0x07:
		/* With this configuration a parity (Even or Odd) must be set */
		huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006442:	4b19      	ldr	r3, [pc, #100]	; (80064a8 <ComPort_Config+0xe4>)
 8006444:	2200      	movs	r2, #0
 8006446:	609a      	str	r2, [r3, #8]
		break;
 8006448:	e010      	b.n	800646c <ComPort_Config+0xa8>
	case 0x08:
		if (huart2.Init.Parity == UART_PARITY_NONE) {
 800644a:	4b17      	ldr	r3, [pc, #92]	; (80064a8 <ComPort_Config+0xe4>)
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d103      	bne.n	800645a <ComPort_Config+0x96>
			huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006452:	4b15      	ldr	r3, [pc, #84]	; (80064a8 <ComPort_Config+0xe4>)
 8006454:	2200      	movs	r2, #0
 8006456:	609a      	str	r2, [r3, #8]
		} else {
			huart2.Init.WordLength = UART_WORDLENGTH_9B;
		}

		break;
 8006458:	e008      	b.n	800646c <ComPort_Config+0xa8>
			huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800645a:	4b13      	ldr	r3, [pc, #76]	; (80064a8 <ComPort_Config+0xe4>)
 800645c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006460:	609a      	str	r2, [r3, #8]
		break;
 8006462:	e003      	b.n	800646c <ComPort_Config+0xa8>
	default:
		huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006464:	4b10      	ldr	r3, [pc, #64]	; (80064a8 <ComPort_Config+0xe4>)
 8006466:	2200      	movs	r2, #0
 8006468:	609a      	str	r2, [r3, #8]
		break;
 800646a:	bf00      	nop
	}

	huart2.Init.BaudRate = LineCoding.bitrate;
 800646c:	4b0f      	ldr	r3, [pc, #60]	; (80064ac <ComPort_Config+0xe8>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a0d      	ldr	r2, [pc, #52]	; (80064a8 <ComPort_Config+0xe4>)
 8006472:	6053      	str	r3, [r2, #4]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006474:	4b0c      	ldr	r3, [pc, #48]	; (80064a8 <ComPort_Config+0xe4>)
 8006476:	2200      	movs	r2, #0
 8006478:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800647a:	4b0b      	ldr	r3, [pc, #44]	; (80064a8 <ComPort_Config+0xe4>)
 800647c:	220c      	movs	r2, #12
 800647e:	615a      	str	r2, [r3, #20]

	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8006480:	4809      	ldr	r0, [pc, #36]	; (80064a8 <ComPort_Config+0xe4>)
 8006482:	f7fc fbd5 	bl	8002c30 <HAL_UART_Init>
 8006486:	4603      	mov	r3, r0
 8006488:	2b00      	cmp	r3, #0
 800648a:	d001      	beq.n	8006490 <ComPort_Config+0xcc>
		/* Initialization Error */
		Error_Handler();
 800648c:	f7f9 ff62 	bl	8000354 <Error_Handler>
	}

	/* Start reception: provide the buffer pointer with offset and the buffer size */
	bufferpos = 0;
 8006490:	4b07      	ldr	r3, [pc, #28]	; (80064b0 <ComPort_Config+0xec>)
 8006492:	2200      	movs	r2, #0
 8006494:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart2, (uint8_t*) UserTxBufferFS, APP_RX_DATA_SIZE / 2);
 8006496:	f44f 7280 	mov.w	r2, #256	; 0x100
 800649a:	4906      	ldr	r1, [pc, #24]	; (80064b4 <ComPort_Config+0xf0>)
 800649c:	4802      	ldr	r0, [pc, #8]	; (80064a8 <ComPort_Config+0xe4>)
 800649e:	f7fc fcad 	bl	8002dfc <HAL_UART_Receive_DMA>
}
 80064a2:	bf00      	nop
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	2000044c 	.word	0x2000044c
 80064ac:	2000011c 	.word	0x2000011c
 80064b0:	20000b58 	.word	0x20000b58
 80064b4:	20000958 	.word	0x20000958

080064b8 <HAL_UART_RxCpltCallback>:
/**
 * @brief  Rx Transfer completed callback
 * @param  huart: UART handle
 * @retval None
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
	bufferpos = !bufferpos;
 80064c0:	4b16      	ldr	r3, [pc, #88]	; (800651c <HAL_UART_RxCpltCallback+0x64>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	bf0c      	ite	eq
 80064c8:	2301      	moveq	r3, #1
 80064ca:	2300      	movne	r3, #0
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	461a      	mov	r2, r3
 80064d0:	4b12      	ldr	r3, [pc, #72]	; (800651c <HAL_UART_RxCpltCallback+0x64>)
 80064d2:	601a      	str	r2, [r3, #0]
	if (HAL_UART_Receive_DMA(&huart2, (uint8_t*) &UserTxBufferFS[bufferpos*APP_TX_DATA_SIZE/2],
 80064d4:	4b11      	ldr	r3, [pc, #68]	; (800651c <HAL_UART_RxCpltCallback+0x64>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	025b      	lsls	r3, r3, #9
 80064da:	085b      	lsrs	r3, r3, #1
 80064dc:	4a10      	ldr	r2, [pc, #64]	; (8006520 <HAL_UART_RxCpltCallback+0x68>)
 80064de:	4413      	add	r3, r2
 80064e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80064e4:	4619      	mov	r1, r3
 80064e6:	480f      	ldr	r0, [pc, #60]	; (8006524 <HAL_UART_RxCpltCallback+0x6c>)
 80064e8:	f7fc fc88 	bl	8002dfc <HAL_UART_Receive_DMA>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d001      	beq.n	80064f6 <HAL_UART_RxCpltCallback+0x3e>
				APP_RX_DATA_SIZE / 2) != HAL_OK) {
		Error_Handler();
 80064f2:	f7f9 ff2f 	bl	8000354 <Error_Handler>
	}
	CDC_Transmit_FS(&UserTxBufferFS[!bufferpos*APP_TX_DATA_SIZE/2+APP_TX_DATA_SIZE/4], APP_TX_DATA_SIZE/4); //Invert bufferpos again because we inverted it for the receive call
 80064f6:	4b09      	ldr	r3, [pc, #36]	; (800651c <HAL_UART_RxCpltCallback+0x64>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d102      	bne.n	8006504 <HAL_UART_RxCpltCallback+0x4c>
 80064fe:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8006502:	e000      	b.n	8006506 <HAL_UART_RxCpltCallback+0x4e>
 8006504:	2380      	movs	r3, #128	; 0x80
 8006506:	4a06      	ldr	r2, [pc, #24]	; (8006520 <HAL_UART_RxCpltCallback+0x68>)
 8006508:	4413      	add	r3, r2
 800650a:	2180      	movs	r1, #128	; 0x80
 800650c:	4618      	mov	r0, r3
 800650e:	f7ff ff41 	bl	8006394 <CDC_Transmit_FS>

}
 8006512:	bf00      	nop
 8006514:	3708      	adds	r7, #8
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	20000b58 	.word	0x20000b58
 8006520:	20000958 	.word	0x20000958
 8006524:	2000044c 	.word	0x2000044c

08006528 <UART_Early_Exit>:

void UART_Early_Exit(UART_HandleTypeDef *huart, uint32_t CNDTR)  {
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
	bufferpos = !bufferpos;
 8006532:	4b20      	ldr	r3, [pc, #128]	; (80065b4 <UART_Early_Exit+0x8c>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	bf0c      	ite	eq
 800653a:	2301      	moveq	r3, #1
 800653c:	2300      	movne	r3, #0
 800653e:	b2db      	uxtb	r3, r3
 8006540:	461a      	mov	r2, r3
 8006542:	4b1c      	ldr	r3, [pc, #112]	; (80065b4 <UART_Early_Exit+0x8c>)
 8006544:	601a      	str	r2, [r3, #0]
		if (HAL_UART_Receive_DMA(&huart2, (uint8_t*) &UserTxBufferFS[bufferpos*APP_TX_DATA_SIZE/2],
 8006546:	4b1b      	ldr	r3, [pc, #108]	; (80065b4 <UART_Early_Exit+0x8c>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	025b      	lsls	r3, r3, #9
 800654c:	085b      	lsrs	r3, r3, #1
 800654e:	4a1a      	ldr	r2, [pc, #104]	; (80065b8 <UART_Early_Exit+0x90>)
 8006550:	4413      	add	r3, r2
 8006552:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006556:	4619      	mov	r1, r3
 8006558:	4818      	ldr	r0, [pc, #96]	; (80065bc <UART_Early_Exit+0x94>)
 800655a:	f7fc fc4f 	bl	8002dfc <HAL_UART_Receive_DMA>
 800655e:	4603      	mov	r3, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d001      	beq.n	8006568 <UART_Early_Exit+0x40>
					APP_RX_DATA_SIZE / 2) != HAL_OK) {
			Error_Handler();
 8006564:	f7f9 fef6 	bl	8000354 <Error_Handler>
		}
		uint32_t len = APP_TX_DATA_SIZE/2 - CNDTR; //Received number of bytes by the DMA
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800656e:	60fb      	str	r3, [r7, #12]
		uint32_t offset = len > APP_TX_DATA_SIZE/4 ? APP_TX_DATA_SIZE/4 : 0;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2b80      	cmp	r3, #128	; 0x80
 8006574:	d901      	bls.n	800657a <UART_Early_Exit+0x52>
 8006576:	2380      	movs	r3, #128	; 0x80
 8006578:	e000      	b.n	800657c <UART_Early_Exit+0x54>
 800657a:	2300      	movs	r3, #0
 800657c:	60bb      	str	r3, [r7, #8]
		len = len % (APP_TX_DATA_SIZE/4); //Remove the Half way callback
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006584:	60fb      	str	r3, [r7, #12]

		CDC_Transmit_FS(&UserTxBufferFS[!bufferpos*APP_TX_DATA_SIZE/2+offset], len); //Invert bufferpos again because we inverted it for the receive call
 8006586:	4b0b      	ldr	r3, [pc, #44]	; (80065b4 <UART_Early_Exit+0x8c>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d102      	bne.n	8006594 <UART_Early_Exit+0x6c>
 800658e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006592:	e000      	b.n	8006596 <UART_Early_Exit+0x6e>
 8006594:	2200      	movs	r2, #0
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	4413      	add	r3, r2
 800659a:	4a07      	ldr	r2, [pc, #28]	; (80065b8 <UART_Early_Exit+0x90>)
 800659c:	4413      	add	r3, r2
 800659e:	68fa      	ldr	r2, [r7, #12]
 80065a0:	b292      	uxth	r2, r2
 80065a2:	4611      	mov	r1, r2
 80065a4:	4618      	mov	r0, r3
 80065a6:	f7ff fef5 	bl	8006394 <CDC_Transmit_FS>
}
 80065aa:	bf00      	nop
 80065ac:	3710      	adds	r7, #16
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	bf00      	nop
 80065b4:	20000b58 	.word	0x20000b58
 80065b8:	20000958 	.word	0x20000958
 80065bc:	2000044c 	.word	0x2000044c

080065c0 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart) {
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b082      	sub	sp, #8
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
	CDC_Transmit_FS(&UserTxBufferFS[bufferpos*APP_TX_DATA_SIZE/2], APP_TX_DATA_SIZE/4);
 80065c8:	4b06      	ldr	r3, [pc, #24]	; (80065e4 <HAL_UART_RxHalfCpltCallback+0x24>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	025b      	lsls	r3, r3, #9
 80065ce:	085b      	lsrs	r3, r3, #1
 80065d0:	4a05      	ldr	r2, [pc, #20]	; (80065e8 <HAL_UART_RxHalfCpltCallback+0x28>)
 80065d2:	4413      	add	r3, r2
 80065d4:	2180      	movs	r1, #128	; 0x80
 80065d6:	4618      	mov	r0, r3
 80065d8:	f7ff fedc 	bl	8006394 <CDC_Transmit_FS>
}
 80065dc:	bf00      	nop
 80065de:	3708      	adds	r7, #8
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	20000b58 	.word	0x20000b58
 80065e8:	20000958 	.word	0x20000958

080065ec <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b082      	sub	sp, #8
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80065f4:	4803      	ldr	r0, [pc, #12]	; (8006604 <HAL_UART_TxCpltCallback+0x18>)
 80065f6:	f7fe fcac 	bl	8004f52 <USBD_CDC_ReceivePacket>
}
 80065fa:	bf00      	nop
 80065fc:	3708      	adds	r7, #8
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop
 8006604:	20000494 	.word	0x20000494

08006608 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	4603      	mov	r3, r0
 8006610:	6039      	str	r1, [r7, #0]
 8006612:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	2212      	movs	r2, #18
 8006618:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800661a:	4b03      	ldr	r3, [pc, #12]	; (8006628 <USBD_FS_DeviceDescriptor+0x20>)
}
 800661c:	4618      	mov	r0, r3
 800661e:	370c      	adds	r7, #12
 8006620:	46bd      	mov	sp, r7
 8006622:	bc80      	pop	{r7}
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	20000150 	.word	0x20000150

0800662c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
 8006632:	4603      	mov	r3, r0
 8006634:	6039      	str	r1, [r7, #0]
 8006636:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	2204      	movs	r2, #4
 800663c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800663e:	4b03      	ldr	r3, [pc, #12]	; (800664c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006640:	4618      	mov	r0, r3
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	bc80      	pop	{r7}
 8006648:	4770      	bx	lr
 800664a:	bf00      	nop
 800664c:	20000164 	.word	0x20000164

08006650 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b082      	sub	sp, #8
 8006654:	af00      	add	r7, sp, #0
 8006656:	4603      	mov	r3, r0
 8006658:	6039      	str	r1, [r7, #0]
 800665a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800665c:	79fb      	ldrb	r3, [r7, #7]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d105      	bne.n	800666e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006662:	683a      	ldr	r2, [r7, #0]
 8006664:	4907      	ldr	r1, [pc, #28]	; (8006684 <USBD_FS_ProductStrDescriptor+0x34>)
 8006666:	4808      	ldr	r0, [pc, #32]	; (8006688 <USBD_FS_ProductStrDescriptor+0x38>)
 8006668:	f7ff fc4d 	bl	8005f06 <USBD_GetString>
 800666c:	e004      	b.n	8006678 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800666e:	683a      	ldr	r2, [r7, #0]
 8006670:	4904      	ldr	r1, [pc, #16]	; (8006684 <USBD_FS_ProductStrDescriptor+0x34>)
 8006672:	4805      	ldr	r0, [pc, #20]	; (8006688 <USBD_FS_ProductStrDescriptor+0x38>)
 8006674:	f7ff fc47 	bl	8005f06 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006678:	4b02      	ldr	r3, [pc, #8]	; (8006684 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800667a:	4618      	mov	r0, r3
 800667c:	3708      	adds	r7, #8
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
 8006682:	bf00      	nop
 8006684:	20000b5c 	.word	0x20000b5c
 8006688:	08006de4 	.word	0x08006de4

0800668c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b082      	sub	sp, #8
 8006690:	af00      	add	r7, sp, #0
 8006692:	4603      	mov	r3, r0
 8006694:	6039      	str	r1, [r7, #0]
 8006696:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006698:	683a      	ldr	r2, [r7, #0]
 800669a:	4904      	ldr	r1, [pc, #16]	; (80066ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800669c:	4804      	ldr	r0, [pc, #16]	; (80066b0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800669e:	f7ff fc32 	bl	8005f06 <USBD_GetString>
  return USBD_StrDesc;
 80066a2:	4b02      	ldr	r3, [pc, #8]	; (80066ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3708      	adds	r7, #8
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	20000b5c 	.word	0x20000b5c
 80066b0:	08006df8 	.word	0x08006df8

080066b4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	4603      	mov	r3, r0
 80066bc:	6039      	str	r1, [r7, #0]
 80066be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	221a      	movs	r2, #26
 80066c4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80066c6:	f000 f843 	bl	8006750 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80066ca:	4b02      	ldr	r3, [pc, #8]	; (80066d4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3708      	adds	r7, #8
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	20000168 	.word	0x20000168

080066d8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
 80066de:	4603      	mov	r3, r0
 80066e0:	6039      	str	r1, [r7, #0]
 80066e2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80066e4:	79fb      	ldrb	r3, [r7, #7]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d105      	bne.n	80066f6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80066ea:	683a      	ldr	r2, [r7, #0]
 80066ec:	4907      	ldr	r1, [pc, #28]	; (800670c <USBD_FS_ConfigStrDescriptor+0x34>)
 80066ee:	4808      	ldr	r0, [pc, #32]	; (8006710 <USBD_FS_ConfigStrDescriptor+0x38>)
 80066f0:	f7ff fc09 	bl	8005f06 <USBD_GetString>
 80066f4:	e004      	b.n	8006700 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80066f6:	683a      	ldr	r2, [r7, #0]
 80066f8:	4904      	ldr	r1, [pc, #16]	; (800670c <USBD_FS_ConfigStrDescriptor+0x34>)
 80066fa:	4805      	ldr	r0, [pc, #20]	; (8006710 <USBD_FS_ConfigStrDescriptor+0x38>)
 80066fc:	f7ff fc03 	bl	8005f06 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006700:	4b02      	ldr	r3, [pc, #8]	; (800670c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006702:	4618      	mov	r0, r3
 8006704:	3708      	adds	r7, #8
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
 800670a:	bf00      	nop
 800670c:	20000b5c 	.word	0x20000b5c
 8006710:	08006e04 	.word	0x08006e04

08006714 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
 800671a:	4603      	mov	r3, r0
 800671c:	6039      	str	r1, [r7, #0]
 800671e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006720:	79fb      	ldrb	r3, [r7, #7]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d105      	bne.n	8006732 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006726:	683a      	ldr	r2, [r7, #0]
 8006728:	4907      	ldr	r1, [pc, #28]	; (8006748 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800672a:	4808      	ldr	r0, [pc, #32]	; (800674c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800672c:	f7ff fbeb 	bl	8005f06 <USBD_GetString>
 8006730:	e004      	b.n	800673c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006732:	683a      	ldr	r2, [r7, #0]
 8006734:	4904      	ldr	r1, [pc, #16]	; (8006748 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006736:	4805      	ldr	r0, [pc, #20]	; (800674c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006738:	f7ff fbe5 	bl	8005f06 <USBD_GetString>
  }
  return USBD_StrDesc;
 800673c:	4b02      	ldr	r3, [pc, #8]	; (8006748 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800673e:	4618      	mov	r0, r3
 8006740:	3708      	adds	r7, #8
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop
 8006748:	20000b5c 	.word	0x20000b5c
 800674c:	08006e10 	.word	0x08006e10

08006750 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006756:	4b0f      	ldr	r3, [pc, #60]	; (8006794 <Get_SerialNum+0x44>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800675c:	4b0e      	ldr	r3, [pc, #56]	; (8006798 <Get_SerialNum+0x48>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006762:	4b0e      	ldr	r3, [pc, #56]	; (800679c <Get_SerialNum+0x4c>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4413      	add	r3, r2
 800676e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d009      	beq.n	800678a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006776:	2208      	movs	r2, #8
 8006778:	4909      	ldr	r1, [pc, #36]	; (80067a0 <Get_SerialNum+0x50>)
 800677a:	68f8      	ldr	r0, [r7, #12]
 800677c:	f000 f814 	bl	80067a8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006780:	2204      	movs	r2, #4
 8006782:	4908      	ldr	r1, [pc, #32]	; (80067a4 <Get_SerialNum+0x54>)
 8006784:	68b8      	ldr	r0, [r7, #8]
 8006786:	f000 f80f 	bl	80067a8 <IntToUnicode>
  }
}
 800678a:	bf00      	nop
 800678c:	3710      	adds	r7, #16
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
 8006792:	bf00      	nop
 8006794:	1ffff7e8 	.word	0x1ffff7e8
 8006798:	1ffff7ec 	.word	0x1ffff7ec
 800679c:	1ffff7f0 	.word	0x1ffff7f0
 80067a0:	2000016a 	.word	0x2000016a
 80067a4:	2000017a 	.word	0x2000017a

080067a8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b087      	sub	sp, #28
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	4613      	mov	r3, r2
 80067b4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80067b6:	2300      	movs	r3, #0
 80067b8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80067ba:	2300      	movs	r3, #0
 80067bc:	75fb      	strb	r3, [r7, #23]
 80067be:	e027      	b.n	8006810 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	0f1b      	lsrs	r3, r3, #28
 80067c4:	2b09      	cmp	r3, #9
 80067c6:	d80b      	bhi.n	80067e0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	0f1b      	lsrs	r3, r3, #28
 80067cc:	b2da      	uxtb	r2, r3
 80067ce:	7dfb      	ldrb	r3, [r7, #23]
 80067d0:	005b      	lsls	r3, r3, #1
 80067d2:	4619      	mov	r1, r3
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	440b      	add	r3, r1
 80067d8:	3230      	adds	r2, #48	; 0x30
 80067da:	b2d2      	uxtb	r2, r2
 80067dc:	701a      	strb	r2, [r3, #0]
 80067de:	e00a      	b.n	80067f6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	0f1b      	lsrs	r3, r3, #28
 80067e4:	b2da      	uxtb	r2, r3
 80067e6:	7dfb      	ldrb	r3, [r7, #23]
 80067e8:	005b      	lsls	r3, r3, #1
 80067ea:	4619      	mov	r1, r3
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	440b      	add	r3, r1
 80067f0:	3237      	adds	r2, #55	; 0x37
 80067f2:	b2d2      	uxtb	r2, r2
 80067f4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	011b      	lsls	r3, r3, #4
 80067fa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80067fc:	7dfb      	ldrb	r3, [r7, #23]
 80067fe:	005b      	lsls	r3, r3, #1
 8006800:	3301      	adds	r3, #1
 8006802:	68ba      	ldr	r2, [r7, #8]
 8006804:	4413      	add	r3, r2
 8006806:	2200      	movs	r2, #0
 8006808:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800680a:	7dfb      	ldrb	r3, [r7, #23]
 800680c:	3301      	adds	r3, #1
 800680e:	75fb      	strb	r3, [r7, #23]
 8006810:	7dfa      	ldrb	r2, [r7, #23]
 8006812:	79fb      	ldrb	r3, [r7, #7]
 8006814:	429a      	cmp	r2, r3
 8006816:	d3d3      	bcc.n	80067c0 <IntToUnicode+0x18>
  }
}
 8006818:	bf00      	nop
 800681a:	371c      	adds	r7, #28
 800681c:	46bd      	mov	sp, r7
 800681e:	bc80      	pop	{r7}
 8006820:	4770      	bx	lr
	...

08006824 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a0d      	ldr	r2, [pc, #52]	; (8006868 <HAL_PCD_MspInit+0x44>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d113      	bne.n	800685e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006836:	4b0d      	ldr	r3, [pc, #52]	; (800686c <HAL_PCD_MspInit+0x48>)
 8006838:	69db      	ldr	r3, [r3, #28]
 800683a:	4a0c      	ldr	r2, [pc, #48]	; (800686c <HAL_PCD_MspInit+0x48>)
 800683c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006840:	61d3      	str	r3, [r2, #28]
 8006842:	4b0a      	ldr	r3, [pc, #40]	; (800686c <HAL_PCD_MspInit+0x48>)
 8006844:	69db      	ldr	r3, [r3, #28]
 8006846:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800684a:	60fb      	str	r3, [r7, #12]
 800684c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 2, 0);
 800684e:	2200      	movs	r2, #0
 8006850:	2102      	movs	r1, #2
 8006852:	2014      	movs	r0, #20
 8006854:	f7fa f8c1 	bl	80009da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006858:	2014      	movs	r0, #20
 800685a:	f7fa f8da 	bl	8000a12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800685e:	bf00      	nop
 8006860:	3710      	adds	r7, #16
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	40005c00 	.word	0x40005c00
 800686c:	40021000 	.word	0x40021000

08006870 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8006884:	4619      	mov	r1, r3
 8006886:	4610      	mov	r0, r2
 8006888:	f7fe fc19 	bl	80050be <USBD_LL_SetupStage>
}
 800688c:	bf00      	nop
 800688e:	3708      	adds	r7, #8
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}

08006894 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b082      	sub	sp, #8
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	460b      	mov	r3, r1
 800689e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 80068a6:	78fb      	ldrb	r3, [r7, #3]
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	015b      	lsls	r3, r3, #5
 80068ac:	4413      	add	r3, r2
 80068ae:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	78fb      	ldrb	r3, [r7, #3]
 80068b6:	4619      	mov	r1, r3
 80068b8:	f7fe fc4c 	bl	8005154 <USBD_LL_DataOutStage>
}
 80068bc:	bf00      	nop
 80068be:	3708      	adds	r7, #8
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b082      	sub	sp, #8
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	460b      	mov	r3, r1
 80068ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 80068d6:	78fb      	ldrb	r3, [r7, #3]
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	015b      	lsls	r3, r3, #5
 80068dc:	4413      	add	r3, r2
 80068de:	333c      	adds	r3, #60	; 0x3c
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	78fb      	ldrb	r3, [r7, #3]
 80068e4:	4619      	mov	r1, r3
 80068e6:	f7fe fca6 	bl	8005236 <USBD_LL_DataInStage>
}
 80068ea:	bf00      	nop
 80068ec:	3708      	adds	r7, #8
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b082      	sub	sp, #8
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006900:	4618      	mov	r0, r3
 8006902:	f7fe fdb6 	bl	8005472 <USBD_LL_SOF>
}
 8006906:	bf00      	nop
 8006908:	3708      	adds	r7, #8
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}

0800690e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800690e:	b580      	push	{r7, lr}
 8006910:	b084      	sub	sp, #16
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006916:	2301      	movs	r3, #1
 8006918:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	2b02      	cmp	r3, #2
 8006920:	d001      	beq.n	8006926 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006922:	f7f9 fd17 	bl	8000354 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800692c:	7bfa      	ldrb	r2, [r7, #15]
 800692e:	4611      	mov	r1, r2
 8006930:	4618      	mov	r0, r3
 8006932:	f7fe fd66 	bl	8005402 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800693c:	4618      	mov	r0, r3
 800693e:	f7fe fd1f 	bl	8005380 <USBD_LL_Reset>
}
 8006942:	bf00      	nop
 8006944:	3710      	adds	r7, #16
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
	...

0800694c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800695a:	4618      	mov	r0, r3
 800695c:	f7fe fd60 	bl	8005420 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	699b      	ldr	r3, [r3, #24]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d005      	beq.n	8006974 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006968:	4b04      	ldr	r3, [pc, #16]	; (800697c <HAL_PCD_SuspendCallback+0x30>)
 800696a:	691b      	ldr	r3, [r3, #16]
 800696c:	4a03      	ldr	r2, [pc, #12]	; (800697c <HAL_PCD_SuspendCallback+0x30>)
 800696e:	f043 0306 	orr.w	r3, r3, #6
 8006972:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006974:	bf00      	nop
 8006976:	3708      	adds	r7, #8
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}
 800697c:	e000ed00 	.word	0xe000ed00

08006980 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b082      	sub	sp, #8
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800698e:	4618      	mov	r0, r3
 8006990:	f7fe fd5a 	bl	8005448 <USBD_LL_Resume>
}
 8006994:	bf00      	nop
 8006996:	3708      	adds	r7, #8
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b082      	sub	sp, #8
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80069a4:	4a28      	ldr	r2, [pc, #160]	; (8006a48 <USBD_LL_Init+0xac>)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	4a26      	ldr	r2, [pc, #152]	; (8006a48 <USBD_LL_Init+0xac>)
 80069b0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80069b4:	4b24      	ldr	r3, [pc, #144]	; (8006a48 <USBD_LL_Init+0xac>)
 80069b6:	4a25      	ldr	r2, [pc, #148]	; (8006a4c <USBD_LL_Init+0xb0>)
 80069b8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80069ba:	4b23      	ldr	r3, [pc, #140]	; (8006a48 <USBD_LL_Init+0xac>)
 80069bc:	2208      	movs	r2, #8
 80069be:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80069c0:	4b21      	ldr	r3, [pc, #132]	; (8006a48 <USBD_LL_Init+0xac>)
 80069c2:	2202      	movs	r2, #2
 80069c4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80069c6:	4b20      	ldr	r3, [pc, #128]	; (8006a48 <USBD_LL_Init+0xac>)
 80069c8:	2200      	movs	r2, #0
 80069ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80069cc:	4b1e      	ldr	r3, [pc, #120]	; (8006a48 <USBD_LL_Init+0xac>)
 80069ce:	2200      	movs	r2, #0
 80069d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80069d2:	4b1d      	ldr	r3, [pc, #116]	; (8006a48 <USBD_LL_Init+0xac>)
 80069d4:	2200      	movs	r2, #0
 80069d6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80069d8:	481b      	ldr	r0, [pc, #108]	; (8006a48 <USBD_LL_Init+0xac>)
 80069da:	f7fa fd75 	bl	80014c8 <HAL_PCD_Init>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d001      	beq.n	80069e8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80069e4:	f7f9 fcb6 	bl	8000354 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80069ee:	2318      	movs	r3, #24
 80069f0:	2200      	movs	r2, #0
 80069f2:	2100      	movs	r1, #0
 80069f4:	f7fb fc0e 	bl	8002214 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80069fe:	2358      	movs	r3, #88	; 0x58
 8006a00:	2200      	movs	r2, #0
 8006a02:	2180      	movs	r1, #128	; 0x80
 8006a04:	f7fb fc06 	bl	8002214 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006a0e:	23c0      	movs	r3, #192	; 0xc0
 8006a10:	2200      	movs	r2, #0
 8006a12:	2181      	movs	r1, #129	; 0x81
 8006a14:	f7fb fbfe 	bl	8002214 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006a1e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006a22:	2200      	movs	r2, #0
 8006a24:	2101      	movs	r1, #1
 8006a26:	f7fb fbf5 	bl	8002214 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006a30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a34:	2200      	movs	r2, #0
 8006a36:	2182      	movs	r1, #130	; 0x82
 8006a38:	f7fb fbec 	bl	8002214 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3708      	adds	r7, #8
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	20000d5c 	.word	0x20000d5c
 8006a4c:	40005c00 	.word	0x40005c00

08006a50 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a66:	4618      	mov	r0, r3
 8006a68:	f7fa fe0f 	bl	800168a <HAL_PCD_Start>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a70:	7bfb      	ldrb	r3, [r7, #15]
 8006a72:	4618      	mov	r0, r3
 8006a74:	f000 f948 	bl	8006d08 <USBD_Get_USB_Status>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006a7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3710      	adds	r7, #16
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}

08006a86 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006a86:	b580      	push	{r7, lr}
 8006a88:	b084      	sub	sp, #16
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
 8006a8e:	4608      	mov	r0, r1
 8006a90:	4611      	mov	r1, r2
 8006a92:	461a      	mov	r2, r3
 8006a94:	4603      	mov	r3, r0
 8006a96:	70fb      	strb	r3, [r7, #3]
 8006a98:	460b      	mov	r3, r1
 8006a9a:	70bb      	strb	r3, [r7, #2]
 8006a9c:	4613      	mov	r3, r2
 8006a9e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006aae:	78bb      	ldrb	r3, [r7, #2]
 8006ab0:	883a      	ldrh	r2, [r7, #0]
 8006ab2:	78f9      	ldrb	r1, [r7, #3]
 8006ab4:	f7fa ff42 	bl	800193c <HAL_PCD_EP_Open>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006abc:	7bfb      	ldrb	r3, [r7, #15]
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f000 f922 	bl	8006d08 <USBD_Get_USB_Status>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8006ac8:	7bbb      	ldrb	r3, [r7, #14]
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3710      	adds	r7, #16
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}

08006ad2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ad2:	b580      	push	{r7, lr}
 8006ad4:	b084      	sub	sp, #16
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
 8006ada:	460b      	mov	r3, r1
 8006adc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006aec:	78fa      	ldrb	r2, [r7, #3]
 8006aee:	4611      	mov	r1, r2
 8006af0:	4618      	mov	r0, r3
 8006af2:	f7fa ff83 	bl	80019fc <HAL_PCD_EP_Close>
 8006af6:	4603      	mov	r3, r0
 8006af8:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006afa:	7bfb      	ldrb	r3, [r7, #15]
 8006afc:	4618      	mov	r0, r3
 8006afe:	f000 f903 	bl	8006d08 <USBD_Get_USB_Status>
 8006b02:	4603      	mov	r3, r0
 8006b04:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8006b06:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3710      	adds	r7, #16
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	460b      	mov	r3, r1
 8006b1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b20:	2300      	movs	r3, #0
 8006b22:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b2a:	78fa      	ldrb	r2, [r7, #3]
 8006b2c:	4611      	mov	r1, r2
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f7fb f82d 	bl	8001b8e <HAL_PCD_EP_SetStall>
 8006b34:	4603      	mov	r3, r0
 8006b36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b38:	7bfb      	ldrb	r3, [r7, #15]
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f000 f8e4 	bl	8006d08 <USBD_Get_USB_Status>
 8006b40:	4603      	mov	r3, r0
 8006b42:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8006b44:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3710      	adds	r7, #16
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}

08006b4e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006b4e:	b580      	push	{r7, lr}
 8006b50:	b084      	sub	sp, #16
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
 8006b56:	460b      	mov	r3, r1
 8006b58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b68:	78fa      	ldrb	r2, [r7, #3]
 8006b6a:	4611      	mov	r1, r2
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f7fb f868 	bl	8001c42 <HAL_PCD_EP_ClrStall>
 8006b72:	4603      	mov	r3, r0
 8006b74:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b76:	7bfb      	ldrb	r3, [r7, #15]
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f000 f8c5 	bl	8006d08 <USBD_Get_USB_Status>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8006b82:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3710      	adds	r7, #16
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}

08006b8c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b085      	sub	sp, #20
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	460b      	mov	r3, r1
 8006b96:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b9e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8006ba0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	da08      	bge.n	8006bba <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8006ba8:	78fb      	ldrb	r3, [r7, #3]
 8006baa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bae:	68fa      	ldr	r2, [r7, #12]
 8006bb0:	015b      	lsls	r3, r3, #5
 8006bb2:	4413      	add	r3, r2
 8006bb4:	332a      	adds	r3, #42	; 0x2a
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	e008      	b.n	8006bcc <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8006bba:	78fb      	ldrb	r3, [r7, #3]
 8006bbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bc0:	68fa      	ldr	r2, [r7, #12]
 8006bc2:	015b      	lsls	r3, r3, #5
 8006bc4:	4413      	add	r3, r2
 8006bc6:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8006bca:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3714      	adds	r7, #20
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bc80      	pop	{r7}
 8006bd4:	4770      	bx	lr

08006bd6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006bd6:	b580      	push	{r7, lr}
 8006bd8:	b084      	sub	sp, #16
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
 8006bde:	460b      	mov	r3, r1
 8006be0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006be2:	2300      	movs	r3, #0
 8006be4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006be6:	2300      	movs	r3, #0
 8006be8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006bf0:	78fa      	ldrb	r2, [r7, #3]
 8006bf2:	4611      	mov	r1, r2
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f7fa fe7c 	bl	80018f2 <HAL_PCD_SetAddress>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006bfe:	7bfb      	ldrb	r3, [r7, #15]
 8006c00:	4618      	mov	r0, r3
 8006c02:	f000 f881 	bl	8006d08 <USBD_Get_USB_Status>
 8006c06:	4603      	mov	r3, r0
 8006c08:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8006c0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3710      	adds	r7, #16
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b086      	sub	sp, #24
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	607a      	str	r2, [r7, #4]
 8006c1e:	461a      	mov	r2, r3
 8006c20:	460b      	mov	r3, r1
 8006c22:	72fb      	strb	r3, [r7, #11]
 8006c24:	4613      	mov	r3, r2
 8006c26:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006c36:	893b      	ldrh	r3, [r7, #8]
 8006c38:	7af9      	ldrb	r1, [r7, #11]
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	f7fa ff6e 	bl	8001b1c <HAL_PCD_EP_Transmit>
 8006c40:	4603      	mov	r3, r0
 8006c42:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c44:	7dfb      	ldrb	r3, [r7, #23]
 8006c46:	4618      	mov	r0, r3
 8006c48:	f000 f85e 	bl	8006d08 <USBD_Get_USB_Status>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8006c50:	7dbb      	ldrb	r3, [r7, #22]
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3718      	adds	r7, #24
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}

08006c5a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006c5a:	b580      	push	{r7, lr}
 8006c5c:	b086      	sub	sp, #24
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	60f8      	str	r0, [r7, #12]
 8006c62:	607a      	str	r2, [r7, #4]
 8006c64:	461a      	mov	r2, r3
 8006c66:	460b      	mov	r3, r1
 8006c68:	72fb      	strb	r3, [r7, #11]
 8006c6a:	4613      	mov	r3, r2
 8006c6c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c72:	2300      	movs	r3, #0
 8006c74:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006c7c:	893b      	ldrh	r3, [r7, #8]
 8006c7e:	7af9      	ldrb	r1, [r7, #11]
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	f7fa fefd 	bl	8001a80 <HAL_PCD_EP_Receive>
 8006c86:	4603      	mov	r3, r0
 8006c88:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c8a:	7dfb      	ldrb	r3, [r7, #23]
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f000 f83b 	bl	8006d08 <USBD_Get_USB_Status>
 8006c92:	4603      	mov	r3, r0
 8006c94:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8006c96:	7dbb      	ldrb	r3, [r7, #22]
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3718      	adds	r7, #24
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b082      	sub	sp, #8
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	460b      	mov	r3, r1
 8006caa:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006cb2:	78fa      	ldrb	r2, [r7, #3]
 8006cb4:	4611      	mov	r1, r2
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f7fa ff1c 	bl	8001af4 <HAL_PCD_EP_GetRxCount>
 8006cbc:	4603      	mov	r3, r0
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3708      	adds	r7, #8
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
	...

08006cc8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006cd0:	4b02      	ldr	r3, [pc, #8]	; (8006cdc <USBD_static_malloc+0x14>)
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	370c      	adds	r7, #12
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bc80      	pop	{r7}
 8006cda:	4770      	bx	lr
 8006cdc:	200001a4 	.word	0x200001a4

08006ce0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]

}
 8006ce8:	bf00      	nop
 8006cea:	370c      	adds	r7, #12
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bc80      	pop	{r7}
 8006cf0:	4770      	bx	lr

08006cf2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006cf2:	b480      	push	{r7}
 8006cf4:	b083      	sub	sp, #12
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
 8006cfa:	460b      	mov	r3, r1
 8006cfc:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8006cfe:	bf00      	nop
 8006d00:	370c      	adds	r7, #12
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bc80      	pop	{r7}
 8006d06:	4770      	bx	lr

08006d08 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b085      	sub	sp, #20
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	4603      	mov	r3, r0
 8006d10:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d12:	2300      	movs	r3, #0
 8006d14:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006d16:	79fb      	ldrb	r3, [r7, #7]
 8006d18:	2b03      	cmp	r3, #3
 8006d1a:	d817      	bhi.n	8006d4c <USBD_Get_USB_Status+0x44>
 8006d1c:	a201      	add	r2, pc, #4	; (adr r2, 8006d24 <USBD_Get_USB_Status+0x1c>)
 8006d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d22:	bf00      	nop
 8006d24:	08006d35 	.word	0x08006d35
 8006d28:	08006d3b 	.word	0x08006d3b
 8006d2c:	08006d41 	.word	0x08006d41
 8006d30:	08006d47 	.word	0x08006d47
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006d34:	2300      	movs	r3, #0
 8006d36:	73fb      	strb	r3, [r7, #15]
    break;
 8006d38:	e00b      	b.n	8006d52 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006d3a:	2302      	movs	r3, #2
 8006d3c:	73fb      	strb	r3, [r7, #15]
    break;
 8006d3e:	e008      	b.n	8006d52 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006d40:	2301      	movs	r3, #1
 8006d42:	73fb      	strb	r3, [r7, #15]
    break;
 8006d44:	e005      	b.n	8006d52 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006d46:	2302      	movs	r3, #2
 8006d48:	73fb      	strb	r3, [r7, #15]
    break;
 8006d4a:	e002      	b.n	8006d52 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006d4c:	2302      	movs	r3, #2
 8006d4e:	73fb      	strb	r3, [r7, #15]
    break;
 8006d50:	bf00      	nop
  }
  return usb_status;
 8006d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3714      	adds	r7, #20
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bc80      	pop	{r7}
 8006d5c:	4770      	bx	lr
 8006d5e:	bf00      	nop

08006d60 <__libc_init_array>:
 8006d60:	b570      	push	{r4, r5, r6, lr}
 8006d62:	2500      	movs	r5, #0
 8006d64:	4e0c      	ldr	r6, [pc, #48]	; (8006d98 <__libc_init_array+0x38>)
 8006d66:	4c0d      	ldr	r4, [pc, #52]	; (8006d9c <__libc_init_array+0x3c>)
 8006d68:	1ba4      	subs	r4, r4, r6
 8006d6a:	10a4      	asrs	r4, r4, #2
 8006d6c:	42a5      	cmp	r5, r4
 8006d6e:	d109      	bne.n	8006d84 <__libc_init_array+0x24>
 8006d70:	f000 f822 	bl	8006db8 <_init>
 8006d74:	2500      	movs	r5, #0
 8006d76:	4e0a      	ldr	r6, [pc, #40]	; (8006da0 <__libc_init_array+0x40>)
 8006d78:	4c0a      	ldr	r4, [pc, #40]	; (8006da4 <__libc_init_array+0x44>)
 8006d7a:	1ba4      	subs	r4, r4, r6
 8006d7c:	10a4      	asrs	r4, r4, #2
 8006d7e:	42a5      	cmp	r5, r4
 8006d80:	d105      	bne.n	8006d8e <__libc_init_array+0x2e>
 8006d82:	bd70      	pop	{r4, r5, r6, pc}
 8006d84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d88:	4798      	blx	r3
 8006d8a:	3501      	adds	r5, #1
 8006d8c:	e7ee      	b.n	8006d6c <__libc_init_array+0xc>
 8006d8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d92:	4798      	blx	r3
 8006d94:	3501      	adds	r5, #1
 8006d96:	e7f2      	b.n	8006d7e <__libc_init_array+0x1e>
 8006d98:	08006e38 	.word	0x08006e38
 8006d9c:	08006e38 	.word	0x08006e38
 8006da0:	08006e38 	.word	0x08006e38
 8006da4:	08006e3c 	.word	0x08006e3c

08006da8 <memset>:
 8006da8:	4603      	mov	r3, r0
 8006daa:	4402      	add	r2, r0
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d100      	bne.n	8006db2 <memset+0xa>
 8006db0:	4770      	bx	lr
 8006db2:	f803 1b01 	strb.w	r1, [r3], #1
 8006db6:	e7f9      	b.n	8006dac <memset+0x4>

08006db8 <_init>:
 8006db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dba:	bf00      	nop
 8006dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dbe:	bc08      	pop	{r3}
 8006dc0:	469e      	mov	lr, r3
 8006dc2:	4770      	bx	lr

08006dc4 <_fini>:
 8006dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dc6:	bf00      	nop
 8006dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dca:	bc08      	pop	{r3}
 8006dcc:	469e      	mov	lr, r3
 8006dce:	4770      	bx	lr
